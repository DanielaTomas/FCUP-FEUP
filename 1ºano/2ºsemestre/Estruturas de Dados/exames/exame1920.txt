Grupo 1
1.1.
 a) (n/1000)%10
 b) char[][] v = new char[k][k]
 c) ((s.charAt(0) >= 'a' && s.charAt(0) <= 'z') || (s.charAt(0) >= 'A' && s.charAt(0) <= 'Z'))
 (outra solução seria: (Character.isDigit(s.charAt(0))))
 d) (!(s.length() % 2))
 e) n = n | 2

Grupo 2
2.1.
 class Rectangle {
  private int x1,y1,x2,y2;

  Rectangle(int a1, int b1, int a2, int b2) {
   x1 = a1; y1 = b1;
   x2 = a2; y2 = b2;
  }
 }

2.2.
 Rectangle area() {
  return ((x2 - x1)*(y2 - y1));
 }

2.3.
  Rectangle origin() {
   Rectangle novo = new Rectangle(0,0,(x2 - x1),(y2 - y1));
   return novo;
  }

2.3.
 Rectangle r1 = new Rectangle(1,1,4,2);
 Rectangle r2;
 r2 = r1.origin();

Grupo 3
3.1.
 Um interface não pode ser instanciado porque não tem construtores, ou seja,
 não é possível criar um novo objeto desse tipo.
 Logo, a declaração Set<E> s = new Set<E>(); está incorreta.
 Um outro erro nessa implementação é o facto de ser usada uma variável genérica (E).
 Uma implementação correta seria: Set<Integer> s = new TreeSet<>(); porque
 a classe TreeSet implementa este interface e, por esse motivo, podem-se
 instanciar objetos deste tipo.

Grupo 4
4.1. Ω , Θ ou O
 2^3 = Θ(24)
 log n = O(√n)
 42*(n^5) = O(2^n)
 n^2 = Ω(n log n)
 2^(2n) = Θ(2^n)

4.2.
 a) O(n^2)
 b) O(n^2)
 c) O(n log n)
 d) O(log n)
 e) O(n^2)

4.3. T(n) = 2*T(n/2) + Θ(n)

               T(n)                    1
          /            \
       T(n/2)         T(n/2)           2
        /   \          /   \
    T(n/4) T(n/4)  T(n/4)  T(n/4)      4
       .      .       .       .
       .      .       .       .
    /  .      .       .       .
  T(1) T(1) T(1) ... T(1)  T(1) T(1)   n

4.4.
 A → constante; 30ms
 B → linear; 90ms
 C → Θ(n^2); 90ms
 D → Θ(n^3); 100/27
 E → exponencial; (3^20)*5

4.5.
 a) O(1) -> para saber o size, o tempo é constante
 b) O(log n) -> procurar com pesquisa binária
 c) O(n) -> ao remover um inteiro temos de manter o array ordenado

4.6.
Boolean Array -> complexidade temporal O(1)
Vantagem: solução mais rápida
Desvantagem: gasta mais memória e não é genérica.
(O método clear do Boolean Array é o único método pior, porque a complexidade
temporal não é constante (O(k)) ao contrário do array desordenado (O(1)))
O Boolean Array só funciona para números inteiros, ao contrário do array ordenado.

Grupo 5
5.1.
 a) complexidade temporal: O(n)
 public int contains(T x) {
   Node<T> cur = first;
   int count = 0;
   while(cur != null) {
    if(x.equals(cur.getValue()))
     count++;
    cur = cur.getNext();
   }
   return count;
 }

 b) complexidade temporal: O(n)
 void removeEven() {
   if(size < 0) return;
   if(size == 1) {
     first = null;
     size--;
   }
   else {
     Node<T> cur = first;
     for(int i = 0; cur != null && cur.getNext() != null; i++) {
       if(i % 2 != 0) {
         cur.setNext(cur.getNext().getNext());
         i++;
       }
       size--;
       cur = cur.getNext();
     }
   }
 }

5.2.
 a) array
 b) array
 c) lista
 d) ambos
 e) array

5.3.
 enqueue: se p1 estiver vazia p1.push(...)
          caso contrário p2.push(...)
 dequeue: se p1 não estiver vazia p1.pop()
          caso contrário p1.push(p2.pop()) até p2 ficar vazia, depois fazer p1.pop()
 size: size de p1 + size de p2

Grupo 6
6.1.
 a) Preorder: A B C E D F G H I
 b) Inorder: C B D E F A G I H
 c) Pesquisa em largura: A B G C E H D F I

6.2. O(log n)
 a)
 public int size() {
  return size(root);
 }
 private int size(BTNode<T> n) {
  if(n == null) return 0;
  return 1 + size(n.getLeft()) + size(n.getRight());
 }

 b) //não testado
 public boolean binary(T a, T b) {
   return binary(root,a,b);
 }
 private boolean binary(BSTNode<T> n, T a, T b) {
   if(n == null) return 0;
   if(n.getValue().compareTo(a) >= 0 && n.getValue().compareTo(b) <= 0 && n.getLeft() != null && n.getRight() != null) return true;
   else return false;
   return binary(n.getLeft(),a,b) && binary(n.getRight(),a,b);
 }
 }

Grupo 7
7.1.
 a)     10      b)        4
      /    \            /    \
     3     14          3     14
    / \               /
   2   4             2
  /                 /
 1                 1

7.2.
Altura mínima: 3
Ordem de Inserção: H, D, B, A, C, F, E, G, L, J, I, K, N, M

                  H
             /          \
            D            L
          /   \        /    \
         B     F      J      N
        / \   / \    /  \    /
       A   C E   G  I    K  M

7.3.
 a) k + 1
 b) ((k+1)^4 - 6(k+1)^3 + 23(k+1)^2 - 18(k+1) + 12)/12

7.4. Θ(log n)
Porque numa árvore binária de pesquisa, para encontrar um elemento usamos
pesquisa binária.

Grupo 8
8.1.
 a)     2       b)        1        c)       4
      /    \            /    \            /    \
     6      4          6      2          6      5
    / \     /         / \    / \        / \
   9   7   5         9   7  5   4      9   7

8.2.
 Complexidade temporal: O(log n)
 Complexidade espacial: O(n) (array de tamanho n)
 Comparando os valores dos nós do último nível (folhas) e verificar qual é o maior.
