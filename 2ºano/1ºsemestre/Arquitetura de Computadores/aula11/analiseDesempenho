IC: Intruction Count
CPI: Cycles Per Instruction
CPIPerfect: CPI se cache misses
CPIStall: CPI com espera pelo sistema de memória
--------------------------------------------------------------------------
CPI = CPIPerfect + CPIStall
CPIStall = CPIStallInstructionAccess + CPIStallDataAccess
CPIStallInstructionAccess = 1 * MissRateInstructionAccess * MissPenalty
CPIStallDataAccess = (LoadStore/IC) * MissRateDataAccess * MissPenalty
--------------------------------------------------------------------------
CPUTime = IC * CPI * ClockPeriod = (IC * CPI)/ClockRate

1.

P1: 3.0 * 10^9 Hz    \
P2: 2.5 * 10^9 Hz     } ClockRate
P3: 4.0 * 10^9 Hz    /
P1: 1.5 CPI
P2: 1.0 CPI
P3: 2.2 CPI

a)
P1: CP = 1/(3.0 * 10^9) = 3.3 * 10^(-10)
Tempo de uma instrução: CPI * CP = CPI/CR = 1.5/(3*10^9) = 5 * 10^(-10) s
P2: 1/(2.5 * 10^9) = 4.0 * 10^(-10) s <- mais rápido
P3: 2.2/(4.0 * 10^9) = 5.5 * 10^(-10) s

b)
P1:
CPUTime = (IC * CPI)/CR
ciclos = IC * CPI = 3 * 10^10
<=> IC = (CPUTime * CR)/CPI
<=> IC = 2 * 10^10

P2:
IC = (CPUTime * CR)/CPI = 2.5 * 10^10
ciclos = 2.5 * 10^10

P3:
IC = 1.818 * 10^10
ciclos = 4 * 10^10

c)
Novo CPI -> +20%

P1: 1.5 * 1.2 = 1.80
P2: 10 * 1.2 = 1.20
P3: 2.2 * 1.2 = 2.64

NewCPUTime = (IC * NewCPI)/NewClockRate
NewClockRate
P1: 5.14 GHz
P2: 4.28 GHz
P3: 6.86 GHz

2.
                 ________________
                |                |    CPIPerfect: 3.5
          |-----|      CPU       |-----|
          |     |________________|     | Load/Stores: 30%
   1 ciclo|                            | MissRate
          |      _______________       | Inst: 2%
          |----→|    Cache L1   |←-----| Dados: 4%
          |     |_______________|------|
          |                            |
          |      _______________       | MissRate
 20 ciclos|----→|    Cache L2   |←-----| Inst: 0.5%
          |     |_______________|      | Dados: 0.5%
          |
          |      _______________
200 ciclos|----→|    Memória    |
                |_______________|

a)
CPIStallInstructionAccess = 1 * 0.02 * 200 = 4
CPIStallDataAccess = 0.3 * 0.04 * 200 = 2.40
CPI = 3.5 + 4 + 2.40 = 9.90
Melhor 11%

b)
CPIStallInstructionAccess = 1 * (0.02 * 20 + 0.005 * 200) = 1.40
CPIStallDataAccess = 0.3 * (0.04 * 20 + 0.005 * 200) = 0.54
CPI = 3.5 + 1.40 + 0.54 = 5.44
1.82 (9.90/5.44) vezes mais rápido
Melhor 23%

c)
CPIStallInstructionAccess = 1 * (0.02 * 400) = 8.00
CPIStallDataAccess = 0.3 * (0.04 * 400) = 4.80
CPI = 5.0 + 80 + 4.80 = 17.80
                       (8.90)

CPIStallInstructionAccess = 1 * (0.02 * 40 + 0.005 * 400) = 2.80
CPIStallDataAccess = 0.3 * (0.04 * 40 + 0.005 * 400) = 1.08
CPI = 5.0 + 2.80 + 1.08 = 8.88
                         (4.44)

3.
a)
P1: ClockRate = 1/(0.66*10^(-9)) = 1.52GHz

b)
P1: 1 * HitTime + MissRate * MemoryAccessTime = 1 * 0.66 + 0.08 * 70 = 6.26ns
70/0.66 = 107 ciclos
