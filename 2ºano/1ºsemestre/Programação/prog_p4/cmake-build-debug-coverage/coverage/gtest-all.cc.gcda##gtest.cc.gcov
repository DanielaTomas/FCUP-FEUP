        -:    0:Source:/home/daniela/2ºano/Programação/prog_p4/gtest/googletest/src/gtest.cc
        -:    0:Graph:/home/daniela/2ºano/Programação/prog_p4/cmake-build-debug-coverage/gtest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/daniela/2ºano/Programação/prog_p4/cmake-build-debug-coverage/gtest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:#include "gtest/internal/custom/gtest.h"
        -:   35:#include "gtest/gtest-spi.h"
        -:   36:
        -:   37:#include <ctype.h>
        -:   38:#include <stdarg.h>
        -:   39:#include <stdio.h>
        -:   40:#include <stdlib.h>
        -:   41:#include <time.h>
        -:   42:#include <wchar.h>
        -:   43:#include <wctype.h>
        -:   44:
        -:   45:#include <algorithm>
        -:   46:#include <chrono>  // NOLINT
        -:   47:#include <cmath>
        -:   48:#include <cstdint>
        -:   49:#include <iomanip>
        -:   50:#include <limits>
        -:   51:#include <list>
        -:   52:#include <map>
        -:   53:#include <ostream>  // NOLINT
        -:   54:#include <sstream>
        -:   55:#include <vector>
        -:   56:
        -:   57:#if GTEST_OS_LINUX
        -:   58:
        -:   59:# include <fcntl.h>  // NOLINT
        -:   60:# include <limits.h>  // NOLINT
        -:   61:# include <sched.h>  // NOLINT
        -:   62:// Declares vsnprintf().  This header is not available on Windows.
        -:   63:# include <strings.h>  // NOLINT
        -:   64:# include <sys/mman.h>  // NOLINT
        -:   65:# include <sys/time.h>  // NOLINT
        -:   66:# include <unistd.h>  // NOLINT
        -:   67:# include <string>
        -:   68:
        -:   69:#elif GTEST_OS_ZOS
        -:   70:# include <sys/time.h>  // NOLINT
        -:   71:
        -:   72:// On z/OS we additionally need strings.h for strcasecmp.
        -:   73:# include <strings.h>  // NOLINT
        -:   74:
        -:   75:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   76:
        -:   77:# include <windows.h>  // NOLINT
        -:   78:# undef min
        -:   79:
        -:   80:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   81:
        -:   82:# include <windows.h>  // NOLINT
        -:   83:# undef min
        -:   84:
        -:   85:#ifdef _MSC_VER
        -:   86:# include <crtdbg.h>  // NOLINT
        -:   87:#endif
        -:   88:
        -:   89:# include <io.h>  // NOLINT
        -:   90:# include <sys/timeb.h>  // NOLINT
        -:   91:# include <sys/types.h>  // NOLINT
        -:   92:# include <sys/stat.h>  // NOLINT
        -:   93:
        -:   94:# if GTEST_OS_WINDOWS_MINGW
        -:   95:#  include <sys/time.h>  // NOLINT
        -:   96:# endif  // GTEST_OS_WINDOWS_MINGW
        -:   97:
        -:   98:#else
        -:   99:
        -:  100:// cpplint thinks that the header is already included, so we want to
        -:  101:// silence it.
        -:  102:# include <sys/time.h>  // NOLINT
        -:  103:# include <unistd.h>  // NOLINT
        -:  104:
        -:  105:#endif  // GTEST_OS_LINUX
        -:  106:
        -:  107:#if GTEST_HAS_EXCEPTIONS
        -:  108:# include <stdexcept>
        -:  109:#endif
        -:  110:
        -:  111:#if GTEST_CAN_STREAM_RESULTS_
        -:  112:# include <arpa/inet.h>  // NOLINT
        -:  113:# include <netdb.h>  // NOLINT
        -:  114:# include <sys/socket.h>  // NOLINT
        -:  115:# include <sys/types.h>  // NOLINT
        -:  116:#endif
        -:  117:
        -:  118:#include "src/gtest-internal-inl.h"
        -:  119:
        -:  120:#if GTEST_OS_WINDOWS
        -:  121:# define vsnprintf _vsnprintf
        -:  122:#endif  // GTEST_OS_WINDOWS
        -:  123:
        -:  124:#if GTEST_OS_MAC
        -:  125:#ifndef GTEST_OS_IOS
        -:  126:#include <crt_externs.h>
        -:  127:#endif
        -:  128:#endif
        -:  129:
        -:  130:#if GTEST_HAS_ABSL
        -:  131:#include "absl/debugging/failure_signal_handler.h"
        -:  132:#include "absl/debugging/stacktrace.h"
        -:  133:#include "absl/debugging/symbolize.h"
        -:  134:#include "absl/strings/str_cat.h"
        -:  135:#endif  // GTEST_HAS_ABSL
        -:  136:
        -:  137:namespace testing {
        -:  138:
        -:  139:using internal::CountIf;
        -:  140:using internal::ForEach;
        -:  141:using internal::GetElementOr;
        -:  142:using internal::Shuffle;
        -:  143:
        -:  144:// Constants.
        -:  145:
        -:  146:// A test whose test suite name or test name matches this filter is
        -:  147:// disabled and not run.
        -:  148:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  149:
        -:  150:// A test suite whose name matches this filter is considered a death
        -:  151:// test suite and will be run before test suites whose name doesn't
        -:  152:// match this filter.
        -:  153:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  154:
        -:  155:// A test filter that matches everything.
        -:  156:static const char kUniversalFilter[] = "*";
        -:  157:
        -:  158:// The default output format.
        -:  159:static const char kDefaultOutputFormat[] = "xml";
        -:  160:// The default output file.
        -:  161:static const char kDefaultOutputFile[] = "test_detail";
        -:  162:
        -:  163:// The environment variable name for the test shard index.
        -:  164:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  165:// The environment variable name for the total number of test shards.
        -:  166:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  167:// The environment variable name for the test shard status file.
        -:  168:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  169:
        -:  170:namespace internal {
        -:  171:
        -:  172:// The text used in failure messages to indicate the start of the
        -:  173:// stack trace.
        -:  174:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  175:
        -:  176:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  177:// is specified on the command line.
        -:  178:bool g_help_flag = false;
        -:  179:
        -:  180:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  181:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  182:  FILE* fileout = nullptr;
    #####:  183:  FilePath output_file_path(output_file);
    %%%%%:  183-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$:  183-block  1
call    5 never executed
    #####:  184:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  184-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  184-block  1
call    4 never executed
        -:  185:
    #####:  186:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  186-block  1
branch  3 never executed
branch  4 never executed
    #####:  187:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  187-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  187-block  1
        -:  188:  }
    #####:  189:  if (fileout == nullptr) {
    %%%%%:  189-block  0
branch  0 never executed
branch  1 never executed
    #####:  190:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  190-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  190-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  190-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  190-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  190-block  4
call   17 never executed
call   18 never executed
    $$$$$:  190-block  5
call   19 never executed
    $$$$$:  190-block  6
call   20 never executed
        -:  191:  }
    #####:  192:  return fileout;
    %%%%%:  192-block  0
call    0 never executed
        -:  193:}
        -:  194:
        -:  195:}  // namespace internal
        -:  196:
        -:  197:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  198:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  199:static const char* GetDefaultFilter() {
        -:  200:  const char* const testbridge_test_only =
        1:  201:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  201-block  0
call    0 returned 1
        1:  202:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  203:    return testbridge_test_only;
    %%%%%:  203-block  0
        -:  204:  }
        1:  205:  return kUniversalFilter;
        1:  205-block  0
        -:  206:}
        -:  207:
        -:  208:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  209:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 57%
        1:  210:static bool GetDefaultFailFast() {
        -:  211:  const char* const testbridge_test_runner_fail_fast =
        1:  212:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  212-block  0
call    0 returned 1
        1:  213:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  214:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  214-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  214-block  1
    %%%%%:  214-block  2
        -:  215:  }
        1:  216:  return false;
        1:  216-block  0
        -:  217:}
        -:  218:
        -:  219:}  // namespace testing
        -:  220:
        -:  221:GTEST_DEFINE_bool_(
        -:  222:    fail_fast,
        -:  223:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  224:                                        testing::GetDefaultFailFast()),
        -:  225:    "True if and only if a test failure should stop further test execution.");
        -:  226:
        -:  227:GTEST_DEFINE_bool_(
        -:  228:    also_run_disabled_tests,
        -:  229:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  230:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  231:
        -:  232:GTEST_DEFINE_bool_(
        -:  233:    break_on_failure,
        -:  234:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  235:    "True if and only if a failed assertion should be a debugger "
        -:  236:    "break-point.");
        -:  237:
        -:  238:GTEST_DEFINE_bool_(catch_exceptions,
        -:  239:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  240:                                                       true),
        -:  241:                   "True if and only if " GTEST_NAME_
        -:  242:                   " should catch exceptions and treat them as test failures.");
        -:  243:
        -:  244:GTEST_DEFINE_string_(
        -:  245:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  246:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  247:    "and auto.  'auto' means to use colors if the output is "
        -:  248:    "being sent to a terminal and the TERM environment variable "
        -:  249:    "is set to a terminal type that supports colors.");
        -:  250:
        -:  251:GTEST_DEFINE_string_(
        -:  252:    filter,
        -:  253:    testing::internal::StringFromGTestEnv("filter",
        -:  254:                                          testing::GetDefaultFilter()),
        -:  255:    "A colon-separated list of glob (not regex) patterns "
        -:  256:    "for filtering the tests to run, optionally followed by a "
        -:  257:    "'-' and a : separated list of negative patterns (tests to "
        -:  258:    "exclude).  A test is run if it matches one of the positive "
        -:  259:    "patterns and does not match any of the negative patterns.");
        -:  260:
        -:  261:GTEST_DEFINE_bool_(
        -:  262:    install_failure_signal_handler,
        -:  263:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  264:                                        false),
        -:  265:    "If true and supported on the current platform, " GTEST_NAME_
        -:  266:    " should "
        -:  267:    "install a signal handler that dumps debugging information when fatal "
        -:  268:    "signals are raised.");
        -:  269:
        -:  270:GTEST_DEFINE_bool_(list_tests, false,
        -:  271:                   "List all tests without running them.");
        -:  272:
        -:  273:// The net priority order after flag processing is thus:
        -:  274://   --gtest_output command line flag
        -:  275://   GTEST_OUTPUT environment variable
        -:  276://   XML_OUTPUT_FILE environment variable
        -:  277://   ''
        -:  278:GTEST_DEFINE_string_(
        -:  279:    output,
        -:  280:    testing::internal::StringFromGTestEnv(
        -:  281:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  282:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  283:    "optionally followed by a colon and an output file name or directory. "
        -:  284:    "A directory is indicated by a trailing pathname separator. "
        -:  285:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  286:    "If a directory is specified, output files will be created "
        -:  287:    "within that directory, with file-names based on the test "
        -:  288:    "executable's name and, if necessary, made unique by adding "
        -:  289:    "digits.");
        -:  290:
        -:  291:GTEST_DEFINE_bool_(
        -:  292:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  293:    "True if only test failures should be displayed in text output.");
        -:  294:
        -:  295:GTEST_DEFINE_bool_(print_time,
        -:  296:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  297:                   "True if and only if " GTEST_NAME_
        -:  298:                   " should display elapsed time in text output.");
        -:  299:
        -:  300:GTEST_DEFINE_bool_(print_utf8,
        -:  301:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  302:                   "True if and only if " GTEST_NAME_
        -:  303:                   " prints UTF8 characters as text.");
        -:  304:
        -:  305:GTEST_DEFINE_int32_(
        -:  306:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  307:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  308:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  309:
        -:  310:GTEST_DEFINE_int32_(
        -:  311:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  312:    "How many times to repeat each test.  Specify a negative number "
        -:  313:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  314:
        -:  315:GTEST_DEFINE_bool_(
        -:  316:    recreate_environments_when_repeating,
        -:  317:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  318:                                        true),
        -:  319:    "Controls whether global test environments are recreated for each repeat "
        -:  320:    "of the tests. If set to false the global test environments are only set "
        -:  321:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  322:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  323:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  324:    "there is no last run, the environments will always be recreated to avoid "
        -:  325:    "leaks.");
        -:  326:
        -:  327:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  328:                   "True if and only if " GTEST_NAME_
        -:  329:                   " should include internal stack frames when "
        -:  330:                   "printing test failure stack traces.");
        -:  331:
        -:  332:GTEST_DEFINE_bool_(shuffle,
        -:  333:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  334:                   "True if and only if " GTEST_NAME_
        -:  335:                   " should randomize tests' order on every run.");
        -:  336:
        -:  337:GTEST_DEFINE_int32_(
        -:  338:    stack_trace_depth,
        -:  339:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  340:                                         testing::kMaxStackTraceDepth),
        -:  341:    "The maximum number of stack frames to print when an "
        -:  342:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  343:
        -:  344:GTEST_DEFINE_string_(
        -:  345:    stream_result_to,
        -:  346:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  347:    "This flag specifies the host name and the port number on which to stream "
        -:  348:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  349:    "Linux.");
        -:  350:
        -:  351:GTEST_DEFINE_bool_(
        -:  352:    throw_on_failure,
        -:  353:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  354:    "When this flag is specified, a failed assertion will throw an exception "
        -:  355:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  356:    "otherwise. For use with an external test framework.");
        -:  357:
        -:  358:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  359:GTEST_DEFINE_string_(
        -:  360:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  361:    "This flag specifies the flagfile to read command-line flags from.");
        -:  362:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  363:
        -:  364:namespace testing {
        -:  365:namespace internal {
        -:  366:
        -:  367:// Generates a random number from [0, range), using a Linear
        -:  368:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  369:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  370:uint32_t Random::Generate(uint32_t range) {
        -:  371:  // These constants are the same as are used in glibc's rand(3).
        -:  372:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  373:  state_ = static_cast<uint32_t>(1103515245ULL*state_ + 12345U) % kMaxRange;
    %%%%%:  373-block  0
call    0 never executed
call    1 never executed
        -:  374:
    #####:  375:  GTEST_CHECK_(range > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  375-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%:  375-block  1
call    7 never executed
call    8 never executed
    $$$$$:  375-block  2
call    9 never executed
    $$$$$:  375-block  3
call   10 never executed
    #####:  376:      << "Cannot generate a number in the range [0, 0).";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  376-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  377:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  377-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%:  377-block  2
call    7 never executed
call    8 never executed
    $$$$$:  377-block  3
call    9 never executed
    $$$$$:  377-block  4
call   10 never executed
    #####:  378:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  378-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  378-block  1
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####:  379:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  379-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  379-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  379-block  2
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  379-block  3
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
        -:  380:
        -:  381:  // Converting via modulus introduces a bit of downward bias, but
        -:  382:  // it's simple, and a linear congruential generator isn't too good
        -:  383:  // to begin with.
    #####:  384:  return state_ % range;
    %%%%%:  384-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  384-block  1
    %%%%%:  384-block  2
    %%%%%:  384-block  3
        -:  385:}
        -:  386:
        -:  387:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  388:// Google Test.  Useful for catching the user mistake of not initializing
        -:  389:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  390:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  390-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
        -:  391:
        -:  392:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  393:// results of calling a given int-returning method on each.
        -:  394:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 77%
        5:  395:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  396:                                int (TestSuite::*method)() const) {
        5:  397:  int sum = 0;
       10:  398:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  398-block  0
       10:  398-block  1
call    0 returned 10
call    1 returned 10
branch  2 taken 5 (fallthrough)
branch  3 taken 5
       5*:  399:    sum += (case_list[i]->*method)();
        5:  399-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
call    3 returned 5
call    4 returned 5
call    5 returned 5
call    6 returned 5
branch  7 taken 5 (fallthrough)
branch  8 taken 0
        5:  399-block  1
    %%%%%:  399-block  2
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        5:  399-block  3
call   13 returned 5
        -:  400:  }
        5:  401:  return sum;
        5:  401-block  0
        -:  402:}
        -:  403:
        -:  404:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  405:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  406:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  406-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  406-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  406-block  2
    %%%%%:  406-block  3
    %%%%%:  406-block  4
        -:  407:}
        -:  408:
        -:  409:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 2 returned 100% blocks executed 93%
        2:  410:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  411:  return test_suite->should_run() && test_suite->Failed();
        2:  411-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:  411-block  1
call    6 returned 2
call    7 returned 2
call    8 returned 2
call    9 returned 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
    %%%%%:  411-block  2
        2:  411-block  3
        2:  411-block  4
        -:  412:}
        -:  413:
        -:  414:// Returns true if and only if test_suite contains at least one test that
        -:  415:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  416:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  417:  return test_suite->should_run();
        2:  417-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
        -:  418:}
        -:  419:
        -:  420:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  421:AssertHelper::AssertHelper(TestPartResult::Type type,
        -:  422:                           const char* file,
        -:  423:                           int line,
    #####:  424:                           const char* message)
    %%%%%:  424-block  0
call    0 never executed
    #####:  425:    : data_(new AssertHelperData(type, file, line, message)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  425-block  0
call    5 never executed
    $$$$$:  425-block  1
call    6 never executed
    #####:  426:}
        -:  427:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  428:AssertHelper::~AssertHelper() {
    %%%%%:  428-block  0
call    0 never executed
    #####:  429:  delete data_;
    %%%%%:  429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  429-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  430:}
        -:  431:
        -:  432:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  433:void AssertHelper::operator=(const Message& message) const {
    #####:  434:  UnitTest::GetInstance()->
    %%%%%:  434-block  0
call    0 never executed
    #####:  435:    AddTestPartResult(data_->type, data_->file, data_->line,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  435-block  0
    %%%%%:  435-block  1
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####:  436:                      AppendUserMessage(data_->message, message),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  436-block  0
call   11 never executed
    %%%%%:  436-block  1
call   12 never executed
call   13 never executed
    $$$$$:  436-block  2
call   14 never executed
    $$$$$:  436-block  3
call   15 never executed
    #####:  437:                      UnitTest::GetInstance()->impl()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  438:                      ->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$:  438-block  0
call    6 never executed
    $$$$$:  438-block  1
call    7 never executed
        -:  439:                      // Skips the stack frame for this function itself.
        -:  440:                      );  // NOLINT
    #####:  441:}
        -:  442:
        -:  443:namespace {
        -:  444:
        -:  445:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  446:// to creates test cases for it, a synthetic test case is
        -:  447:// inserted to report ether an error or a log message.
        -:  448://
        -:  449:// This configuration bit will likely be removed at some point.
        -:  450:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  451:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  452:
        -:  453:// A test that fails at a given file/line location with a given message.
        -:  454:class FailureTest : public Test {
        -:  455: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  456:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  457:                       bool as_error)
    #####:  458:      : loc_(loc),
    %%%%%:  458-block  0
call    0 never executed
call    1 never executed
    #####:  459:        error_message_(std::move(error_message)),
call    0 never executed
    #####:  460:        as_error_(as_error) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  460-block  0
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$:  460-block  1
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
        -:  461:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  462:  void TestBody() override {
    #####:  463:    if (as_error_) {
    %%%%%:  463-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  463-block  1
    %%%%%:  463-block  2
branch  5 never executed
branch  6 never executed
    #####:  464:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  464-block  0
call    8 never executed
call    9 never executed
    $$$$$:  464-block  1
call   10 never executed
    $$$$$:  464-block  2
call   11 never executed
    #####:  465:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  465-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  465-block  1
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    %%%%%:  465-block  2
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
    $$$$$:  465-block  3
call   24 never executed
    $$$$$:  465-block  4
call   25 never executed
        -:  466:    } else {
    #####:  467:      std::cout << error_message_ << std::endl;
    %%%%%:  467-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  468:    }
    #####:  469:  }
    %%%%%:  469-block  0
        -:  470:
        -:  471: private:
        -:  472:  const CodeLocation loc_;
        -:  473:  const std::string error_message_;
        -:  474:  const bool as_error_;
        -:  475:};
        -:  476:
        -:  477:
        -:  478:}  // namespace
        -:  479:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  480:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  481:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  481-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
        -:  482:}
        -:  483:
        -:  484:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  485:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  486:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  486-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  486-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  486-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  486-block  3
call   16 never executed
    $$$$$:  486-block  4
call   17 never executed
    $$$$$:  486-block  5
call   18 never executed
    $$$$$:  486-block  6
call   19 never executed
    #####:  487:}
        -:  488:
        -:  489:// If this parameterized test suite has no instantiations (and that
        -:  490:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  491:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  492:                             bool has_test_p) {
    #####:  493:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  493-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  493-block  1
call    3 never executed
    #####:  494:  if (ignored.find(name) != ignored.end()) return;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  494-block  0
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  494-block  1
    $$$$$:  494-block  2
call   16 never executed
        -:  495:
    #####:  496:  const char kMissingInstantiation[] =  //
    %%%%%:  496-block  0
call    0 never executed
        -:  497:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  498:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  499:      "ones provided expand to nothing."
        -:  500:      "\n\n"
        -:  501:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  502:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  503:      "placed in a library that may be linked in to get other utilities.)";
        -:  504:
    #####:  505:  const char kMissingTestCase[] =  //
call    0 never executed
        -:  506:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  507:      "defined via TEST_P . No test cases will run."
        -:  508:      "\n\n"
        -:  509:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  510:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  511:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  512:      "removed but the rest got left behind.";
        -:  513:
    #####:  514:  std::string message =
call    0 never executed
    #####:  515:      "Parameterized test suite " + name +
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  515-block  0
    %%%%%:  515-block  1
    %%%%%:  515-block  2
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  515-block  3
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  515-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  515-block  5
call   15 never executed
    $$$$$:  515-block  6
call   16 never executed
    #####:  516:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  516-block  0
call    4 never executed
call    5 never executed
    $$$$$:  516-block  1
call    6 never executed
        -:  517:      "\n\n"
        -:  518:      "To suppress this error for this test suite, insert the following line "
        -:  519:      "(in a non-header) in the namespace it is defined in:"
        -:  520:      "\n\n"
    #####:  521:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" + name + ");";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  521-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  521-block  1
call   11 never executed
    $$$$$:  521-block  2
call   12 never executed
        -:  522:
    #####:  523:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  523-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  523-block  1
call   12 never executed
    $$$$$:  523-block  2
call   13 never executed
    #####:  524:  RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  524-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  524-block  1
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  524-block  2
call   15 never executed
call   16 never executed
    $$$$$:  524-block  3
call   17 never executed
    $$$$$:  524-block  4
call   18 never executed
        -:  525:      "GoogleTestVerification", full_name.c_str(),
        -:  526:      nullptr,  // No type parameter.
        -:  527:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  528:      location.file.c_str(), location.line, [message, location] {
    #####:  529:        return new FailureTest(location, message,
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  530:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  530-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  530-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  530-block  2
call    9 never executed
call   10 never executed
    $$$$$:  530-block  3
call   11 never executed
    $$$$$:  530-block  4
call   12 never executed
    $$$$$:  530-block  5
call   13 never executed
        -:  531:      });
        -:  532:}
        -:  533:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  534:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  535:                                        CodeLocation code_location) {
    #####:  536:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  536-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  536-block  1
call   11 never executed
call   12 never executed
    $$$$$:  536-block  2
call   13 never executed
    $$$$$:  536-block  3
call   14 never executed
        -:  537:      test_suite_name, code_location);
    #####:  538:}
        -:  539:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  540:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  541:  GetUnitTestImpl()
    %%%%%:  541-block  0
call    0 never executed
    #####:  542:      ->type_parameterized_test_registry()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  543:      .RegisterInstantiation(case_name);
call    0 never executed
call    1 never executed
    #####:  544:}
        -:  545:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  546:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  547:    const char* test_suite_name, CodeLocation code_location) {
    #####:  548:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  548-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  548-block  1
call    7 never executed
    %%%%%:  548-block  2
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  548-block  3
call   12 never executed
    $$$$$:  548-block  4
call   13 never executed
    $$$$$:  548-block  5
call   14 never executed
    $$$$$:  548-block  6
call   15 never executed
    #####:  549:                 TypeParameterizedTestSuiteInfo(code_location));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  549-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  549-block  1
call   15 never executed
    $$$$$:  549-block  2
call   16 never executed
    $$$$$:  549-block  3
call   17 never executed
    $$$$$:  549-block  4
call   18 never executed
    #####:  550:}
        -:  551:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  552:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  553:        const char* test_suite_name) {
    #####:  554:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  554-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  554-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  554-block  2
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:  554-block  3
call   17 never executed
    $$$$$:  554-block  4
call   18 never executed
    $$$$$:  554-block  5
call   19 never executed
    $$$$$:  554-block  6
call   20 never executed
    #####:  555:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  556:    it->second.instantiated = true;
    %%%%%:  556-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  557:  } else {
    #####:  558:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  558-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  558-block  1
call    4 never executed
call    5 never executed
    %%%%%:  558-block  2
call    6 never executed
call    7 never executed
    $$$$$:  558-block  3
call    8 never executed
    $$$$$:  558-block  4
call    9 never executed
    #####:  559:                      << test_suite_name << "'";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  559-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  559-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:  560:  }
    #####:  561:}
        -:  562:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 13%
        1:  563:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  564:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  564-block  0
call    0 returned 1
call    1 returned 1
       1*:  565:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
        1:  565-block  0
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:  565-block  1
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  566:    if (testcase.second.instantiated) continue;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  566-block  0
    %%%%%:  566-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  566-block  2
    #####:  567:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  567-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  567-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  567-block  2
    $$$$$:  567-block  3
call   18 never executed
        -:  568:
    #####:  569:    std::string message =
    %%%%%:  569-block  0
call    0 never executed
    #####:  570:        "Type parameterized test suite " + testcase.first +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  570-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  570-block  1
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  570-block  2
call   14 never executed
    $$$$$:  570-block  3
call   15 never executed
        -:  571:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  572:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  573:        "\n\n"
        -:  574:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  575:        "part of binaries that intend to use them. (As opposed to, for "
        -:  576:        "example, being placed in a library that may be linked in to get other "
        -:  577:        "utilities.)"
        -:  578:        "\n\n"
        -:  579:        "To suppress this error for this test suite, insert the following line "
        -:  580:        "(in a non-header) in the namespace it is defined in:"
        -:  581:        "\n\n"
    #####:  582:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  582-block  0
call    4 never executed
call    5 never executed
    $$$$$:  582-block  1
call    6 never executed
    #####:  583:        testcase.first + ");";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:  583-block  0
call    8 never executed
        -:  584:
    #####:  585:    std::string full_name =
call    0 never executed
    #####:  586:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  586-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  586-block  1
call   13 never executed
    $$$$$:  586-block  2
call   14 never executed
    #####:  587:    RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  587-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  587-block  1
call   11 never executed
call   12 never executed
    $$$$$:  587-block  2
call   13 never executed
    $$$$$:  587-block  3
call   14 never executed
        -:  588:        "GoogleTestVerification", full_name.c_str(),
        -:  589:        nullptr,  // No type parameter.
        -:  590:        nullptr,  // No value parameter.
    #####:  591:        testcase.second.code_location.file.c_str(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  592:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  592-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  593:          return new FailureTest(testcase.second.code_location, message,
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  594:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  594-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  594-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  594-block  2
call    9 never executed
call   10 never executed
    $$$$$:  594-block  3
call   11 never executed
    $$$$$:  594-block  4
call   12 never executed
    $$$$$:  594-block  5
call   13 never executed
        -:  595:        });
        -:  596:  }
        1:  597:}
        -:  598:
        -:  599:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  600:static ::std::vector<std::string> g_argvs;
        -:  601:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  602:::std::vector<std::string> GetArgvs() {
        -:  603:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  604:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  605:  // ::string. This code converts it to the appropriate type.
        -:  606:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  607:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  608:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  609:  return g_argvs;
        2:  609-block  0
call    0 returned 2
        -:  610:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  611:}
        -:  612:
        -:  613:// Returns the current application's name, removing directory path if that
        -:  614:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  615:FilePath GetCurrentExecutableName() {
    #####:  616:  FilePath result;
    %%%%%:  616-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  616-block  1
call    4 never executed
    $$$$$:  616-block  2
call    5 never executed
        -:  617:
        -:  618:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
        -:  619:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -:  620:#else
    #####:  621:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%:  621-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  621-block  1
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  621-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  621-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$:  621-block  4
call   19 never executed
    $$$$$:  621-block  5
call   20 never executed
    $$$$$:  621-block  6
call   21 never executed
    $$$$$:  621-block  7
call   22 never executed
        -:  622:#endif  // GTEST_OS_WINDOWS
        -:  623:
    #####:  624:  return result.RemoveDirectoryName();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  625:}
        -:  626:
        -:  627:// Functions for processing the gtest_output flag.
        -:  628:
        -:  629:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 46%
        1:  630:std::string UnitTestOptions::GetOutputFormat() {
        2:  631:  std::string s = GTEST_FLAG_GET(output);
        1:  631-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  631-block  1
call    4 returned 1
    $$$$$:  631-block  2
call    5 never executed
        1:  632:  const char* const gtest_output_flag = s.c_str();
        1:  632-block  0
call    0 returned 1
       1*:  633:  const char* const colon = strchr(gtest_output_flag, ':');
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  633-block  0
        -:  634:  return (colon == nullptr)
        -:  635:             ? std::string(gtest_output_flag)
        -:  636:             : std::string(gtest_output_flag,
       2*:  637:                           static_cast<size_t>(colon - gtest_output_flag));
        1:  637-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  637-block  1
call    2 returned 1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    %%%%%:  637-block  2
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        1:  637-block  3
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%:  637-block  4
call   14 never executed
        1:  637-block  5
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%:  637-block  6
call   17 never executed
        1:  637-block  7
branch 18 taken 1 (fallthrough)
branch 19 taken 0
        1:  637-block  8
call   20 returned 1
        1:  637-block  9
branch 21 taken 1 (fallthrough)
branch 22 taken 0
        1:  637-block 10
call   23 returned 1
    $$$$$:  637-block 11
branch 24 never executed
branch 25 never executed
    $$$$$:  637-block 12
call   26 never executed
    $$$$$:  637-block 13
branch 27 never executed
branch 28 never executed
    $$$$$:  637-block 14
call   29 never executed
    $$$$$:  637-block 15
branch 30 never executed
branch 31 never executed
    $$$$$:  637-block 16
call   32 never executed
    $$$$$:  637-block 17
branch 33 never executed
branch 34 never executed
    $$$$$:  637-block 18
call   35 never executed
        -:  638:}
        -:  639:
        -:  640:// Returns the name of the requested output file, or the default if none
        -:  641:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  642:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  643:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  643-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$:  643-block  1
call    5 never executed
    #####:  644:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  644-block  0
call    0 never executed
        -:  645:
    #####:  646:  std::string format = GetOutputFormat();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  646-block  0
call    4 never executed
    $$$$$:  646-block  1
call    5 never executed
    #####:  647:  if (format.empty())
    %%%%%:  647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  648:    format = std::string(kDefaultOutputFormat);
    %%%%%:  648-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  648-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  648-block  2
call   12 never executed
    $$$$$:  648-block  3
call   13 never executed
        -:  649:
    #####:  650:  const char* const colon = strchr(gtest_output_flag, ':');
    %%%%%:  650-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  650-block  1
    #####:  651:  if (colon == nullptr)
    %%%%%:  651-block  0
branch  0 never executed
branch  1 never executed
    #####:  652:    return internal::FilePath::MakeFileName(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  652-block  0
call    4 never executed
call    5 never executed
    $$$$$:  652-block  1
call    6 never executed
    $$$$$:  652-block  2
call    7 never executed
    #####:  653:        internal::FilePath(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  653-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  653-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$:  653-block  2
call   19 never executed
    $$$$$:  653-block  3
call   20 never executed
    $$$$$:  653-block  4
call   21 never executed
    $$$$$:  653-block  5
call   22 never executed
    $$$$$:  653-block  6
call   23 never executed
    $$$$$:  653-block  7
call   24 never executed
    #####:  654:            UnitTest::GetInstance()->original_working_dir()),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  654-block  0
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  655:        internal::FilePath(kDefaultOutputFile), 0,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  655-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  655-block  1
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$:  655-block  2
call   18 never executed
    $$$$$:  655-block  3
call   19 never executed
    $$$$$:  655-block  4
call   20 never executed
    $$$$$:  655-block  5
call   21 never executed
    $$$$$:  655-block  6
call   22 never executed
    $$$$$:  655-block  7
call   23 never executed
    #####:  656:        format.c_str()).string();
    %%%%%:  656-block  0
call    0 never executed
    %%%%%:  656-block  1
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  657:
    #####:  658:  internal::FilePath output_name(colon + 1);
    %%%%%:  658-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  658-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    %%%%%:  658-block  2
call   14 never executed
    $$$$$:  658-block  3
call   15 never executed
    $$$$$:  658-block  4
call   16 never executed
    $$$$$:  658-block  5
call   17 never executed
    #####:  659:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  660:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  660-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  660-block  1
call    4 never executed
    %%%%%:  660-block  2
call    5 never executed
call    6 never executed
    $$$$$:  660-block  3
call    7 never executed
    $$$$$:  660-block  4
call    8 never executed
    #####:  661:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  661-block  0
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  661-block  1
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  661-block  2
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$:  661-block  3
call   25 never executed
    $$$$$:  661-block  4
call   26 never executed
    $$$$$:  661-block  5
call   27 never executed
    $$$$$:  661-block  6
call   28 never executed
    $$$$$:  661-block  7
call   29 never executed
    $$$$$:  661-block  8
call   30 never executed
    #####:  662:        internal::FilePath(colon + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  662-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  662-block  1
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    $$$$$:  662-block  2
call   22 never executed
    $$$$$:  662-block  3
call   23 never executed
    $$$$$:  662-block  4
call   24 never executed
    $$$$$:  662-block  5
call   25 never executed
    $$$$$:  662-block  6
call   26 never executed
    $$$$$:  662-block  7
call   27 never executed
        -:  663:
    #####:  664:  if (!output_name.IsDirectory())
    %%%%%:  664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  665:    return output_name.string();
    %%%%%:  665-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  666:
    #####:  667:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    %%%%%:  667-block  0
call    0 never executed
    #####:  668:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  668-block  0
call    4 never executed
call    5 never executed
    $$$$$:  668-block  1
call    6 never executed
    #####:  669:      GetOutputFormat().c_str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  669-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%:  669-block  1
call   10 never executed
    $$$$$:  669-block  2
call   11 never executed
    $$$$$:  669-block  3
call   12 never executed
    #####:  670:  return result.string();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  671:}
        -:  672:
        -:  673:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  674:// pattern consists of regular characters, single-character wildcards (?), and
        -:  675:// multi-character wildcards (*).
        -:  676://
        -:  677:// This function implements a linear-time string globbing algorithm based on
        -:  678:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 44 returned 100% blocks executed 77%
       44:  679:static bool PatternMatchesString(const std::string& name_str,
        -:  680:                                 const char* pattern, const char* pattern_end) {
       44:  681:  const char* name = name_str.c_str();
       44:  681-block  0
call    0 returned 44
call    1 returned 44
       44:  682:  const char* const name_begin = name;
       44:  683:  const char* const name_end = name + name_str.size();
call    0 returned 44
call    1 returned 44
call    2 returned 44
        -:  684:
       44:  685:  const char* pattern_next = pattern;
       44:  686:  const char* name_next = name;
        -:  687:
      813:  688:  while (pattern < pattern_end || name < name_end) {
      813:  688-block  0
branch  0 taken 194 (fallthrough)
branch  1 taken 619
      194:  688-block  1
branch  2 taken 187 (fallthrough)
branch  3 taken 7
      769:  688-block  2
      806:  689:    if (pattern < pattern_end) {
      806:  689-block  0
branch  0 taken 619 (fallthrough)
branch  1 taken 187
      619:  690:      switch (*pattern) {
      619:  690-block  0
call    0 returned 619
branch  1 taken 223
branch  2 taken 0
branch  3 taken 396
      223:  691:        default:  // Match an ordinary character.
     223*:  692:          if (name < name_end && *name == *pattern) {
      223:  692-block  0
branch  0 taken 207 (fallthrough)
branch  1 taken 16
      207:  692-block  1
call    2 returned 207
call    3 returned 207
branch  4 taken 0 (fallthrough)
branch  5 taken 207
    #####:  693:            ++pattern;
    %%%%%:  693-block  0
call    0 never executed
    #####:  694:            ++name;
call    0 never executed
    #####:  695:            continue;
        -:  696:          }
      223:  697:          break;
      223:  697-block  0
    #####:  698:        case '?':  // Match any single character.
    #####:  699:          if (name < name_end) {
    %%%%%:  699-block  0
branch  0 never executed
branch  1 never executed
    #####:  700:            ++pattern;
    %%%%%:  700-block  0
call    0 never executed
    #####:  701:            ++name;
call    0 never executed
    #####:  702:            continue;
        -:  703:          }
    #####:  704:          break;
    %%%%%:  704-block  0
      396:  705:        case '*':
        -:  706:          // Match zero or more characters. Start by skipping over the wildcard
        -:  707:          // and matching zero characters from name. If that fails, restart and
        -:  708:          // match one more character than the last attempt.
      396:  709:          pattern_next = pattern;
      396:  710:          name_next = name + 1;
      396:  710-block  0
call    0 returned 396
      396:  711:          ++pattern;
call    0 returned 396
      396:  712:          continue;
        -:  713:      }
        -:  714:    }
        -:  715:    // Failed to match a character. Restart if possible.
      410:  716:    if (name_begin < name_next && name_next <= name_end) {
      410:  716-block  0
branch  0 taken 389 (fallthrough)
branch  1 taken 21
      389:  716-block  1
branch  2 taken 373 (fallthrough)
branch  3 taken 16
      373:  717:      pattern = pattern_next;
      373:  718:      name = name_next;
      373:  719:      continue;
      373:  719-block  0
        -:  720:    }
       37:  721:    return false;
       37:  721-block  0
        -:  722:  }
        7:  723:  return true;
        7:  723-block  0
        -:  724:}
        -:  725:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 29 returned 100% blocks executed 88%
       29:  726:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  727:                                    const char* filter) {
        -:  728:  // The filter is a list of patterns separated by colons (:).
       29:  729:  const char* pattern = filter;
       29:  729-block  0
        -:  730:  while (true) {
        -:  731:    // Find the bounds of this pattern.
      44*:  732:    const char* const next_sep = strchr(pattern, ':');
       44:  732-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 44
    %%%%%:  732-block  1
       44:  733:    const char* const pattern_end =
      44*:  734:        next_sep != nullptr ? next_sep : pattern + strlen(pattern);
       44:  734-block  0
branch  0 taken 29 (fallthrough)
branch  1 taken 15
       29:  734-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 29
    %%%%%:  734-block  2
       29:  734-block  3
call    4 returned 29
       15:  734-block  4
        -:  735:
        -:  736:    // Check if this pattern matches name_str.
       44:  737:    if (PatternMatchesString(name_str, pattern, pattern_end)) {
       44:  737-block  0
call    0 returned 44
branch  1 taken 7 (fallthrough)
branch  2 taken 37
        7:  738:      return true;
        7:  738-block  0
        -:  739:    }
        -:  740:
        -:  741:    // Give up on this pattern. However, if we found a pattern separator (:),
        -:  742:    // advance to the next pattern (skipping over the separator) and restart.
       37:  743:    if (next_sep == nullptr) {
       37:  743-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 15
       22:  744:      return false;
       22:  744-block  0
        -:  745:    }
       15:  746:    pattern = next_sep + 1;
       15:  746-block  0
call    0 returned 15
       15:  747:  }
        -:  748:  return true;
        -:  749:}
        -:  750:
        -:  751:// Returns true if and only if the user-specified filter matches the test
        -:  752:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 7 returned 100% blocks executed 44%
        7:  753:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  754:                                        const std::string& test_name) {
       14:  755:  const std::string& full_name = test_suite_name + "." + test_name.c_str();
        7:  755-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
branch  6 taken 7 (fallthrough)
branch  7 taken 0 (throw)
        7:  755-block  1
call    8 returned 7
call    9 returned 7
branch 10 taken 7 (fallthrough)
branch 11 taken 0 (throw)
        7:  755-block  2
call   12 returned 7
call   13 returned 7
call   14 returned 7
    $$$$$:  755-block  3
call   15 never executed
    $$$$$:  755-block  4
call   16 never executed
    $$$$$:  755-block  5
call   17 never executed
        -:  756:
        -:  757:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  758:  // positive filter and negative filter portions
       14:  759:  std::string str = GTEST_FLAG_GET(filter);
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 7
    $$$$$:  759-block  0
call    5 never executed
        7:  760:  const char* const p = str.c_str();
        7:  760-block  0
call    0 returned 7
       7*:  761:  const char* const dash = strchr(p, '-');
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%:  761-block  0
       14:  762:  std::string positive;
        7:  762-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
    $$$$$:  762-block  1
call    3 never executed
        7:  763:  std::string negative;
call    0 returned 7
call    1 returned 7
    $$$$$:  763-block  0
call    2 never executed
        7:  764:  if (dash == nullptr) {
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  765:    positive = str.c_str();  // Whole string is a positive filter
        7:  765-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:  766:    negative = "";
        7:  766-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:  767:  } else {
    #####:  768:    positive = std::string(p, dash);   // Everything up to the dash
    %%%%%:  768-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  768-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  768-block  2
call   12 never executed
    $$$$$:  768-block  3
call   13 never executed
    #####:  769:    negative = std::string(dash + 1);  // Everything after the dash
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  769-block  0
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  769-block  1
call   13 never executed
    $$$$$:  769-block  2
call   14 never executed
    #####:  770:    if (positive.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  771:      // Treat '-test1' as the same as '*-test1'
    #####:  772:      positive = kUniversalFilter;
    %%%%%:  772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  773:    }
        -:  774:  }
        -:  775:
        -:  776:  // A filter is a colon-separated list of patterns.  It matches a
        -:  777:  // test if any pattern in it matches the test.
      14*:  778:  return (MatchesFilter(full_name, positive.c_str()) &&
        7:  778-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7:  778-block  1
    %%%%%:  778-block  2
       21:  779:          !MatchesFilter(full_name, negative.c_str()));
        7:  779-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7:  779-block  1
call    4 returned 7
        -:  780:}
        -:  781:
        -:  782:#if GTEST_HAS_SEH
        -:  783:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  784:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  785:// This function is useful as an __except condition.
        -:  786:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  787:  // Google Test should handle a SEH exception if:
        -:  788:  //   1. the user wants it to, AND
        -:  789:  //   2. this is not a breakpoint exception, AND
        -:  790:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  791:  //      apparently).
        -:  792:  //
        -:  793:  // SEH exception code for C++ exceptions.
        -:  794:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  795:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  796:
        -:  797:  bool should_handle = true;
        -:  798:
        -:  799:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  800:    should_handle = false;
        -:  801:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  802:    should_handle = false;
        -:  803:  else if (exception_code == kCxxExceptionCode)
        -:  804:    should_handle = false;
        -:  805:
        -:  806:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  807:}
        -:  808:#endif  // GTEST_HAS_SEH
        -:  809:
        -:  810:}  // namespace internal
        -:  811:
        -:  812:// The c'tor sets this object as the test part result reporter used by
        -:  813:// Google Test.  The 'result' parameter specifies where to report the
        -:  814:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  815:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  816:    TestPartResultArray* result)
    %%%%%:  816-block  0
call    0 never executed
call    1 never executed
        -:  817:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),
    #####:  818:      result_(result) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  818-block  0
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####:  819:  Init();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  820:}
    %%%%%:  820-block  0
        -:  821:
        -:  822:// The c'tor sets this object as the test part result reporter used by
        -:  823:// Google Test.  The 'result' parameter specifies where to report the
        -:  824:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  825:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  826:    InterceptMode intercept_mode, TestPartResultArray* result)
    %%%%%:  826-block  0
call    0 never executed
call    1 never executed
        -:  827:    : intercept_mode_(intercept_mode),
    #####:  828:      result_(result) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  828-block  0
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####:  829:  Init();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  830:}
    %%%%%:  830-block  0
        -:  831:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  832:void ScopedFakeTestPartResultReporter::Init() {
    #####:  833:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  833-block  0
call    0 never executed
    #####:  834:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  834-block  0
    %%%%%:  834-block  1
branch  5 never executed
branch  6 never executed
    #####:  835:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  835-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  836:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  837:  } else {
    #####:  838:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  838-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  839:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  840:  }
    #####:  841:}
        -:  842:
        -:  843:// The d'tor restores the test part result reporter used by Google Test
        -:  844:// before.
    #####:  845:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  846:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  847:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  848:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  849:  } else {
    #####:  850:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  851:  }
    #####:  852:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  845:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  846:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  847:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  848:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  849:  } else {
        -:  850:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  851:  }
    #####:  852:}
    %%%%%:  852-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  845:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%:  845-block  0
call    0 never executed
call    1 never executed
    %%%%%:  845-block  1
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  846:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
call    0 never executed
    #####:  847:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  847-block  0
    %%%%%:  847-block  1
branch  5 never executed
branch  6 never executed
    #####:  848:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  848-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  849:  } else {
    #####:  850:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  850-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  851:  }
    #####:  852:}
------------------
        -:  853:
        -:  854:// Increments the test part result count and remembers the result.
        -:  855:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  856:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  857:    const TestPartResult& result) {
    #####:  858:  result_->Append(result);
    %%%%%:  858-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  859:}
        -:  860:
        -:  861:namespace internal {
        -:  862:
        -:  863:// Returns the type ID of ::testing::Test.  We should always call this
        -:  864:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  865:// testing::Test.  This is to work around a suspected linker bug when
        -:  866:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  867:// GetTypeId< ::testing::Test>() to return different values depending
        -:  868:// on whether the call is from the Google Test framework itself or
        -:  869:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  870:// return the same value, as it always calls GetTypeId<>() from the
        -:  871:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 1 returned 100% blocks executed 100%
        1:  872:TypeId GetTestTypeId() {
        1:  873:  return GetTypeId<Test>();
        1:  873-block  0
call    0 returned 1
        -:  874:}
        -:  875:
        -:  876:// The value of GetTestTypeId() as seen from within the Google Test
        -:  877:// library.  This is solely for testing GetTestTypeId().
        -:  878:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  879:
        -:  880:// This predicate-formatter checks that 'results' contains a test part
        -:  881:// failure of the given type and that the failure message contains the
        -:  882:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  883:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  884:                                     const char* /* type_expr */,
        -:  885:                                     const char* /* substr_expr */,
        -:  886:                                     const TestPartResultArray& results,
        -:  887:                                     TestPartResult::Type type,
        -:  888:                                     const std::string& substr) {
    #####:  889:  const std::string expected(type == TestPartResult::kFatalFailure ?
    %%%%%:  889-block  0
call    0 never executed
        -:  890:                        "1 fatal failure" :
    #####:  891:                        "1 non-fatal failure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  891-block  0
    %%%%%:  891-block  1
    %%%%%:  891-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  891-block  3
call    9 never executed
    $$$$$:  891-block  4
call   10 never executed
    #####:  892:  Message msg;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  892-block  0
call    4 never executed
    $$$$$:  892-block  1
call    5 never executed
    #####:  893:  if (results.size() != 1) {
    %%%%%:  893-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  894:    msg << "Expected: " << expected << "\n"
    %%%%%:  894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  894-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  894-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####:  895:        << "  Actual: " << results.size() << " failures";
    %%%%%:  895-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  895-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  895-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  895-block  3
call   16 never executed
    $$$$$:  895-block  4
call   17 never executed
    #####:  896:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  896-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  896-block  1
    #####:  897:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  897-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  897-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:  898:    }
    #####:  899:    return AssertionFailure() << msg;
    %%%%%:  899-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  899-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  899-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  899-block  3
call   12 never executed
call   13 never executed
    $$$$$:  899-block  4
call   14 never executed
    $$$$$:  899-block  5
call   15 never executed
        -:  900:  }
        -:  901:
    #####:  902:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  902-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  903:  if (r.type() != type) {
    %%%%%:  903-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  904:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  904-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  904-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  904-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  904-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  904-block  4
call   16 never executed
call   17 never executed
    $$$$$:  904-block  5
call   18 never executed
    $$$$$:  904-block  6
call   19 never executed
    #####:  905:                              << "  Actual:\n"
    %%%%%:  905-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  906:                              << r;
    %%%%%:  906-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  906-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  907:  }
        -:  908:
    #####:  909:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  909-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  909-block  1
    %%%%%:  909-block  2
branch  6 never executed
branch  7 never executed
    %%%%%:  909-block  3
    %%%%%:  909-block  4
branch  8 never executed
branch  9 never executed
    #####:  910:    return AssertionFailure() << "Expected: " << expected << " containing \""
    %%%%%:  910-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  910-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  910-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  910-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  910-block  4
call   16 never executed
call   17 never executed
    $$$$$:  910-block  5
call   18 never executed
    $$$$$:  910-block  6
call   19 never executed
    #####:  911:                              << substr << "\"\n"
    %%%%%:  911-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  911-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  912:                              << "  Actual:\n"
    %%%%%:  912-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  913:                              << r;
    %%%%%:  913-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  913-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  914:  }
        -:  915:
    #####:  916:  return AssertionSuccess();
    %%%%%:  916-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  917:}
        -:  918:
        -:  919:// The constructor of SingleFailureChecker remembers where to look up
        -:  920:// test part results, what type of failure we expect, and what
        -:  921:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  922:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  923:                                           TestPartResult::Type type,
    #####:  924:                                           const std::string& substr)
    %%%%%:  924-block  0
call    0 never executed
    #####:  925:    : results_(results), type_(type), substr_(substr) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  926:
        -:  927:// The destructor of SingleFailureChecker verifies that the given
        -:  928:// TestPartResultArray contains exactly one failure that has the given
        -:  929:// type and contains the given substring.  If that's not the case, a
        -:  930:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  931:SingleFailureChecker::~SingleFailureChecker() {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  932:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  932-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  932-block  1
    %%%%%:  932-block  2
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  932-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    %%%%%:  932-block  4
call   28 never executed
    #####:  933:}
        -:  934:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  935:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  936:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  936-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        -:  937:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  938:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  939:    const TestPartResult& result) {
    #####:  940:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  940-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  941:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
    #####:  942:}
        -:  943:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  944:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  945:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  945-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        -:  946:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  947:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -:  948:    const TestPartResult& result) {
    #####:  949:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%:  949-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####:  950:}
        -:  951:
        -:  952:// Returns the global test part result reporter.
        -:  953:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####:  954:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####:  955:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  955-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  956:  return global_test_part_result_repoter_;
    %%%%%:  956-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  957:}
        -:  958:
        -:  959:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  960:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -:  961:    TestPartResultReporterInterface* reporter) {
    #####:  962:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  962-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  963:  global_test_part_result_repoter_ = reporter;
    %%%%%:  963-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  964:}
        -:  965:
        -:  966:// Returns the test part result reporter for the current thread.
        -:  967:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####:  968:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####:  969:  return per_thread_test_part_result_reporter_.get();
    %%%%%:  969-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  970:}
        -:  971:
        -:  972:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  973:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -:  974:    TestPartResultReporterInterface* reporter) {
    #####:  975:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%:  975-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  976:}
        -:  977:
        -:  978:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####:  979:int UnitTestImpl::successful_test_suite_count() const {
    #####:  980:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%:  980-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  981:}
        -:  982:
        -:  983:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2:  984:int UnitTestImpl::failed_test_suite_count() const {
        2:  985:  return CountIf(test_suites_, TestSuiteFailed);
        2:  985-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
        -:  986:}
        -:  987:
        -:  988:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 2 returned 100% blocks executed 100%
        2:  989:int UnitTestImpl::total_test_suite_count() const {
        2:  990:  return static_cast<int>(test_suites_.size());
        2:  990-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
        -:  991:}
        -:  992:
        -:  993:// Gets the number of all test suites that contain at least one test
        -:  994:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2:  995:int UnitTestImpl::test_suite_to_run_count() const {
        2:  996:  return CountIf(test_suites_, ShouldRunTestSuite);
        2:  996-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
        -:  997:}
        -:  998:
        -:  999:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1000:int UnitTestImpl::successful_test_count() const {
        1: 1001:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1001-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        -: 1002:}
        -: 1003:
        -: 1004:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1005:int UnitTestImpl::skipped_test_count() const {
        1: 1006:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1006-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        -: 1007:}
        -: 1008:
        -: 1009:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1010:int UnitTestImpl::failed_test_count() const {
    #####: 1011:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1011-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1012:}
        -: 1013:
        -: 1014:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1015:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1016:  return SumOverTestSuiteList(test_suites_,
        1: 1016-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        1: 1017:                              &TestSuite::reportable_disabled_test_count);
        -: 1018:}
        -: 1019:
        -: 1020:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1021:int UnitTestImpl::disabled_test_count() const {
    #####: 1022:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1022-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1023:}
        -: 1024:
        -: 1025:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1026:int UnitTestImpl::reportable_test_count() const {
    #####: 1027:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1027-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1028:}
        -: 1029:
        -: 1030:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1031:int UnitTestImpl::total_test_count() const {
    #####: 1032:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1032-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1033:}
        -: 1034:
        -: 1035:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1036:int UnitTestImpl::test_to_run_count() const {
        2: 1037:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1037-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
        -: 1038:}
        -: 1039:
        -: 1040:// Returns the current OS stack trace as an std::string.
        -: 1041://
        -: 1042:// The maximum number of stack frames to be included is specified by
        -: 1043:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1044:// specifies the number of top frames to be skipped, which doesn't
        -: 1045:// count against the number of frames to be included.
        -: 1046://
        -: 1047:// For example, if Foo() calls Bar(), which in turn calls
        -: 1048:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1049:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1050:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1051:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1051-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1052:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1053:      // Skips the user-specified number of frames plus this function
        -: 1054:      // itself.
    #####: 1055:  );  // NOLINT
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 1056:}
        -: 1057:
        -: 1058:// A helper class for measuring elapsed times.
        -: 1059:class Timer {
        -: 1060: public:
function _ZN7testing8internal5TimerC2Ev called 9 returned 100% blocks executed 100%
        9: 1061:  Timer() : start_(std::chrono::steady_clock::now()) {}
        9: 1061-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
        -: 1062:
        -: 1063:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 9 returned 100% blocks executed 85%
        9: 1064:  TimeInMillis Elapsed() {
        9: 1065:    return std::chrono::duration_cast<std::chrono::milliseconds>(
call    0 returned 9
       18: 1066:               std::chrono::steady_clock::now() - start_)
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
call    4 returned 9
call    5 returned 9
call    6 returned 9
branch  7 taken 9 (fallthrough)
branch  8 taken 0 (throw)
        9: 1066-block  0
call    9 returned 9
call   10 returned 9
branch 11 taken 9 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 9
call   14 returned 9
    $$$$$: 1066-block  1
call   15 never executed
    $$$$$: 1066-block  2
call   16 never executed
       27: 1067:        .count();
        9: 1067-block  0
call    0 returned 9
        9: 1067-block  1
call    1 returned 9
call    2 returned 9
        -: 1068:  }
        -: 1069:
        -: 1070: private:
        -: 1071:  std::chrono::steady_clock::time_point start_;
        -: 1072:};
        -: 1073:
        -: 1074:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1075:// around subject to adjustments by the system, to measure elapsed time use
        -: 1076:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 9 returned 100% blocks executed 79%
        9: 1077:TimeInMillis GetTimeInMillis() {
        9: 1078:  return std::chrono::duration_cast<std::chrono::milliseconds>(
call    0 returned 9
       36: 1079:             std::chrono::system_clock::now() -
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
        9: 1079-block  0
call    4 returned 9
call    5 returned 9
call    6 returned 9
    $$$$$: 1079-block  1
call    7 never executed
    $$$$$: 1079-block  2
call    8 never executed
       36: 1080:             std::chrono::system_clock::from_time_t(0))
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
branch  4 taken 9 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 9
branch  7 taken 9 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 9
    $$$$$: 1080-block  0
call   10 never executed
       27: 1081:      .count();
        9: 1081-block  0
call    0 returned 9
        9: 1081-block  1
call    1 returned 9
call    2 returned 9
        -: 1082:}
        -: 1083:
        -: 1084:// Utilities
        -: 1085:
        -: 1086:// class String.
        -: 1087:
        -: 1088:#if GTEST_OS_WINDOWS_MOBILE
        -: 1089:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1090:// memory using new. The caller is responsible for deleting the return
        -: 1091:// value using delete[]. Returns the wide string, or NULL if the
        -: 1092:// input is NULL.
        -: 1093:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1094:  if (!ansi) return nullptr;
        -: 1095:  const int length = strlen(ansi);
        -: 1096:  const int unicode_length =
        -: 1097:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1098:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1099:  MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -: 1100:                      unicode, unicode_length);
        -: 1101:  unicode[unicode_length] = 0;
        -: 1102:  return unicode;
        -: 1103:}
        -: 1104:
        -: 1105:// Creates an ANSI string from the given wide string, allocating
        -: 1106:// memory using new. The caller is responsible for deleting the return
        -: 1107:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1108:// input is NULL.
        -: 1109:const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {
        -: 1110:  if (!utf16_str) return nullptr;
        -: 1111:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1112:                                              0, nullptr, nullptr);
        -: 1113:  char* ansi = new char[ansi_length + 1];
        -: 1114:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1115:                      nullptr);
        -: 1116:  ansi[ansi_length] = 0;
        -: 1117:  return ansi;
        -: 1118:}
        -: 1119:
        -: 1120:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1121:
        -: 1122:// Compares two C strings.  Returns true if and only if they have the same
        -: 1123:// content.
        -: 1124://
        -: 1125:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1126:// C string is considered different to any non-NULL C string,
        -: 1127:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 60%
        2: 1128:bool String::CStringEquals(const char * lhs, const char * rhs) {
       2*: 1129:  if (lhs == nullptr) return rhs == nullptr;
        2: 1129-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1129-block  1
        -: 1130:
       2*: 1131:  if (rhs == nullptr) return false;
        2: 1131-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1131-block  1
        -: 1132:
       2*: 1133:  return strcmp(lhs, rhs) == 0;
        2: 1133-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1133-block  1
        2: 1133-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%: 1133-block  3
        2: 1133-block  4
        -: 1134:}
        -: 1135:
        -: 1136:#if GTEST_HAS_STD_WSTRING
        -: 1137:
        -: 1138:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1139:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1140:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1141:                                     Message* msg) {
    #####: 1142:  for (size_t i = 0; i != length; ) {  // NOLINT
    %%%%%: 1142-block  0
    %%%%%: 1142-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1142-block  2
    #####: 1143:    if (wstr[i] != L'\0') {
    %%%%%: 1143-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1144:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1144-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1144-block  1
call    8 never executed
call    9 never executed
    $$$$$: 1144-block  2
call   10 never executed
    $$$$$: 1144-block  3
call   11 never executed
    #####: 1145:      while (i != length && wstr[i] != L'\0')
    %%%%%: 1145-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1145-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1146:        i++;
    %%%%%: 1146-block  0
        -: 1147:    } else {
    #####: 1148:      *msg << '\0';
    %%%%%: 1148-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1148-block  1
call    5 never executed
    $$$$$: 1148-block  2
call    6 never executed
    #####: 1149:      i++;
        -: 1150:    }
        -: 1151:  }
    #####: 1152:}
    %%%%%: 1152-block  0
        -: 1153:
        -: 1154:#endif  // GTEST_HAS_STD_WSTRING
        -: 1155:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 1156:void SplitString(const ::std::string& str, char delimiter,
        -: 1157:                 ::std::vector< ::std::string>* dest) {
    #####: 1158:  ::std::vector< ::std::string> parsed;
    %%%%%: 1158-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 1158-block  1
call    3 never executed
    #####: 1159:  ::std::string::size_type pos = 0;
    #####: 1160:  while (::testing::internal::AlwaysTrue()) {
    %%%%%: 1160-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1160-block  1
branch  3 never executed
branch  4 never executed
    #####: 1161:    const ::std::string::size_type colon = str.find(delimiter, pos);
    %%%%%: 1161-block  0
call    0 never executed
call    1 never executed
    #####: 1162:    if (colon == ::std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 1163:      parsed.push_back(str.substr(pos));
    %%%%%: 1163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1163-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1163-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1163-block  3
call   10 never executed
    $$$$$: 1163-block  4
call   11 never executed
    #####: 1164:      break;
        -: 1165:    } else {
    #####: 1166:      parsed.push_back(str.substr(pos, colon - pos));
    %%%%%: 1166-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1166-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1166-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1166-block  3
call   10 never executed
    $$$$$: 1166-block  4
call   11 never executed
    #####: 1167:      pos = colon + 1;
        -: 1168:    }
        -: 1169:  }
    #####: 1170:  dest->swap(parsed);
    %%%%%: 1170-block  0
call    0 never executed
call    1 never executed
    #####: 1171:}
        -: 1172:
        -: 1173:}  // namespace internal
        -: 1174:
        -: 1175:// Constructs an empty Message.
        -: 1176:// We allocate the stringstream separately because otherwise each use of
        -: 1177:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1178:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1179:// the stack space.
function _ZN7testing7MessageC2Ev called 63 returned 100% blocks executed 75%
       63: 1180:Message::Message() : ss_(new ::std::stringstream) {
       63: 1180-block  0
call    0 returned 63
call    1 returned 63
call    2 returned 63
call    3 returned 63
call    4 returned 63
call    5 returned 63
branch  6 taken 63 (fallthrough)
branch  7 taken 0 (throw)
       63: 1180-block  1
call    8 returned 63
    $$$$$: 1180-block  2
call    9 never executed
    $$$$$: 1180-block  3
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 1181:  // By default, we want there to be enough precision when printing
        -: 1182:  // a double to a Message.
       63: 1183:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 63
call    1 returned 63
call    2 returned 63
call    3 returned 63
call    4 returned 63
call    5 returned 63
call    6 returned 63
call    7 returned 63
call    8 returned 63
branch  9 taken 63 (fallthrough)
branch 10 taken 0 (throw)
       63: 1184:}
       63: 1184-block  0
        -: 1185:
        -: 1186:// These two overloads allow streaming a wide C string to a Message
        -: 1187:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1188:Message& Message::operator <<(const wchar_t* wide_c_str) {
    #####: 1189:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1189-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1189-block  1
call    7 never executed
call    8 never executed
    $$$$$: 1189-block  2
call    9 never executed
    $$$$$: 1189-block  3
call   10 never executed
        -: 1190:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1191:Message& Message::operator <<(wchar_t* wide_c_str) {
    #####: 1192:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1192-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1192-block  1
call    7 never executed
call    8 never executed
    $$$$$: 1192-block  2
call    9 never executed
    $$$$$: 1192-block  3
call   10 never executed
        -: 1193:}
        -: 1194:
        -: 1195:#if GTEST_HAS_STD_WSTRING
        -: 1196:// Converts the given wide string to a narrow string using the UTF-8
        -: 1197:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1198:Message& Message::operator <<(const ::std::wstring& wstr) {
    #####: 1199:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1199-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 1200:  return *this;
call    0 never executed
        -: 1201:}
        -: 1202:#endif  // GTEST_HAS_STD_WSTRING
        -: 1203:
        -: 1204:// Gets the text streamed to this object so far as an std::string.
        -: 1205:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 63 returned 100% blocks executed 100%
       63: 1206:std::string Message::GetString() const {
       63: 1207:  return internal::StringStreamToString(ss_.get());
       63: 1207-block  0
call    0 returned 63
call    1 returned 63
call    2 returned 63
call    3 returned 63
call    4 returned 63
call    5 returned 63
        -: 1208:}
        -: 1209:
        -: 1210:// AssertionResult constructors.
        -: 1211:// Used in EXPECT_TRUE/FALSE(assertion_result).
function _ZN7testing15AssertionResultC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 1212:AssertionResult::AssertionResult(const AssertionResult& other)
    %%%%%: 1212-block  0
call    0 never executed
    #####: 1213:    : success_(other.success_),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1213-block  0
    #####: 1214:      message_(other.message_.get() != nullptr
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1215:                   ? new ::std::string(*other.message_)
    %%%%%: 1215-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1215-block  1
call   10 never executed
    #####: 1216:                   : static_cast< ::std::string*>(nullptr)) {}
    %%%%%: 1216-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    %%%%%: 1216-block  1
    %%%%%: 1216-block  2
    %%%%%: 1216-block  3
call    8 never executed
        -: 1217:
        -: 1218:// Swaps two AssertionResults.
function _ZN7testing15AssertionResult4swapERS0_ called 0 returned 0% blocks executed 0%
    #####: 1219:void AssertionResult::swap(AssertionResult& other) {
        -: 1220:  using std::swap;
    #####: 1221:  swap(success_, other.success_);
    %%%%%: 1221-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 1222:  swap(message_, other.message_);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1223:}
        -: 1224:
        -: 1225:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
function _ZNK7testing15AssertionResultntEv called 0 returned 0% blocks executed 0%
    #####: 1226:AssertionResult AssertionResult::operator!() const {
    #####: 1227:  AssertionResult negation(!success_);
    %%%%%: 1227-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1227-block  1
    %%%%%: 1227-block  2
call    4 never executed
call    5 never executed
    #####: 1228:  if (message_.get() != nullptr) negation << *message_;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1228-block  0
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1229:  return negation;
    %%%%%: 1229-block  0
    %%%%%: 1229-block  1
        -: 1230:}
        -: 1231:
        -: 1232:// Makes a successful assertion result.
function _ZN7testing16AssertionSuccessEv called 21 returned 100% blocks executed 100%
       21: 1233:AssertionResult AssertionSuccess() {
       21: 1234:  return AssertionResult(true);
       21: 1234-block  0
call    0 returned 21
call    1 returned 21
call    2 returned 21
        -: 1235:}
        -: 1236:
        -: 1237:// Makes a failed assertion result.
function _ZN7testing16AssertionFailureEv called 0 returned 0% blocks executed 0%
    #####: 1238:AssertionResult AssertionFailure() {
    #####: 1239:  return AssertionResult(false);
    %%%%%: 1239-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1240:}
        -: 1241:
        -: 1242:// Makes a failed assertion result with the given failure message.
        -: 1243:// Deprecated; use AssertionFailure() << message.
function _ZN7testing16AssertionFailureERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1244:AssertionResult AssertionFailure(const Message& message) {
    #####: 1245:  return AssertionFailure() << message;
    %%%%%: 1245-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1245-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1245-block  2
call   10 never executed
call   11 never executed
    $$$$$: 1245-block  3
call   12 never executed
    $$$$$: 1245-block  4
call   13 never executed
        -: 1246:}
        -: 1247:
        -: 1248:namespace internal {
        -: 1249:
        -: 1250:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 1251:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1252:                                            const std::vector<size_t>& right) {
    #####: 1253:  std::vector<std::vector<double> > costs(
    %%%%%: 1253-block  0
call    0 never executed
    #####: 1254:      left.size() + 1, std::vector<double>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1254-block  0
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 1254-block  1
call   20 never executed
    $$$$$: 1254-block  2
call   21 never executed
    $$$$$: 1254-block  3
call   22 never executed
    $$$$$: 1254-block  4
call   23 never executed
    #####: 1255:  std::vector<std::vector<EditType> > best_move(
call    0 never executed
    #####: 1256:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1256-block  0
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    %%%%%: 1256-block  1
call   19 never executed
    $$$$$: 1256-block  2
call   20 never executed
    $$$$$: 1256-block  3
call   21 never executed
    $$$$$: 1256-block  4
call   22 never executed
    $$$$$: 1256-block  5
call   23 never executed
        -: 1257:
        -: 1258:  // Populate for empty right.
    #####: 1259:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1260:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1260-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1261:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1262:  }
        -: 1263:  // Populate for empty left.
    #####: 1264:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1264-block  0
    %%%%%: 1264-block  1
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1265:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1265-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1266:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1267:  }
        -: 1268:
    #####: 1269:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1269-block  0
    %%%%%: 1269-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1269-block  2
    #####: 1270:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1270-block  0
    %%%%%: 1270-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1270-block  2
    #####: 1271:      if (left[l_i] == right[r_i]) {
    %%%%%: 1271-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1272:        // Found a match. Consume it.
    #####: 1273:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1273-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1274:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1275:        continue;
        -: 1276:      }
        -: 1277:
    #####: 1278:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1278-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1279:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1280:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1281:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1281-block  0
branch  2 never executed
branch  3 never executed
    #####: 1282:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1282-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1283:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1284:      } else if (remove < add && remove < replace) {
    %%%%%: 1284-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1284-block  1
branch  2 never executed
branch  3 never executed
    #####: 1285:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1285-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1286:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1287:      } else {
        -: 1288:        // We make replace a little more expensive than add/remove to lower
        -: 1289:        // their priority.
    #####: 1290:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1290-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1291:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1292:      }
        -: 1293:    }
        -: 1294:  }
        -: 1295:
        -: 1296:  // Reconstruct the best path. We do it in reverse order.
    #####: 1297:  std::vector<EditType> best_path;
    %%%%%: 1297-block  0
call    0 never executed
    #####: 1298:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    %%%%%: 1298-block  0
branch  4 never executed
branch  5 never executed
    %%%%%: 1298-block  1
branch  6 never executed
branch  7 never executed
    #####: 1299:    EditType move = best_move[l_i][r_i];
    %%%%%: 1299-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1299-block  1
    #####: 1300:    best_path.push_back(move);
    %%%%%: 1300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1301:    l_i -= move != kAdd;
    %%%%%: 1301-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1301-block  1
    #####: 1302:    r_i -= move != kRemove;
    %%%%%: 1302-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1302-block  1
    %%%%%: 1302-block  2
call    2 never executed
        -: 1303:  }
    #####: 1304:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1304-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1305:  return best_path;
    %%%%%: 1305-block  0
        -: 1306:}
        -: 1307:
        -: 1308:namespace {
        -: 1309:
        -: 1310:// Helper class to convert string into ids with deduplication.
        -: 1311:class InternalStrings {
        -: 1312: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1313:  size_t GetId(const std::string& str) {
    #####: 1314:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1314-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1315:    if (it != ids_.end()) return it->second;
    %%%%%: 1315-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1315-block  1
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1316:    size_t id = ids_.size();
    %%%%%: 1316-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1317:    return ids_[str] = id;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1317-block  0
call    6 never executed
call    7 never executed
        -: 1318:  }
        -: 1319:
        -: 1320: private:
        -: 1321:  typedef std::map<std::string, size_t> IdMap;
        -: 1322:  IdMap ids_;
        -: 1323:};
        -: 1324:
        -: 1325:}  // namespace
        -: 1326:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1327:std::vector<EditType> CalculateOptimalEdits(
        -: 1328:    const std::vector<std::string>& left,
        -: 1329:    const std::vector<std::string>& right) {
    #####: 1330:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1330-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    %%%%%: 1330-block  1
call    4 never executed
call    5 never executed
    $$$$$: 1330-block  2
call    6 never executed
    $$$$$: 1330-block  3
call    7 never executed
        -: 1331:  {
    #####: 1332:    InternalStrings intern_table;
call    0 never executed
call    1 never executed
    %%%%%: 1332-block  0
call    2 never executed
    $$$$$: 1332-block  1
call    3 never executed
    #####: 1333:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1333-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1334:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1334-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1334-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1334-block  2
call   11 never executed
    $$$$$: 1334-block  3
call   12 never executed
        -: 1335:    }
    #####: 1336:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1336-block  0
    %%%%%: 1336-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1337:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1337-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1337-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1337-block  2
call   11 never executed
    $$$$$: 1337-block  3
call   12 never executed
        -: 1338:    }
        -: 1339:  }
    #####: 1340:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1341:}
        -: 1342:
        -: 1343:namespace {
        -: 1344:
        -: 1345:// Helper class that holds the state for one hunk and prints it out to the
        -: 1346:// stream.
        -: 1347:// It reorders adds/removes when possible to group all removes before all
        -: 1348:// adds. It also adds the hunk header before printint into the stream.
        -: 1349:class Hunk {
        -: 1350: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Emm called 0 returned 0% blocks executed 0%
    #####: 1351:  Hunk(size_t left_start, size_t right_start)
    #####: 1352:      : left_start_(left_start),
    %%%%%: 1352-block  0
call    0 never executed
        -: 1353:        right_start_(right_start),
        -: 1354:        adds_(),
        -: 1355:        removes_(),
    #####: 1356:        common_() {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -: 1357:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1358:  void PushLine(char edit, const char* line) {
    #####: 1359:    switch (edit) {
    %%%%%: 1359-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1360:      case ' ':
    #####: 1361:        ++common_;
    %%%%%: 1361-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1362:        FlushEdits();
call    0 never executed
call    1 never executed
    #####: 1363:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1363-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1363-block  1
call   12 never executed
call   13 never executed
    $$$$$: 1363-block  2
call   14 never executed
    $$$$$: 1363-block  3
call   15 never executed
    #####: 1364:        break;
    #####: 1365:      case '-':
    #####: 1366:        ++removes_;
    %%%%%: 1366-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1367:        hunk_removes_.push_back(std::make_pair('-', line));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1367-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1367-block  1
call   12 never executed
call   13 never executed
    $$$$$: 1367-block  2
call   14 never executed
    $$$$$: 1367-block  3
call   15 never executed
    #####: 1368:        break;
    #####: 1369:      case '+':
    #####: 1370:        ++adds_;
    %%%%%: 1370-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1371:        hunk_adds_.push_back(std::make_pair('+', line));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1371-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1371-block  1
call   12 never executed
call   13 never executed
    $$$$$: 1371-block  2
call   14 never executed
    $$$$$: 1371-block  3
call   15 never executed
    #####: 1372:        break;
        -: 1373:    }
    #####: 1374:  }
    %%%%%: 1374-block  0
        -: 1375:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1376:  void PrintTo(std::ostream* os) {
    #####: 1377:    PrintHeader(os);
    %%%%%: 1377-block  0
call    0 never executed
call    1 never executed
    #####: 1378:    FlushEdits();
call    0 never executed
call    1 never executed
    #####: 1379:    for (std::list<std::pair<char, const char*> >::const_iterator it =
call    0 never executed
    #####: 1380:             hunk_.begin();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1381:         it != hunk_.end(); ++it) {
    %%%%%: 1381-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1381-block  1
call   14 never executed
    #####: 1382:      *os << it->first << it->second << "\n";
    %%%%%: 1382-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1382-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1382-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1383:    }
    #####: 1384:  }
        -: 1385:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1386:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1386-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1386-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1386-block  2
    %%%%%: 1386-block  3
    %%%%%: 1386-block  4
        -: 1387:
        -: 1388: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1389:  void FlushEdits() {
    #####: 1390:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1390-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 1391:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 1392:  }
        -: 1393:
        -: 1394:  // Print a unified diff header for one hunk.
        -: 1395:  // The format is
        -: 1396:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1397:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1398:  void PrintHeader(std::ostream* ss) const {
    #####: 1399:    *ss << "@@ ";
    %%%%%: 1399-block  0
call    0 never executed
call    1 never executed
    #####: 1400:    if (removes_) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1401:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1401-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -: 1402:    }
    #####: 1403:    if (removes_ && adds_) {
    %%%%%: 1403-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1403-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1404:      *ss << " ";
    %%%%%: 1404-block  0
call    0 never executed
call    1 never executed
        -: 1405:    }
    #####: 1406:    if (adds_) {
    %%%%%: 1406-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1407:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1407-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -: 1408:    }
    #####: 1409:    *ss << " @@\n";
    %%%%%: 1409-block  0
call    0 never executed
call    1 never executed
    #####: 1410:  }
        -: 1411:
        -: 1412:  size_t left_start_, right_start_;
        -: 1413:  size_t adds_, removes_, common_;
        -: 1414:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1415:};
        -: 1416:
        -: 1417:}  // namespace
        -: 1418:
        -: 1419:// Create a list of diff hunks in Unified diff format.
        -: 1420:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1421:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1422:// addition.
        -: 1423:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1424:// If two hunks are close enough that their contexts overlap, then they are
        -: 1425:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 1426:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1427:                              const std::vector<std::string>& right,
        -: 1428:                              size_t context) {
    #####: 1429:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1429-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1429-block  1
call    5 never executed
        -: 1430:
    #####: 1431:  size_t l_i = 0, r_i = 0, edit_i = 0;
    %%%%%: 1431-block  0
call    0 never executed
    #####: 1432:  std::stringstream ss;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1432-block  0
call    4 never executed
call    5 never executed
    $$$$$: 1432-block  1
call    6 never executed
call    7 never executed
    #####: 1433:  while (edit_i < edits.size()) {
    %%%%%: 1433-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1433-block  1
        -: 1434:    // Find first edit.
    #####: 1435:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1435-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1435-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1435-block  2
    %%%%%: 1435-block  3
branch  7 never executed
branch  8 never executed
    %%%%%: 1435-block  4
    %%%%%: 1435-block  5
    %%%%%: 1435-block  6
branch  9 never executed
branch 10 never executed
    #####: 1436:      ++l_i;
    #####: 1437:      ++r_i;
    #####: 1438:      ++edit_i;
    %%%%%: 1438-block  0
        -: 1439:    }
        -: 1440:
        -: 1441:    // Find the first line to include in the hunk.
    #####: 1442:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1442-block  0
call    0 never executed
call    1 never executed
    #####: 1443:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
call    1 never executed
    $$$$$: 1443-block  0
call    2 never executed
    #####: 1444:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1444-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1444-block  1
    #####: 1445:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1445-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1446:    }
        -: 1447:
        -: 1448:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1449:    // is over.
    #####: 1450:    size_t n_suffix = 0;
    %%%%%: 1450-block  0
    #####: 1451:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1451-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1452:      if (n_suffix >= context) {
    %%%%%: 1452-block  0
branch  0 never executed
branch  1 never executed
        -: 1453:        // Continue only if the next hunk is very close.
    #####: 1454:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1454-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1455:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1455-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1455-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1455-block  2
    %%%%%: 1455-block  3
branch 10 never executed
branch 11 never executed
    %%%%%: 1455-block  4
    %%%%%: 1455-block  5
    %%%%%: 1455-block  6
branch 12 never executed
branch 13 never executed
    %%%%%: 1455-block  7
call   14 never executed
    %%%%%: 1455-block  8
branch 15 never executed
branch 16 never executed
    %%%%%: 1455-block  9
call   17 never executed
    #####: 1456:        if (it == edits.end() ||
    %%%%%: 1456-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1456-block  1
    %%%%%: 1456-block  2
    %%%%%: 1456-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 1456-block  4
call    8 never executed
    %%%%%: 1456-block  5
branch  9 never executed
branch 10 never executed
    #####: 1457:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1457-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1457-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1457-block  2
call    8 never executed
        -: 1458:          // There is no next edit or it is too far away.
    #####: 1459:          break;
    %%%%%: 1459-block  0
        -: 1460:        }
        -: 1461:      }
        -: 1462:
    #####: 1463:      EditType edit = edits[edit_i];
    %%%%%: 1463-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1463-block  1
        -: 1464:      // Reset count when a non match is found.
    #####: 1465:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
    %%%%%: 1465-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1465-block  1
    %%%%%: 1465-block  2
        -: 1466:
    #####: 1467:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1467-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1467-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1467-block  2
branch  4 never executed
branch  5 never executed
    #####: 1468:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1468-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1468-block  1
    %%%%%: 1468-block  2
    %%%%%: 1468-block  3
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1469:      }
    #####: 1470:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1470-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1470-block  1
branch  2 never executed
branch  3 never executed
    #####: 1471:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1471-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1472:      }
        -: 1473:
        -: 1474:      // Advance indices, depending on edit type.
    #####: 1475:      l_i += edit != kAdd;
    #####: 1476:      r_i += edit != kRemove;
    %%%%%: 1476-block  0
        -: 1477:    }
        -: 1478:
    #####: 1479:    if (!hunk.has_edits()) {
    %%%%%: 1479-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1480:      // We are done. We don't want this hunk.
    #####: 1481:      break;
    %%%%%: 1481-block  0
        -: 1482:    }
        -: 1483:
    #####: 1484:    hunk.PrintTo(&ss);
    %%%%%: 1484-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1485:  }
    #####: 1486:  return ss.str();
    %%%%%: 1486-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1487:}
        -: 1488:
        -: 1489:}  // namespace edit_distance
        -: 1490:
        -: 1491:namespace {
        -: 1492:
        -: 1493:// The string representation of the values received in EqFailure() are already
        -: 1494:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1495:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1496:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1497:  std::vector<std::string> lines;
    %%%%%: 1497-block  0
call    0 never executed
    #####: 1498:  size_t start = 0, end = str.size();
call    0 never executed
call    1 never executed
    #####: 1499:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1499-block  0
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1499-block  1
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1499-block  2
    %%%%%: 1499-block  3
    %%%%%: 1499-block  4
branch 12 never executed
branch 13 never executed
    #####: 1500:    ++start;
    #####: 1501:    --end;
    %%%%%: 1501-block  0
        -: 1502:  }
    #####: 1503:  bool escaped = false;
    #####: 1504:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1504-block  0
    %%%%%: 1504-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1504-block  2
    #####: 1505:    if (escaped) {
    %%%%%: 1505-block  0
branch  0 never executed
branch  1 never executed
    #####: 1506:      escaped = false;
    #####: 1507:      if (str[i] == 'n') {
    %%%%%: 1507-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1508:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1508-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1508-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1508-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1508-block  3
call   10 never executed
    $$$$$: 1508-block  4
call   11 never executed
    #####: 1509:        start = i + 1;
        -: 1510:      }
        -: 1511:    } else {
    #####: 1512:      escaped = str[i] == '\\';
    %%%%%: 1512-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1513:    }
        -: 1514:  }
    #####: 1515:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1515-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1515-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1515-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1515-block  3
call   10 never executed
    $$$$$: 1515-block  4
call   11 never executed
    #####: 1516:  return lines;
    %%%%%: 1516-block  0
        -: 1517:}
        -: 1518:
        -: 1519:}  // namespace
        -: 1520:
        -: 1521:// Constructs and returns the message for an equality assertion
        -: 1522:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1523://
        -: 1524:// The first four parameters are the expressions used in the assertion
        -: 1525:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1526:// where foo is 5 and bar is 6, we have:
        -: 1527://
        -: 1528://   lhs_expression: "foo"
        -: 1529://   rhs_expression: "bar"
        -: 1530://   lhs_value:      "5"
        -: 1531://   rhs_value:      "6"
        -: 1532://
        -: 1533:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1534:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1535:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1536:AssertionResult EqFailure(const char* lhs_expression,
        -: 1537:                          const char* rhs_expression,
        -: 1538:                          const std::string& lhs_value,
        -: 1539:                          const std::string& rhs_value,
        -: 1540:                          bool ignoring_case) {
    #####: 1541:  Message msg;
    %%%%%: 1541-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1541-block  1
call    5 never executed
    #####: 1542:  msg << "Expected equality of these values:";
    %%%%%: 1542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1543:  msg << "\n  " << lhs_expression;
    %%%%%: 1543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1543-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1544:  if (lhs_value != lhs_expression) {
    %%%%%: 1544-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1544-block  1
branch  4 never executed
branch  5 never executed
    #####: 1545:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1545-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1546:  }
    #####: 1547:  msg << "\n  " << rhs_expression;
    %%%%%: 1547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1547-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1548:  if (rhs_value != rhs_expression) {
    %%%%%: 1548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1548-block  1
branch  4 never executed
branch  5 never executed
    #####: 1549:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1549-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1550:  }
        -: 1551:
    #####: 1552:  if (ignoring_case) {
    %%%%%: 1552-block  0
branch  0 never executed
branch  1 never executed
    #####: 1553:    msg << "\nIgnoring case";
    %%%%%: 1553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1554:  }
        -: 1555:
    #####: 1556:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1556-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1556-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1556-block  2
    %%%%%: 1556-block  3
    %%%%%: 1556-block  4
branch  8 never executed
branch  9 never executed
    #####: 1557:    const std::vector<std::string> lhs_lines =
    %%%%%: 1557-block  0
call    0 never executed
    #####: 1558:        SplitEscapedString(lhs_value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1558-block  0
call    4 never executed
    #####: 1559:    const std::vector<std::string> rhs_lines =
    %%%%%: 1559-block  0
call    0 never executed
    #####: 1560:        SplitEscapedString(rhs_value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1560-block  0
call    3 never executed
    $$$$$: 1560-block  1
call    4 never executed
    #####: 1561:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1561-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1561-block  2
    %%%%%: 1561-block  3
    %%%%%: 1561-block  4
branch  6 never executed
branch  7 never executed
    #####: 1562:      msg << "\nWith diff:\n"
    %%%%%: 1562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1563:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1563-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1563-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1563-block  2
call    9 never executed
call   10 never executed
    $$$$$: 1563-block  3
call   11 never executed
    $$$$$: 1563-block  4
call   12 never executed
        -: 1564:    }
        -: 1565:  }
        -: 1566:
    #####: 1567:  return AssertionFailure() << msg;
    %%%%%: 1567-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1567-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1567-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1567-block  3
call   12 never executed
call   13 never executed
    $$$$$: 1567-block  4
call   14 never executed
    $$$$$: 1567-block  5
call   15 never executed
        -: 1568:}
        -: 1569:
        -: 1570:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1571:std::string GetBoolAssertionFailureMessage(
        -: 1572:    const AssertionResult& assertion_result,
        -: 1573:    const char* expression_text,
        -: 1574:    const char* actual_predicate_value,
        -: 1575:    const char* expected_predicate_value) {
    #####: 1576:  const char* actual_message = assertion_result.message();
    %%%%%: 1576-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1577:  Message msg;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1577-block  0
call    4 never executed
    $$$$$: 1577-block  1
call    5 never executed
    #####: 1578:  msg << "Value of: " << expression_text
    %%%%%: 1578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1578-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1579:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1579-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1579-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1580:  if (actual_message[0] != '\0')
    %%%%%: 1580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1581:    msg << " (" << actual_message << ")";
    %%%%%: 1581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1581-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1581-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1582:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1582-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1583:  return msg.GetString();
    %%%%%: 1583-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1584:}
        -: 1585:
        -: 1586:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1587:AssertionResult DoubleNearPredFormat(const char* expr1,
        -: 1588:                                     const char* expr2,
        -: 1589:                                     const char* abs_error_expr,
        -: 1590:                                     double val1,
        -: 1591:                                     double val2,
        -: 1592:                                     double abs_error) {
    #####: 1593:  const double diff = fabs(val1 - val2);
    %%%%%: 1593-block  0
call    0 never executed
    #####: 1594:  if (diff <= abs_error) return AssertionSuccess();
branch  0 never executed
branch  1 never executed
    %%%%%: 1594-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1595:
        -: 1596:  // Find the value which is closest to zero.
    #####: 1597:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1597-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1598:  // Find the distance to the next double from that value.
    #####: 1599:  const double epsilon =
call    0 never executed
    #####: 1600:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1601:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1602:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1603:  // message so that the situation can be more easily understood without
        -: 1604:  // requiring exotic floating-point knowledge.
        -: 1605:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1606:  // that an equality check was actually intended.
    #####: 1607:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1607-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1607-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1607-block  2
    %%%%%: 1607-block  3
    %%%%%: 1607-block  4
branch  8 never executed
branch  9 never executed
    #####: 1608:      abs_error < epsilon) {
    %%%%%: 1608-block  0
branch  0 never executed
branch  1 never executed
    #####: 1609:    return AssertionFailure()
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1609-block  0
call    3 never executed
call    4 never executed
    $$$$$: 1609-block  1
call    5 never executed
    $$$$$: 1609-block  2
call    6 never executed
    #####: 1610:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1610-block  0
call    0 never executed
    %%%%%: 1610-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1610-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1610-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1610-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 1610-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    #####: 1611:           << diff << ", where\n"
    %%%%%: 1611-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1611-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1612:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1612-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1612-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1612-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1612-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1613:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1613-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1613-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1613-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1613-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1614:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1614-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1614-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1614-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 1615:           << " which is smaller than the minimum distance between doubles for "
    #####: 1616:              "numbers of this magnitude which is "
    %%%%%: 1616-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1617:           << epsilon
    %%%%%: 1617-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1618:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1619:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1619-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1619-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1620:  }
    #####: 1621:  return AssertionFailure()
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1621-block  0
call    3 never executed
call    4 never executed
    $$$$$: 1621-block  1
call    5 never executed
    $$$$$: 1621-block  2
call    6 never executed
    #####: 1622:      << "The difference between " << expr1 << " and " << expr2
    %%%%%: 1622-block  0
call    0 never executed
    %%%%%: 1622-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1622-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1622-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1622-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1623:      << " is " << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1623-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1623-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1623-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1623-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1623-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    #####: 1624:      << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1624-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1624-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1624-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1624-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1625:      << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1625-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1625-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1625-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1625-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1626:      << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1626-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1626-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1626-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1626-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1626-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1631:template <typename RawType>
    #####: 1632:AssertionResult FloatingPointLE(const char* expr1,
        -: 1633:                                const char* expr2,
        -: 1634:                                RawType val1,
        -: 1635:                                RawType val2) {
        -: 1636:  // Returns success if val1 is less than val2,
    #####: 1637:  if (val1 < val2) {
    #####: 1638:    return AssertionSuccess();
        -: 1639:  }
        -: 1640:
        -: 1641:  // or if val1 is almost equal to val2.
    #####: 1642:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1643:  if (lhs.AlmostEquals(rhs)) {
    #####: 1644:    return AssertionSuccess();
        -: 1645:  }
        -: 1646:
        -: 1647:  // Note that the above two checks will both fail if either val1 or
        -: 1648:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1649:  // any predicate involving a NaN must return false.
        -: 1650:
    #####: 1651:  ::std::stringstream val1_ss;
    #####: 1652:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1653:          << val1;
        -: 1654:
    #####: 1655:  ::std::stringstream val2_ss;
    #####: 1656:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1657:          << val2;
        -: 1658:
        -: 1659:  return AssertionFailure()
    #####: 1660:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1661:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1662:      << StringStreamToString(&val2_ss);
        -: 1663:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1632:AssertionResult FloatingPointLE(const char* expr1,
        -: 1633:                                const char* expr2,
        -: 1634:                                RawType val1,
        -: 1635:                                RawType val2) {
        -: 1636:  // Returns success if val1 is less than val2,
    #####: 1637:  if (val1 < val2) {
    %%%%%: 1637-block  0
branch  0 never executed
branch  1 never executed
    #####: 1638:    return AssertionSuccess();
    %%%%%: 1638-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1639:  }
        -: 1640:
        -: 1641:  // or if val1 is almost equal to val2.
    #####: 1642:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1643:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1643-block  0
branch  3 never executed
branch  4 never executed
    #####: 1644:    return AssertionSuccess();
    %%%%%: 1644-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1645:  }
        -: 1646:
        -: 1647:  // Note that the above two checks will both fail if either val1 or
        -: 1648:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1649:  // any predicate involving a NaN must return false.
        -: 1650:
    #####: 1651:  ::std::stringstream val1_ss;
    %%%%%: 1651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 1651-block  1
call    6 never executed
call    7 never executed
    #####: 1652:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1652-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1653:          << val1;
    %%%%%: 1653-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1654:
    #####: 1655:  ::std::stringstream val2_ss;
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 1655-block  1
call    6 never executed
call    7 never executed
    #####: 1656:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1657:          << val2;
    %%%%%: 1657-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1658:
        -: 1659:  return AssertionFailure()
    #####: 1660:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1660-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1660-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1660-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1660-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1660-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 1660-block  5
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
    $$$$$: 1660-block  6
call   26 never executed
    $$$$$: 1660-block  7
call   27 never executed
    #####: 1661:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1661-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1661-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1661-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1661-block  3
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 1661-block  4
call   19 never executed
    $$$$$: 1661-block  5
call   20 never executed
    #####: 1662:      << StringStreamToString(&val2_ss);
    %%%%%: 1662-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1662-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1662-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1662-block  3
call   13 never executed
call   14 never executed
    $$$$$: 1662-block  4
call   15 never executed
    $$$$$: 1662-block  5
call   16 never executed
        -: 1663:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1632:AssertionResult FloatingPointLE(const char* expr1,
        -: 1633:                                const char* expr2,
        -: 1634:                                RawType val1,
        -: 1635:                                RawType val2) {
        -: 1636:  // Returns success if val1 is less than val2,
    #####: 1637:  if (val1 < val2) {
    %%%%%: 1637-block  0
branch  0 never executed
branch  1 never executed
    #####: 1638:    return AssertionSuccess();
    %%%%%: 1638-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1639:  }
        -: 1640:
        -: 1641:  // or if val1 is almost equal to val2.
    #####: 1642:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1643:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1643-block  0
branch  3 never executed
branch  4 never executed
    #####: 1644:    return AssertionSuccess();
    %%%%%: 1644-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1645:  }
        -: 1646:
        -: 1647:  // Note that the above two checks will both fail if either val1 or
        -: 1648:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1649:  // any predicate involving a NaN must return false.
        -: 1650:
    #####: 1651:  ::std::stringstream val1_ss;
    %%%%%: 1651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 1651-block  1
call    6 never executed
call    7 never executed
    #####: 1652:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1652-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1653:          << val1;
    %%%%%: 1653-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1654:
    #####: 1655:  ::std::stringstream val2_ss;
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 1655-block  1
call    6 never executed
call    7 never executed
    #####: 1656:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1657:          << val2;
    %%%%%: 1657-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1658:
        -: 1659:  return AssertionFailure()
    #####: 1660:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1660-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1660-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1660-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1660-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1660-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 1660-block  5
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
    $$$$$: 1660-block  6
call   26 never executed
    $$$$$: 1660-block  7
call   27 never executed
    #####: 1661:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1661-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1661-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1661-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1661-block  3
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 1661-block  4
call   19 never executed
    $$$$$: 1661-block  5
call   20 never executed
    #####: 1662:      << StringStreamToString(&val2_ss);
    %%%%%: 1662-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1662-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1662-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1662-block  3
call   13 never executed
call   14 never executed
    $$$$$: 1662-block  4
call   15 never executed
    $$$$$: 1662-block  5
call   16 never executed
        -: 1663:}
------------------
        -: 1664:
        -: 1665:}  // namespace internal
        -: 1666:
        -: 1667:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1668:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1669:AssertionResult FloatLE(const char* expr1, const char* expr2,
        -: 1670:                        float val1, float val2) {
    #####: 1671:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1671-block  0
call    0 never executed
call    1 never executed
        -: 1672:}
        -: 1673:
        -: 1674:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1675:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1676:AssertionResult DoubleLE(const char* expr1, const char* expr2,
        -: 1677:                         double val1, double val2) {
    #####: 1678:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1678-block  0
call    0 never executed
call    1 never executed
        -: 1679:}
        -: 1680:
        -: 1681:namespace internal {
        -: 1682:
        -: 1683:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1684:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1685:                               const char* rhs_expression,
        -: 1686:                               const char* lhs,
        -: 1687:                               const char* rhs) {
    #####: 1688:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1689:    return AssertionSuccess();
    %%%%%: 1689-block  0
call    0 never executed
call    1 never executed
        -: 1690:  }
        -: 1691:
        -: 1692:  return EqFailure(lhs_expression,
        -: 1693:                   rhs_expression,
    #####: 1694:                   PrintToString(lhs),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1694-block  0
call    4 never executed
    %%%%%: 1694-block  1
call    5 never executed
call    6 never executed
    $$$$$: 1694-block  2
call    7 never executed
    $$$$$: 1694-block  3
call    8 never executed
    #####: 1695:                   PrintToString(rhs),
    %%%%%: 1695-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 1695-block  1
call    5 never executed
    $$$$$: 1695-block  2
call    6 never executed
    #####: 1696:                   false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1697:}
        -: 1698:
        -: 1699:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1700:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1701:                                   const char* rhs_expression,
        -: 1702:                                   const char* lhs,
        -: 1703:                                   const char* rhs) {
    #####: 1704:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1704-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1705:    return AssertionSuccess();
    %%%%%: 1705-block  0
call    0 never executed
call    1 never executed
        -: 1706:  }
        -: 1707:
        -: 1708:  return EqFailure(lhs_expression,
        -: 1709:                   rhs_expression,
    #####: 1710:                   PrintToString(lhs),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1710-block  0
call    4 never executed
    %%%%%: 1710-block  1
call    5 never executed
call    6 never executed
    $$$$$: 1710-block  2
call    7 never executed
    $$$$$: 1710-block  3
call    8 never executed
    #####: 1711:                   PrintToString(rhs),
    %%%%%: 1711-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 1711-block  1
call    5 never executed
    $$$$$: 1711-block  2
call    6 never executed
    #####: 1712:                   true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1713:}
        -: 1714:
        -: 1715:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1716:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1717:                               const char* s2_expression,
        -: 1718:                               const char* s1,
        -: 1719:                               const char* s2) {
    #####: 1720:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1721:    return AssertionSuccess();
    %%%%%: 1721-block  0
call    0 never executed
call    1 never executed
        -: 1722:  } else {
    #####: 1723:    return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1723-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1723-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1723-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1723-block  3
call   14 never executed
call   15 never executed
    $$$$$: 1723-block  4
call   16 never executed
    $$$$$: 1723-block  5
call   17 never executed
    #####: 1724:                              << s2_expression << "), actual: \""
    %%%%%: 1724-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1724-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1725:                              << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1725-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1725-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1725-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1725-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1725-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -: 1726:  }
        -: 1727:}
        -: 1728:
        -: 1729:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1730:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1731:                                   const char* s2_expression,
        -: 1732:                                   const char* s1,
        -: 1733:                                   const char* s2) {
    #####: 1734:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1734-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1735:    return AssertionSuccess();
    %%%%%: 1735-block  0
call    0 never executed
call    1 never executed
        -: 1736:  } else {
    #####: 1737:    return AssertionFailure()
call    0 never executed
    %%%%%: 1737-block  0
call    1 never executed
call    2 never executed
    $$$$$: 1737-block  1
call    3 never executed
    $$$$$: 1737-block  2
call    4 never executed
    #####: 1738:        << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1738-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1738-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1738-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1739:        << s2_expression << ") (ignoring case), actual: \""
    %%%%%: 1739-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1739-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1740:        << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1740-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1740-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1740-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1740-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1740-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -: 1741:  }
        -: 1742:}
        -: 1743:
        -: 1744:}  // namespace internal
        -: 1745:
        -: 1746:namespace {
        -: 1747:
        -: 1748:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1749:
        -: 1750:// This group of overloaded functions return true if and only if needle
        -: 1751:// is a substring of haystack.  NULL is considered a substring of
        -: 1752:// itself only.
        -: 1753:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1754:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1755:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1755-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1755-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1755-block  2
        -: 1756:
    #####: 1757:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1757-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1757-block  1
    %%%%%: 1757-block  2
branch  2 never executed
branch  3 never executed
    %%%%%: 1757-block  3
    %%%%%: 1757-block  4
        -: 1758:}
        -: 1759:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1760:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1761:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1761-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1761-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1761-block  2
        -: 1762:
    #####: 1763:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1763-block  0
        -: 1764:}
        -: 1765:
        -: 1766:// StringType here can be either ::std::string or ::std::wstring.
        -: 1767:template <typename StringType>
    #####: 1768:bool IsSubstringPred(const StringType& needle,
        -: 1769:                     const StringType& haystack) {
    #####: 1770:  return haystack.find(needle) != StringType::npos;
        -: 1771:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1768:bool IsSubstringPred(const StringType& needle,
        -: 1769:                     const StringType& haystack) {
    #####: 1770:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1770-block  0
call    0 never executed
call    1 never executed
        -: 1771:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1768:bool IsSubstringPred(const StringType& needle,
        -: 1769:                     const StringType& haystack) {
    #####: 1770:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1770-block  0
call    0 never executed
call    1 never executed
        -: 1771:}
------------------
        -: 1772:
        -: 1773:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1774:// depending on the value of the expected_to_be_substring parameter.
        -: 1775:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1776:// or ::std::wstring.
        -: 1777:template <typename StringType>
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1783:    return AssertionSuccess();
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1788-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1788-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1788-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 1788-block  3
call   18 never executed
    $$$$$: 1788-block  4
call   19 never executed
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1789-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1789-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1789-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1790-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1790-block  5
call   12 never executed
    $$$$$: 1790-block  6
call   13 never executed
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1791-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1791-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1792-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1792-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1792-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1788-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1788-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1788-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 1788-block  3
call   18 never executed
    $$$$$: 1788-block  4
call   19 never executed
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1789-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1789-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1789-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1790-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1790-block  5
call   12 never executed
    $$$$$: 1790-block  6
call   13 never executed
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1791-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1791-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1792-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1792-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1792-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1788-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1788-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1788-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 1788-block  3
call   18 never executed
    $$$$$: 1788-block  4
call   19 never executed
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1789-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1789-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1789-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1790-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1790-block  5
call   12 never executed
    $$$$$: 1790-block  6
call   13 never executed
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1791-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1791-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1792-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1792-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1792-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1788-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1788-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1788-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 1788-block  3
call   18 never executed
    $$$$$: 1788-block  4
call   19 never executed
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1789-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1789-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1789-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1790-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1790-block  5
call   12 never executed
    $$$$$: 1790-block  6
call   13 never executed
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1791-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1791-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1792-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1792-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1792-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -: 1793:}
------------------
        -: 1794:
        -: 1795:}  // namespace
        -: 1796:
        -: 1797:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1798:// substring of haystack (NULL is considered a substring of itself
        -: 1799:// only), and return an appropriate error message when they fail.
        -: 1800:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1801:AssertionResult IsSubstring(
        -: 1802:    const char* needle_expr, const char* haystack_expr,
        -: 1803:    const char* needle, const char* haystack) {
    #####: 1804:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1804-block  0
call    0 never executed
call    1 never executed
        -: 1805:}
        -: 1806:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1807:AssertionResult IsSubstring(
        -: 1808:    const char* needle_expr, const char* haystack_expr,
        -: 1809:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1810:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1810-block  0
call    0 never executed
call    1 never executed
        -: 1811:}
        -: 1812:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1813:AssertionResult IsNotSubstring(
        -: 1814:    const char* needle_expr, const char* haystack_expr,
        -: 1815:    const char* needle, const char* haystack) {
    #####: 1816:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1816-block  0
call    0 never executed
call    1 never executed
        -: 1817:}
        -: 1818:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1819:AssertionResult IsNotSubstring(
        -: 1820:    const char* needle_expr, const char* haystack_expr,
        -: 1821:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1822:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1822-block  0
call    0 never executed
call    1 never executed
        -: 1823:}
        -: 1824:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1825:AssertionResult IsSubstring(
        -: 1826:    const char* needle_expr, const char* haystack_expr,
        -: 1827:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1828:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1828-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1829:}
        -: 1830:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1831:AssertionResult IsNotSubstring(
        -: 1832:    const char* needle_expr, const char* haystack_expr,
        -: 1833:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1834:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1834-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1835:}
        -: 1836:
        -: 1837:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1838:AssertionResult IsSubstring(
        -: 1839:    const char* needle_expr, const char* haystack_expr,
        -: 1840:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1841:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1841-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1842:}
        -: 1843:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1844:AssertionResult IsNotSubstring(
        -: 1845:    const char* needle_expr, const char* haystack_expr,
        -: 1846:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1847:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1847-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1848:}
        -: 1849:#endif  // GTEST_HAS_STD_WSTRING
        -: 1850:
        -: 1851:namespace internal {
        -: 1852:
        -: 1853:#if GTEST_OS_WINDOWS
        -: 1854:
        -: 1855:namespace {
        -: 1856:
        -: 1857:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1858:AssertionResult HRESULTFailureHelper(const char* expr,
        -: 1859:                                     const char* expected,
        -: 1860:                                     long hr) {  // NOLINT
        -: 1861:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1862:
        -: 1863:  // Windows CE doesn't support FormatMessage.
        -: 1864:  const char error_text[] = "";
        -: 1865:
        -: 1866:# else
        -: 1867:
        -: 1868:  // Looks up the human-readable system message for the HRESULT code
        -: 1869:  // and since we're not passing any params to FormatMessage, we don't
        -: 1870:  // want inserts expanded.
        -: 1871:  const DWORD kFlags = FORMAT_MESSAGE_FROM_SYSTEM |
        -: 1872:                       FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1873:  const DWORD kBufSize = 4096;
        -: 1874:  // Gets the system's human readable message string for this HRESULT.
        -: 1875:  char error_text[kBufSize] = { '\0' };
        -: 1876:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1877:                                          0,   // no source, we're asking system
        -: 1878:                                          static_cast<DWORD>(hr),  // the error
        -: 1879:                                          0,   // no line width restrictions
        -: 1880:                                          error_text,  // output buffer
        -: 1881:                                          kBufSize,    // buf size
        -: 1882:                                          nullptr);  // no arguments for inserts
        -: 1883:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1884:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1885:          --message_length) {
        -: 1886:    error_text[message_length - 1] = '\0';
        -: 1887:  }
        -: 1888:
        -: 1889:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1890:
        -: 1891:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1892:  return ::testing::AssertionFailure()
        -: 1893:      << "Expected: " << expr << " " << expected << ".\n"
        -: 1894:      << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1895:}
        -: 1896:
        -: 1897:}  // namespace
        -: 1898:
        -: 1899:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1900:  if (SUCCEEDED(hr)) {
        -: 1901:    return AssertionSuccess();
        -: 1902:  }
        -: 1903:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1904:}
        -: 1905:
        -: 1906:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1907:  if (FAILED(hr)) {
        -: 1908:    return AssertionSuccess();
        -: 1909:  }
        -: 1910:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1911:}
        -: 1912:
        -: 1913:#endif  // GTEST_OS_WINDOWS
        -: 1914:
        -: 1915:// Utility functions for encoding Unicode text (wide strings) in
        -: 1916:// UTF-8.
        -: 1917:
        -: 1918:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1919:// like this:
        -: 1920://
        -: 1921:// Code-point length   Encoding
        -: 1922://   0 -  7 bits       0xxxxxxx
        -: 1923://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1924://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1925://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1926:
        -: 1927:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1928:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) <<  7) - 1;
        -: 1929:
        -: 1930:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1931:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1932:
        -: 1933:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1934:constexpr uint32_t kMaxCodePoint3 = (static_cast<uint32_t>(1) << (4 + 2*6)) - 1;
        -: 1935:
        -: 1936:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1937:constexpr uint32_t kMaxCodePoint4 = (static_cast<uint32_t>(1) << (3 + 3*6)) - 1;
        -: 1938:
        -: 1939:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1940:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1941:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1942:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1943:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    %%%%%: 1943-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1943-block  1
    %%%%%: 1943-block  2
call    2 never executed
    #####: 1944:  *bits >>= n;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1944-block  0
    %%%%%: 1944-block  1
call    3 never executed
    #####: 1945:  return low_bits;
        -: 1946:}
        -: 1947:
        -: 1948:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1949:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1950:// wide enough to contain a code point.
        -: 1951:// If the code_point is not a valid Unicode code point
        -: 1952:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1953:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1954:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1955:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1955-block  0
branch  0 never executed
branch  1 never executed
    #####: 1956:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1956-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1956-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1956-block  2
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1956-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 1956-block  4
call   18 never executed
    $$$$$: 1956-block  5
call   19 never executed
    $$$$$: 1956-block  6
call   20 never executed
    $$$$$: 1956-block  7
call   21 never executed
        -: 1957:  }
        -: 1958:
    #####: 1959:  char str[5];  // Big enough for the largest valid code point.
    %%%%%: 1959-block  0
call    0 never executed
    #####: 1960:  if (code_point <= kMaxCodePoint1) {
branch  0 never executed
branch  1 never executed
    #####: 1961:    str[1] = '\0';
    #####: 1962:    str[0] = static_cast<char>(code_point);                          // 0xxxxxxx
    %%%%%: 1962-block  0
    #####: 1963:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1963-block  0
branch  0 never executed
branch  1 never executed
    #####: 1964:    str[2] = '\0';
    #####: 1965:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1965-block  0
call    0 never executed
    #####: 1966:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1967:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1967-block  0
branch  0 never executed
branch  1 never executed
    #####: 1968:    str[3] = '\0';
    #####: 1969:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1969-block  0
call    0 never executed
    #####: 1970:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1971:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1972:  } else {  // code_point <= kMaxCodePoint4
    #####: 1973:    str[4] = '\0';
    #####: 1974:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1974-block  0
call    0 never executed
    #####: 1975:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1976:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1977:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1978:  }
    #####: 1979:  return str;
    %%%%%: 1979-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1979-block  1
call    5 never executed
call    6 never executed
    $$$$$: 1979-block  2
call    7 never executed
    $$$$$: 1979-block  3
call    8 never executed
        -: 1980:}
        -: 1981:
        -: 1982:// The following two functions only make sense if the system
        -: 1983:// uses UTF-16 for wide string encoding. All supported systems
        -: 1984:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1985:
        -: 1986:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1987:// and thus should be combined into a single Unicode code point
        -: 1988:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1989:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1990:  return sizeof(wchar_t) == 2 &&
    #####: 1991:      (first & 0xFC00) == 0xD800 && (second & 0xFC00) == 0xDC00;
    %%%%%: 1991-block  0
        -: 1992:}
        -: 1993:
        -: 1994:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1995:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1996:                                                      wchar_t second) {
    #####: 1997:  const auto first_u = static_cast<uint32_t>(first);
    #####: 1998:  const auto second_u = static_cast<uint32_t>(second);
    #####: 1999:  const uint32_t mask = (1 << 10) - 1;
        -: 2000:  return (sizeof(wchar_t) == 2)
        -: 2001:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2002:             :
        -: 2003:             // This function should not be called when the condition is
        -: 2004:             // false, but we provide a sensible default in case it is.
    #####: 2005:             first_u;
    %%%%%: 2005-block  0
        -: 2006:}
        -: 2007:
        -: 2008:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2009:// The wide string is assumed to have the following encoding:
        -: 2010://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2011://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2012:// Parameter str points to a null-terminated wide string.
        -: 2013:// Parameter num_chars may additionally limit the number
        -: 2014:// of wchar_t characters processed. -1 is used when the entire string
        -: 2015:// should be processed.
        -: 2016:// If the string contains code points that are not valid Unicode code points
        -: 2017:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2018:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2019:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2020:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2021:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2022:  if (num_chars == -1)
    %%%%%: 2022-block  0
branch  0 never executed
branch  1 never executed
    #####: 2023:    num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2023-block  0
        -: 2024:
    #####: 2025:  ::std::stringstream stream;
    %%%%%: 2025-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2025-block  1
call    4 never executed
call    5 never executed
    $$$$$: 2025-block  2
call    6 never executed
call    7 never executed
    #####: 2026:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2026-block  0
    %%%%%: 2026-block  1
branch  0 never executed
branch  1 never executed
        -: 2027:    uint32_t unicode_code_point;
        -: 2028:
    #####: 2029:    if (str[i] == L'\0') {
    %%%%%: 2029-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2030:      break;
    %%%%%: 2030-block  0
    #####: 2031:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2031-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2031-block  1
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2031-block  2
    %%%%%: 2031-block  3
    %%%%%: 2031-block  4
branch  9 never executed
branch 10 never executed
    #####: 2032:      unicode_code_point = CreateCodePointFromUtf16SurrogatePair(str[i],
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2033:                                                                 str[i + 1]);
    %%%%%: 2033-block  0
call    0 never executed
call    1 never executed
    #####: 2034:      i++;
        -: 2035:    } else {
    #####: 2036:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2036-block  0
call    0 never executed
call    1 never executed
        -: 2037:    }
        -: 2038:
    #####: 2039:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2039-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2039-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2039-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2039-block  3
call   10 never executed
    $$$$$: 2039-block  4
call   11 never executed
        -: 2040:  }
    #####: 2041:  return StringStreamToString(&stream);
    %%%%%: 2041-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2042:}
        -: 2043:
        -: 2044:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2045:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2046:std::string String::ShowWideCString(const wchar_t * wide_c_str) {
    #####: 2047:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2047-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2047-block  1
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2047-block  2
call    7 never executed
call    8 never executed
    $$$$$: 2047-block  3
call    9 never executed
    $$$$$: 2047-block  4
call   10 never executed
        -: 2048:
    #####: 2049:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2049-block  0
call    0 never executed
call    1 never executed
        -: 2050:}
        -: 2051:
        -: 2052:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2053:// same content.
        -: 2054://
        -: 2055:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2056:// C string is considered different to any non-NULL C string,
        -: 2057:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2058:bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {
    #####: 2059:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2059-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2059-block  1
        -: 2060:
    #####: 2061:  if (rhs == nullptr) return false;
    %%%%%: 2061-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2061-block  1
        -: 2062:
    #####: 2063:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2063-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2063-block  1
    %%%%%: 2063-block  2
branch  2 never executed
branch  3 never executed
    %%%%%: 2063-block  3
    %%%%%: 2063-block  4
        -: 2064:}
        -: 2065:
        -: 2066:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2067:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2068:                               const char* rhs_expression,
        -: 2069:                               const wchar_t* lhs,
        -: 2070:                               const wchar_t* rhs) {
    #####: 2071:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2071-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2072:    return AssertionSuccess();
    %%%%%: 2072-block  0
call    0 never executed
call    1 never executed
        -: 2073:  }
        -: 2074:
        -: 2075:  return EqFailure(lhs_expression,
        -: 2076:                   rhs_expression,
    #####: 2077:                   PrintToString(lhs),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2077-block  0
call    4 never executed
    %%%%%: 2077-block  1
call    5 never executed
call    6 never executed
    $$$$$: 2077-block  2
call    7 never executed
    $$$$$: 2077-block  3
call    8 never executed
    #####: 2078:                   PrintToString(rhs),
    %%%%%: 2078-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 2078-block  1
call    5 never executed
    $$$$$: 2078-block  2
call    6 never executed
    #####: 2079:                   false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2080:}
        -: 2081:
        -: 2082:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2083:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2084:                               const char* s2_expression,
        -: 2085:                               const wchar_t* s1,
        -: 2086:                               const wchar_t* s2) {
    #####: 2087:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2088:    return AssertionSuccess();
    %%%%%: 2088-block  0
call    0 never executed
call    1 never executed
        -: 2089:  }
        -: 2090:
    #####: 2091:  return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 2091-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2091-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2091-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 2091-block  3
call   16 never executed
    $$$$$: 2091-block  4
call   17 never executed
    #####: 2092:                            << s2_expression << "), actual: "
    %%%%%: 2092-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2092-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2093:                            << PrintToString(s1)
    %%%%%: 2093-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2093-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2093-block  2
call   11 never executed
    $$$$$: 2093-block  3
call   12 never executed
    #####: 2094:                            << " vs " << PrintToString(s2);
    %%%%%: 2094-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2094-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2094-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2094-block  3
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 2094-block  4
call   17 never executed
call   18 never executed
    $$$$$: 2094-block  5
call   19 never executed
    $$$$$: 2094-block  6
call   20 never executed
        -: 2095:}
        -: 2096:
        -: 2097:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2098:// the same content.
        -: 2099://
        -: 2100:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2101:// NULL C string is considered different to any non-NULL C string,
        -: 2102:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2103:bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {
       4*: 2104:  if (lhs == nullptr) return rhs == nullptr;
        4: 2104-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2104-block  1
       4*: 2105:  if (rhs == nullptr) return false;
        4: 2105-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2105-block  1
        4: 2106:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2106-block  0
call    0 returned 4
        -: 2107:}
        -: 2108:
        -: 2109:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2110:// have the same content.
        -: 2111://
        -: 2112:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2113:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2114:// including the empty string.
        -: 2115:// NB: The implementations on different platforms slightly differ.
        -: 2116:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2117:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2118:// which compares according to LC_CTYPE category of the current locale.
        -: 2119:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2120:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2121:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2122:                                              const wchar_t* rhs) {
    #####: 2123:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2123-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2123-block  1
        -: 2124:
    #####: 2125:  if (rhs == nullptr) return false;
    %%%%%: 2125-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2125-block  1
        -: 2126:
        -: 2127:#if GTEST_OS_WINDOWS
        -: 2128:  return _wcsicmp(lhs, rhs) == 0;
        -: 2129:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
    #####: 2130:  return wcscasecmp(lhs, rhs) == 0;
    %%%%%: 2130-block  0
call    0 never executed
        -: 2131:#else
        -: 2132:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2133:  // Other unknown OSes may not define it either.
        -: 2134:  wint_t left, right;
        -: 2135:  do {
        -: 2136:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2137:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2138:  } while (left && left == right);
        -: 2139:  return left == right;
        -: 2140:#endif  // OS selector
        -: 2141:}
        -: 2142:
        -: 2143:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2144:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2145:bool String::EndsWithCaseInsensitive(
        -: 2146:    const std::string& str, const std::string& suffix) {
    #####: 2147:  const size_t str_len = str.length();
    %%%%%: 2147-block  0
call    0 never executed
call    1 never executed
    #####: 2148:  const size_t suffix_len = suffix.length();
call    0 never executed
call    1 never executed
    #####: 2149:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2149-block  0
    %%%%%: 2149-block  1
    #####: 2150:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2151:                                      suffix.c_str());
    %%%%%: 2151-block  0
call    0 never executed
    %%%%%: 2151-block  1
        -: 2152:}
        -: 2153:
        -: 2154:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2155:std::string String::FormatIntWidth2(int value) {
    #####: 2156:  return FormatIntWidthN(value, 2);
    %%%%%: 2156-block  0
call    0 never executed
call    1 never executed
        -: 2157:}
        -: 2158:
        -: 2159:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2160:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2161:  std::stringstream ss;
    %%%%%: 2161-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2161-block  1
call    4 never executed
call    5 never executed
    $$$$$: 2161-block  2
call    6 never executed
call    7 never executed
    #####: 2162:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2162-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2162-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2162-block  2
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2163:  return ss.str();
    %%%%%: 2163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2164:}
        -: 2165:
        -: 2166:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2167:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2168:  std::stringstream ss;
    %%%%%: 2168-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2168-block  1
call    4 never executed
call    5 never executed
    $$$$$: 2168-block  2
call    6 never executed
call    7 never executed
    #####: 2169:  ss << std::hex << std::uppercase << value;
    %%%%%: 2169-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2169-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2169-block  2
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 2170:  return ss.str();
    %%%%%: 2170-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2171:}
        -: 2172:
        -: 2173:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2174:std::string String::FormatHexInt(int value) {
    #####: 2175:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2175-block  0
call    0 never executed
call    1 never executed
        -: 2176:}
        -: 2177:
        -: 2178:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2179:std::string String::FormatByte(unsigned char value) {
    #####: 2180:  std::stringstream ss;
    %%%%%: 2180-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2180-block  1
call    4 never executed
call    5 never executed
    $$$$$: 2180-block  2
call    6 never executed
call    7 never executed
    #####: 2181:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2181-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2181-block  2
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2181-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    #####: 2182:     << static_cast<unsigned int>(value);
    %%%%%: 2182-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2183:  return ss.str();
    %%%%%: 2183-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2184:}
        -: 2185:
        -: 2186:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2187:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 63 returned 100% blocks executed 79%
       63: 2188:std::string StringStreamToString(::std::stringstream* ss) {
      126: 2189:  const ::std::string& str = ss->str();
       63: 2189-block  0
call    0 returned 63
call    1 returned 63
branch  2 taken 63 (fallthrough)
branch  3 taken 0 (throw)
       63: 2189-block  1
call    4 returned 63
    $$$$$: 2189-block  2
call    5 never executed
       63: 2190:  const char* const start = str.c_str();
       63: 2190-block  0
call    0 returned 63
call    1 returned 63
       63: 2191:  const char* const end = start + str.length();
call    0 returned 63
call    1 returned 63
call    2 returned 63
        -: 2192:
       63: 2193:  std::string result;
call    0 returned 63
       63: 2194:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 63
branch  1 taken 63 (fallthrough)
branch  2 taken 0 (throw)
     1051: 2195:  for (const char* ch = start; ch != end; ++ch) {
       63: 2195-block  0
     1051: 2195-block  1
branch  0 taken 988 (fallthrough)
branch  1 taken 63
      988: 2195-block  2
call    2 returned 988
      988: 2196:    if (*ch == '\0') {
      988: 2196-block  0
call    0 returned 988
branch  1 taken 0 (fallthrough)
branch  2 taken 988
    #####: 2197:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2197-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2198:    } else {
      988: 2199:      result += *ch;
      988: 2199-block  0
call    0 returned 988
call    1 returned 988
branch  2 taken 988 (fallthrough)
branch  3 taken 0 (throw)
        -: 2200:    }
        -: 2201:  }
        -: 2202:
      126: 2203:  return result;
       63: 2203-block  0
        -: 2204:}
        -: 2205:
        -: 2206:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2207:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2208:                              const Message& user_msg) {
        -: 2209:  // Appends the user message if it's non-empty.
    #####: 2210:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2210-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2210-block  1
call    4 never executed
    $$$$$: 2210-block  2
call    5 never executed
    #####: 2211:  if (user_msg_string.empty()) {
    %%%%%: 2211-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2212:    return gtest_msg;
    %%%%%: 2212-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2213:  }
    #####: 2214:  if (gtest_msg.empty()) {
    %%%%%: 2214-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2215:    return user_msg_string;
    %%%%%: 2215-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2216:  }
    #####: 2217:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2217-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2217-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2217-block  2
call   10 never executed
call   11 never executed
    $$$$$: 2217-block  3
call   12 never executed
    $$$$$: 2217-block  4
call   13 never executed
        -: 2218:}
        -: 2219:
        -: 2220:}  // namespace internal
        -: 2221:
        -: 2222:// class TestResult
        -: 2223:
        -: 2224:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 9 returned 100% blocks executed 100%
        9: 2225:TestResult::TestResult()
        9: 2225-block  0
call    0 returned 9
        9: 2226:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
call    4 returned 9
call    5 returned 9
call    6 returned 9
call    7 returned 9
call    8 returned 9
call    9 returned 9
call   10 returned 9
call   11 returned 9
call   12 returned 9
call   13 returned 9
call   14 returned 9
call   15 returned 9
call   16 returned 9
        -: 2227:
        -: 2228:// D'tor.
function _ZN7testing10TestResultD2Ev called 9 returned 100% blocks executed 100%
        9: 2229:TestResult::~TestResult() {
        9: 2229-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
call    4 returned 9
call    5 returned 9
call    6 returned 9
call    7 returned 9
call    8 returned 9
call    9 returned 9
call   10 returned 9
call   11 returned 9
        9: 2230:}
        -: 2231:
        -: 2232:// Returns the i-th test part result among all the results. i can
        -: 2233:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2234:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2235:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2236:  if (i < 0 || i >= total_part_count())
    %%%%%: 2236-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2236-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2236-block  2
    %%%%%: 2236-block  3
    %%%%%: 2236-block  4
branch  6 never executed
branch  7 never executed
    #####: 2237:    internal::posix::Abort();
    %%%%%: 2237-block  0
call    0 never executed
    #####: 2238:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2238-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 2239:}
        -: 2240:
        -: 2241:// Returns the i-th test property. i can range from 0 to
        -: 2242:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2243:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2244:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2245:  if (i < 0 || i >= test_property_count())
    %%%%%: 2245-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2245-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2245-block  2
    %%%%%: 2245-block  3
    %%%%%: 2245-block  4
branch  6 never executed
branch  7 never executed
    #####: 2246:    internal::posix::Abort();
    %%%%%: 2246-block  0
call    0 never executed
    #####: 2247:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2247-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 2248:}
        -: 2249:
        -: 2250:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2251:void TestResult::ClearTestPartResults() {
    #####: 2252:  test_part_results_.clear();
    %%%%%: 2252-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2253:}
        -: 2254:
        -: 2255:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2256:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2257:  test_part_results_.push_back(test_part_result);
    %%%%%: 2257-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2258:}
        -: 2259:
        -: 2260:// Adds a test property to the list. If a property with the same key as the
        -: 2261:// supplied property is already represented, the value of this test_property
        -: 2262:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2263:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2264:                                const TestProperty& test_property) {
    #####: 2265:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2265-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2265-block  1
branch  3 never executed
branch  4 never executed
    #####: 2266:    return;
    %%%%%: 2266-block  0
        -: 2267:  }
    #####: 2268:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2268-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2268-block  1
call    5 never executed
    #####: 2269:  const std::vector<TestProperty>::iterator property_with_matching_key =
    %%%%%: 2269-block  0
call    0 never executed
    #####: 2270:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2270-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 2271:                   internal::TestPropertyKeyIs(test_property.key()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2271-block  0
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2271-block  1
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2271-block  2
call   24 never executed
    $$$$$: 2271-block  3
call   25 never executed
    $$$$$: 2271-block  4
call   26 never executed
    $$$$$: 2271-block  5
call   27 never executed
    $$$$$: 2271-block  6
call   28 never executed
    $$$$$: 2271-block  7
call   29 never executed
    #####: 2272:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2273:    test_properties_.push_back(test_property);
    %%%%%: 2273-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2274:    return;
    %%%%%: 2274-block  0
        -: 2275:  }
    #####: 2276:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2276-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2276-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2276-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 2276-block  3
call   18 never executed
    $$$$$: 2276-block  4
call   19 never executed
    $$$$$: 2276-block  5
call   20 never executed
    $$$$$: 2276-block  6
call   21 never executed
        -: 2277:}
        -: 2278:
        -: 2279:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2280:// output.
        -: 2281:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2282:  "disabled",
        -: 2283:  "errors",
        -: 2284:  "failures",
        -: 2285:  "name",
        -: 2286:  "random_seed",
        -: 2287:  "tests",
        -: 2288:  "time",
        -: 2289:  "timestamp"
        -: 2290:};
        -: 2291:
        -: 2292:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2293:// output.
        -: 2294:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2295:    "disabled", "errors", "failures",  "name",
        -: 2296:    "tests",    "time",   "timestamp", "skipped"};
        -: 2297:
        -: 2298:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2299:static const char* const kReservedTestCaseAttributes[] = {
        -: 2300:    "classname",   "name", "status", "time",  "type_param",
        -: 2301:    "value_param", "file", "line"};
        -: 2302:
        -: 2303:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2304:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2305:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2306:    "classname",   "name", "status", "time",   "type_param",
        -: 2307:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2308:
        -: 2309:template <size_t kSize>
    #####: 2310:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2311:  return std::vector<std::string>(array, array + kSize);
        -: 2312:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2310:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2311:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2311-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2311-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2311-block  2
call    8 never executed
    $$$$$: 2311-block  3
call    9 never executed
        -: 2312:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2310:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2311:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2311-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2311-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2311-block  2
call    8 never executed
    $$$$$: 2311-block  3
call    9 never executed
        -: 2312:}
------------------
        -: 2313:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2314:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2315:    const std::string& xml_element) {
    #####: 2316:  if (xml_element == "testsuites") {
    %%%%%: 2316-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2317:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2317-block  0
call    0 never executed
call    1 never executed
    #####: 2318:  } else if (xml_element == "testsuite") {
    %%%%%: 2318-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2319:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2319-block  0
call    0 never executed
call    1 never executed
    #####: 2320:  } else if (xml_element == "testcase") {
    %%%%%: 2320-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2321:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2321-block  0
call    0 never executed
call    1 never executed
        -: 2322:  } else {
    #####: 2323:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2323-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2323-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2323-block  3
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2323-block  4
call   18 never executed
call   19 never executed
    $$$$$: 2323-block  5
call   20 never executed
    $$$$$: 2323-block  6
call   21 never executed
        -: 2324:  }
        -: 2325:  // This code is unreachable but some compilers may not realizes that.
    #####: 2326:  return std::vector<std::string>();
    %%%%%: 2326-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2327:}
        -: 2328:
        -: 2329:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2330:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2331:    const std::string& xml_element) {
    #####: 2332:  if (xml_element == "testsuites") {
    %%%%%: 2332-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2333:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2333-block  0
call    0 never executed
call    1 never executed
    #####: 2334:  } else if (xml_element == "testsuite") {
    %%%%%: 2334-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2335:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2335-block  0
call    0 never executed
call    1 never executed
    #####: 2336:  } else if (xml_element == "testcase") {
    %%%%%: 2336-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2337:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2337-block  0
call    0 never executed
call    1 never executed
        -: 2338:  } else {
    #####: 2339:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2339-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2339-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2339-block  3
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2339-block  4
call   18 never executed
call   19 never executed
    $$$$$: 2339-block  5
call   20 never executed
    $$$$$: 2339-block  6
call   21 never executed
        -: 2340:  }
        -: 2341:  // This code is unreachable but some compilers may not realizes that.
    #####: 2342:  return std::vector<std::string>();
    %%%%%: 2342-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2343:}
        -: 2344:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2345:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2346:  Message word_list;
    %%%%%: 2346-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2346-block  1
call    4 never executed
    $$$$$: 2346-block  2
call    5 never executed
    #####: 2347:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2347-block  0
    %%%%%: 2347-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2347-block  2
    #####: 2348:    if (i > 0 && words.size() > 2) {
    %%%%%: 2348-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2348-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2348-block  2
    %%%%%: 2348-block  3
    %%%%%: 2348-block  4
branch  6 never executed
branch  7 never executed
    #####: 2349:      word_list << ", ";
    %%%%%: 2349-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2350:    }
    #####: 2351:    if (i == words.size() - 1) {
    %%%%%: 2351-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2352:      word_list << "and ";
    %%%%%: 2352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2353:    }
    #####: 2354:    word_list << "'" << words[i] << "'";
    %%%%%: 2354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2354-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2354-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -: 2355:  }
    #####: 2356:  return word_list.GetString();
    %%%%%: 2356-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2357:}
        -: 2358:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2359:static bool ValidateTestPropertyName(
        -: 2360:    const std::string& property_name,
        -: 2361:    const std::vector<std::string>& reserved_names) {
    #####: 2362:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2362-block  0
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2363:          reserved_names.end()) {
    %%%%%: 2363-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 2363-block  1
call    5 never executed
    #####: 2364:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2364-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2364-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2364-block  2
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 2364-block  3
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 2364-block  4
call   23 never executed
    $$$$$: 2364-block  5
call   24 never executed
    $$$$$: 2364-block  6
call   25 never executed
    $$$$$: 2364-block  7
call   26 never executed
    #####: 2365:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2365-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2365-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2365-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2365-block  3
call   15 never executed
    $$$$$: 2365-block  4
call   16 never executed
    #####: 2366:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2366-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2366-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2366-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2366-block  3
call   12 never executed
    #####: 2367:    return false;
        -: 2368:  }
    #####: 2369:  return true;
    %%%%%: 2369-block  0
        -: 2370:}
        -: 2371:
        -: 2372:// Adds a failure if the key is a reserved attribute of the element named
        -: 2373:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2374:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2375:                                      const TestProperty& test_property) {
    #####: 2376:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2376-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2376-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 2376-block  2
call   16 never executed
    $$$$$: 2376-block  3
call   17 never executed
    $$$$$: 2376-block  4
call   18 never executed
    $$$$$: 2376-block  5
call   19 never executed
    #####: 2377:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2377-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 2377-block  1
call    3 never executed
call    4 never executed
    $$$$$: 2377-block  2
call    5 never executed
    $$$$$: 2377-block  3
call    6 never executed
        -: 2378:}
        -: 2379:
        -: 2380:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 8 returned 100% blocks executed 100%
        8: 2381:void TestResult::Clear() {
        8: 2382:  test_part_results_.clear();
        8: 2382-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
        8: 2383:  test_properties_.clear();
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
        8: 2384:  death_test_count_ = 0;
call    0 returned 8
call    1 returned 8
        8: 2385:  elapsed_time_ = 0;
call    0 returned 8
call    1 returned 8
        8: 2386:}
        -: 2387:
        -: 2388:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2389:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2390:  return result.skipped();
    %%%%%: 2390-block  0
call    0 never executed
call    1 never executed
        -: 2391:}
        -: 2392:
        -: 2393:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 36 returned 100% blocks executed 93%
       36: 2394:bool TestResult::Skipped() const {
      36*: 2395:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
       36: 2395-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0
       36: 2395-block  1
call    4 returned 36
call    5 returned 36
call    6 returned 36
call    7 returned 36
call    8 returned 36
call    9 returned 36
branch 10 taken 0 (fallthrough)
branch 11 taken 36
    %%%%%: 2395-block  2
       36: 2395-block  3
       36: 2395-block  4
        -: 2396:}
        -: 2397:
        -: 2398:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 76 returned 100% blocks executed 46%
       76: 2399:bool TestResult::Failed() const {
      76*: 2400:  for (int i = 0; i < total_part_count(); ++i) {
       76: 2400-block  0
       76: 2400-block  1
call    0 returned 76
call    1 returned 76
branch  2 taken 0 (fallthrough)
branch  3 taken 76
    %%%%%: 2400-block  2
    #####: 2401:    if (GetTestPartResult(i).failed())
    %%%%%: 2401-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2402:      return true;
    %%%%%: 2402-block  0
        -: 2403:  }
       76: 2404:  return false;
       76: 2404-block  0
        -: 2405:}
        -: 2406:
        -: 2407:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2408:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2409:  return result.fatally_failed();
    %%%%%: 2409-block  0
call    0 never executed
call    1 never executed
        -: 2410:}
        -: 2411:
        -: 2412:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 15 returned 100% blocks executed 100%
       15: 2413:bool TestResult::HasFatalFailure() const {
       15: 2414:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       15: 2414-block  0
call    0 returned 15
call    1 returned 15
call    2 returned 15
call    3 returned 15
call    4 returned 15
call    5 returned 15
        -: 2415:}
        -: 2416:
        -: 2417:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2418:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2419:  return result.nonfatally_failed();
    %%%%%: 2419-block  0
call    0 never executed
call    1 never executed
        -: 2420:}
        -: 2421:
        -: 2422:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2423:bool TestResult::HasNonfatalFailure() const {
    #####: 2424:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2424-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2425:}
        -: 2426:
        -: 2427:// Gets the number of all test parts.  This is the sum of the number
        -: 2428:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 76 returned 100% blocks executed 100%
       76: 2429:int TestResult::total_part_count() const {
       76: 2430:  return static_cast<int>(test_part_results_.size());
       76: 2430-block  0
call    0 returned 76
call    1 returned 76
call    2 returned 76
call    3 returned 76
call    4 returned 76
call    5 returned 76
        -: 2431:}
        -: 2432:
        -: 2433:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2434:int TestResult::test_property_count() const {
    #####: 2435:  return static_cast<int>(test_properties_.size());
    %%%%%: 2435-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2436:}
        -: 2437:
        -: 2438:// class Test
        -: 2439:
        -: 2440:// Creates a Test object.
        -: 2441:
        -: 2442:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 7 returned 100% blocks executed 93%
        7: 2443:Test::Test()
        7: 2443-block  0
call    0 returned 7
call    1 returned 7
        7: 2444:    : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0 (throw)
        7: 2444-block  0
call   10 returned 7
    $$$$$: 2444-block  1
call   11 never executed
        7: 2445:}
        -: 2446:
        -: 2447:// The d'tor restores the states of all flags.  The actual work is
        -: 2448:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2449:// visible here.
       7*: 2450:Test::~Test() {
       7*: 2451:}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2450:Test::~Test() {
    #####: 2451:}
    %%%%%: 2451-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 7 returned 100% blocks executed 100%
        7: 2450:Test::~Test() {
        7: 2450-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
        7: 2451:}
------------------
        -: 2452:
        -: 2453:// Sets up the test fixture.
        -: 2454://
        -: 2455:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 0 returned 0% blocks executed 0%
    #####: 2456:void Test::SetUp() {
    #####: 2457:}
        -: 2458:
        -: 2459:// Tears down the test fixture.
        -: 2460://
        -: 2461:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 0 returned 0% blocks executed 0%
    #####: 2462:void Test::TearDown() {
    #####: 2463:}
        -: 2464:
        -: 2465:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2466:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2467:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2467-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2468:}
        -: 2469:
        -: 2470:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2471:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2472:  Message value_message;
    %%%%%: 2472-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2472-block  1
call    5 never executed
    #####: 2473:  value_message << value;
    %%%%%: 2473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2474:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2474-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2474-block  1
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2474-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2474-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    $$$$$: 2474-block  4
call   22 never executed
    $$$$$: 2474-block  5
call   23 never executed
    $$$$$: 2474-block  6
call   24 never executed
    $$$$$: 2474-block  7
call   25 never executed
    $$$$$: 2474-block  8
call   26 never executed
    $$$$$: 2474-block  9
call   27 never executed
    #####: 2475:}
        -: 2476:
        -: 2477:namespace internal {
        -: 2478:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2479:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2480:                                    const std::string& message) {
        -: 2481:  // This function is a friend of UnitTest and as such has access to
        -: 2482:  // AddTestPartResult.
    #####: 2483:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2483-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2483-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2483-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 2483-block  3
call   18 never executed
    $$$$$: 2483-block  4
call   19 never executed
    $$$$$: 2483-block  5
call   20 never executed
    $$$$$: 2483-block  6
call   21 never executed
        -: 2484:      result_type,
        -: 2485:      nullptr,  // No info about the source file where the exception occurred.
        -: 2486:      -1,       // We have no info on which line caused the exception.
        -: 2487:      message,
        -: 2488:      "");  // No stack trace, either.
    #####: 2489:}
        -: 2490:
        -: 2491:}  // namespace internal
        -: 2492:
        -: 2493:// Google Test requires all tests in the same test suite to use the same test
        -: 2494:// fixture class.  This function checks if the current test has the
        -: 2495:// same fixture class as the first test in the current test suite.  If
        -: 2496:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2497:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 7 returned 100% blocks executed 21%
        7: 2498:bool Test::HasSameFixtureClass() {
        7: 2499:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        7: 2499-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 2500:  const TestSuite* const test_suite = impl->current_test_suite();
        7: 2500-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
        -: 2501:
        -: 2502:  // Info about the first test in the current test suite.
        7: 2503:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
        7: 2504:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
call    0 returned 7
call    1 returned 7
        7: 2505:  const char* const first_test_name = first_test_info->name();
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -: 2506:
        -: 2507:  // Info about the current test.
        7: 2508:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
        7: 2509:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
call    0 returned 7
call    1 returned 7
        7: 2510:  const char* const this_test_name = this_test_info->name();
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -: 2511:
        7: 2512:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 2513:    // Is the first test defined using TEST?
    #####: 2514:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2515:    // Is this test defined using TEST?
    #####: 2516:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2517:
    #####: 2518:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2518-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2518-block  1
branch  2 never executed
branch  3 never executed
        -: 2519:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2520:      // Tell the user how to fix this.
        -: 2521:
        -: 2522:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2523:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2524:      // the fixture IDs are different for the two tests.
    #####: 2525:      const char* const TEST_name =
    %%%%%: 2525-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2525-block  1
    %%%%%: 2525-block  2
        -: 2526:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2527:      const char* const TEST_F_name =
    %%%%%: 2527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2527-block  1
    %%%%%: 2527-block  2
        -: 2528:          first_is_TEST ? this_test_name : first_test_name;
        -: 2529:
    #####: 2530:      ADD_FAILURE()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2530-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2530-block  1
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2530-block  2
call   15 never executed
    $$$$$: 2530-block  3
call   16 never executed
    $$$$$: 2530-block  4
call   17 never executed
    $$$$$: 2530-block  5
call   18 never executed
    #####: 2531:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2531-block  0
call    0 never executed
    %%%%%: 2531-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2532:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2532-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2533:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2533-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2533-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 2533-block  2
call   13 never executed
    #####: 2534:          << ",\n"
    %%%%%: 2534-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2535:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2535-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2535-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2535-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2536:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2536-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2536-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2536-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2537:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2537-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2538:          << "case.";
    %%%%%: 2538-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2538-block  1
call    4 never executed
        -: 2539:    } else {
        -: 2540:      // Two fixture classes with the same name appear in two different
        -: 2541:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2542:      ADD_FAILURE()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2542-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2542-block  1
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2542-block  2
call   15 never executed
    $$$$$: 2542-block  3
call   16 never executed
    $$$$$: 2542-block  4
call   17 never executed
    $$$$$: 2542-block  5
call   18 never executed
    #####: 2543:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2543-block  0
call    0 never executed
    %%%%%: 2543-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2544:          << "class.  However, in test suite "
    %%%%%: 2544-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2545:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2545-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2545-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 2545-block  2
call   13 never executed
    #####: 2546:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2546-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2546-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2546-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2547:          << this_test_name << "\n"
    %%%%%: 2547-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2547-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2548:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2549:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2549-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2550:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2550-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2551:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2551-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2551-block  1
call    4 never executed
        -: 2552:    }
    #####: 2553:    return false;
    %%%%%: 2553-block  0
        -: 2554:  }
        -: 2555:
        7: 2556:  return true;
        7: 2556-block  0
        -: 2557:}
        -: 2558:
        -: 2559:#if GTEST_HAS_SEH
        -: 2560:
        -: 2561:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2562:// function returns its result via an output parameter pointer because VC++
        -: 2563:// prohibits creation of objects with destructors on stack in functions
        -: 2564:// using __try (see error C2712).
        -: 2565:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2566:                                              const char* location) {
        -: 2567:  Message message;
        -: 2568:  message << "SEH exception with code 0x" << std::setbase(16) <<
        -: 2569:    exception_code << std::setbase(10) << " thrown in " << location << ".";
        -: 2570:
        -: 2571:  return new std::string(message.GetString());
        -: 2572:}
        -: 2573:
        -: 2574:#endif  // GTEST_HAS_SEH
        -: 2575:
        -: 2576:namespace internal {
        -: 2577:
        -: 2578:#if GTEST_HAS_EXCEPTIONS
        -: 2579:
        -: 2580:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2581:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2582:                                             const char* location) {
    #####: 2583:  Message message;
    %%%%%: 2583-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2583-block  1
call    4 never executed
    $$$$$: 2583-block  2
call    5 never executed
    #####: 2584:  if (description != nullptr) {
    %%%%%: 2584-block  0
branch  0 never executed
branch  1 never executed
    #####: 2585:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2585-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2585-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 2586:  } else {
    #####: 2587:    message << "Unknown C++ exception";
    %%%%%: 2587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2588:  }
    #####: 2589:  message << " thrown in " << location << ".";
    %%%%%: 2589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2589-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2589-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 2590:
    #####: 2591:  return message.GetString();
    %%%%%: 2591-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2592:}
        -: 2593:
        -: 2594:static std::string PrintTestPartResultToString(
        -: 2595:    const TestPartResult& test_part_result);
        -: 2596:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2597:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2598:    const TestPartResult& failure)
    %%%%%: 2598-block  0
call    0 never executed
call    1 never executed
    #####: 2599:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2599-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 2599-block  1
call   13 never executed
    $$$$$: 2599-block  2
call   14 never executed
        -: 2600:
        -: 2601:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2602:
        -: 2603:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2604:// compiler rejects the code if they were declared static.
        -: 2605:
        -: 2606:// Runs the given method and handles SEH exceptions it throws, when
        -: 2607:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2608:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2609:// exceptions in the same function.  Therefore, we provide a separate
        -: 2610:// wrapper function for handling SEH exceptions.)
        -: 2611:template <class T, typename Result>
       38: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
      38*: 2631:  return (object->*method)();
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 64%
        1: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
       1*: 2631:  return (object->*method)();
        1: 2631-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 2631-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        1: 2631-block  2
        1: 2631-block  3
call   10 returned 1
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 62%
        2: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
       2*: 2631:  return (object->*method)();
        2: 2631-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%: 2631-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        2: 2631-block  2
        2: 2631-block  3
call   10 returned 2
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 7 returned 100% blocks executed 93%
        7: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
       7*: 2631:  return (object->*method)();
        7: 2631-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0
        7: 2631-block  1
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
    %%%%%: 2631-block  2
        7: 2631-block  3
call   10 returned 7
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 28 returned 100% blocks executed 100%
       28: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
       28: 2631:  return (object->*method)();
       28: 2631-block  0
call    0 returned 28
call    1 returned 28
call    2 returned 28
call    3 returned 28
branch  4 taken 21 (fallthrough)
branch  5 taken 7
       21: 2631-block  1
call    6 returned 21
call    7 returned 21
call    8 returned 21
call    9 returned 21
        7: 2631-block  2
       28: 2631-block  3
call   10 returned 28
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
        -: 2634:
        -: 2635:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2636:// exceptions, if they are supported; returns the 0-value for type
        -: 2637:// Result in case of an SEH exception.
        -: 2638:template <class T, typename Result>
       38: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
       38: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
       38: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    =====: 2676:      internal::ReportFailureInUnknownLocation(
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2679:    } catch (...) {  // NOLINT
    =====: 2680:      internal::ReportFailureInUnknownLocation(
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 15%
        1: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
        1: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2664-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
        1: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2667-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2670-block  1
call    2 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 2675-block  1
call    3 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2676-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2676-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2676-block  2
call   10 never executed
    $$$$$: 2676-block  3
call   11 never executed
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2679-block  1
call    2 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2680-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2680-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2680-block  2
call   10 never executed
    $$$$$: 2680-block  3
call   11 never executed
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2689-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call   10 never executed
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 15%
        2: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
        2: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2664-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
        2: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2667-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2670-block  1
call    2 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 2675-block  1
call    3 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2676-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2676-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2676-block  2
call   10 never executed
    $$$$$: 2676-block  3
call   11 never executed
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2679-block  1
call    2 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2680-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2680-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2680-block  2
call   10 never executed
    $$$$$: 2680-block  3
call   11 never executed
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2689-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call   10 never executed
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 7 returned 100% blocks executed 15%
        7: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
        7: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        7: 2664-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
        7: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        7: 2667-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2670-block  1
call    2 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 2675-block  1
call    3 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2676-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2676-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2676-block  2
call   10 never executed
    $$$$$: 2676-block  3
call   11 never executed
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2679-block  1
call    2 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2680-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2680-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2680-block  2
call   10 never executed
    $$$$$: 2680-block  3
call   11 never executed
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2689-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call   10 never executed
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 28 returned 100% blocks executed 15%
       28: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
       28: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       28: 2664-block  0
call    0 returned 28
call    1 returned 28
call    2 returned 28
call    3 returned 28
call    4 returned 28
branch  5 taken 28 (fallthrough)
branch  6 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
       28: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       28: 2667-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2670-block  1
call    2 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 2675-block  1
call    3 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2676-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2676-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2676-block  2
call   10 never executed
    $$$$$: 2676-block  3
call   11 never executed
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2679-block  1
call    2 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2680-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2680-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2680-block  2
call   10 never executed
    $$$$$: 2680-block  3
call   11 never executed
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2689-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call   10 never executed
        -: 2690:  }
        -: 2691:}
------------------
        -: 2692:
        -: 2693:}  // namespace internal
        -: 2694:
        -: 2695:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 7 returned 100% blocks executed 96%
        7: 2696:void Test::Run() {
       7*: 2697:  if (!HasSameFixtureClass()) return;
        7: 2697-block  0
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
    %%%%%: 2697-block  1
        -: 2698:
        7: 2699:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        7: 2699-block  0
call    0 returned 7
        7: 2700:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
        7: 2701:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 7
        -: 2702:  // We will run the test only if SetUp() was successful and didn't call
        -: 2703:  // GTEST_SKIP().
       7*: 2704:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0
        7: 2704-block  0
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0
        7: 2704-block  1
    %%%%%: 2704-block  2
        7: 2704-block  3
branch  6 taken 7 (fallthrough)
branch  7 taken 0
        7: 2705:    impl->os_stack_trace_getter()->UponLeavingGTest();
        7: 2705-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
        7: 2706:    internal::HandleExceptionsInMethodIfSupported(
call    0 returned 7
        -: 2707:        this, &Test::TestBody, "the test body");
        -: 2708:  }
        -: 2709:
        -: 2710:  // However, we want to clean up as much as possible.  Hence we will
        -: 2711:  // always call TearDown(), even if SetUp() or the test body has
        -: 2712:  // failed.
        7: 2713:  impl->os_stack_trace_getter()->UponLeavingGTest();
        7: 2713-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
        7: 2714:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 7
        -: 2715:      this, &Test::TearDown, "TearDown()");
        -: 2716:}
        -: 2717:
        -: 2718:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 15 returned 100% blocks executed 100%
       15: 2719:bool Test::HasFatalFailure() {
       15: 2720:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       15: 2720-block  0
call    0 returned 15
call    1 returned 15
call    2 returned 15
call    3 returned 15
call    4 returned 15
call    5 returned 15
call    6 returned 15
        -: 2721:}
        -: 2722:
        -: 2723:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2724:bool Test::HasNonfatalFailure() {
    #####: 2725:  return internal::GetUnitTestImpl()->current_test_result()->
    %%%%%: 2725-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2726:      HasNonfatalFailure();
call    0 never executed
call    1 never executed
        -: 2727:}
        -: 2728:
        -: 2729:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 15 returned 100% blocks executed 100%
       15: 2730:bool Test::IsSkipped() {
       15: 2731:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
       15: 2731-block  0
call    0 returned 15
call    1 returned 15
call    2 returned 15
call    3 returned 15
call    4 returned 15
call    5 returned 15
call    6 returned 15
        -: 2732:}
        -: 2733:
        -: 2734:// class TestInfo
        -: 2735:
        -: 2736:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2737:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 7 returned 100% blocks executed 43%
        7: 2738:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2739:                   const std::string& a_name, const char* a_type_param,
        -: 2740:                   const char* a_value_param,
        -: 2741:                   internal::CodeLocation a_code_location,
        -: 2742:                   internal::TypeId fixture_class_id,
        7: 2743:                   internal::TestFactoryBase* factory)
        7: 2743-block  0
call    0 returned 7
        -: 2744:    : test_suite_name_(a_test_suite_name),
        -: 2745:      name_(a_name),
    #####: 2746:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2746-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2746-block  1
call    4 never executed
    #####: 2747:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2747-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2747-block  1
call    4 never executed
        -: 2748:      location_(a_code_location),
        -: 2749:      fixture_class_id_(fixture_class_id),
        -: 2750:      should_run_(false),
        -: 2751:      is_disabled_(false),
        -: 2752:      matches_filter_(false),
        -: 2753:      is_in_another_shard_(false),
        -: 2754:      factory_(factory),
       7*: 2755:      result_() {}
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
branch  9 taken 7 (fallthrough)
branch 10 taken 0 (throw)
        7: 2755-block  0
call   11 returned 7
call   12 returned 7
call   13 returned 7
branch 14 taken 0 (fallthrough)
branch 15 taken 7
    %%%%%: 2755-block  1
call   16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 2755-block  2
        7: 2755-block  3
        7: 2755-block  4
call   21 returned 7
branch 22 taken 0 (fallthrough)
branch 23 taken 7
    %%%%%: 2755-block  5
call   24 never executed
        7: 2755-block  6
branch 25 taken 0 (fallthrough)
branch 26 taken 7
    %%%%%: 2755-block  7
call   27 never executed
        7: 2755-block  8
call   28 returned 7
call   29 returned 7
call   30 returned 7
branch 31 taken 0 (fallthrough)
branch 32 taken 7
    %%%%%: 2755-block  9
call   33 never executed
call   34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
    %%%%%: 2755-block 10
        7: 2755-block 11
        7: 2755-block 12
call   38 returned 7
branch 39 taken 0 (fallthrough)
branch 40 taken 7
    %%%%%: 2755-block 13
call   41 never executed
        7: 2755-block 14
branch 42 taken 0 (fallthrough)
branch 43 taken 7
    %%%%%: 2755-block 15
call   44 never executed
        7: 2755-block 16
call   45 returned 7
call   46 returned 7
call   47 returned 7
call   48 returned 7
branch 49 taken 7 (fallthrough)
branch 50 taken 0 (throw)
        7: 2755-block 17
call   51 returned 7
call   52 returned 7
call   53 returned 7
call   54 returned 7
call   55 returned 7
call   56 returned 7
call   57 returned 7
call   58 returned 7
call   59 returned 7
call   60 returned 7
call   61 returned 7
call   62 returned 7
call   63 returned 7
call   64 returned 7
call   65 returned 7
branch 66 taken 7 (fallthrough)
branch 67 taken 0 (throw)
        7: 2755-block 18
    $$$$$: 2755-block 19
branch 68 never executed
branch 69 never executed
    $$$$$: 2755-block 20
call   70 never executed
    $$$$$: 2755-block 21
branch 71 never executed
branch 72 never executed
    $$$$$: 2755-block 22
call   73 never executed
    $$$$$: 2755-block 23
branch 74 never executed
branch 75 never executed
    $$$$$: 2755-block 24
call   76 never executed
    $$$$$: 2755-block 25
branch 77 never executed
branch 78 never executed
    $$$$$: 2755-block 26
call   79 never executed
    $$$$$: 2755-block 27
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
    $$$$$: 2755-block 28
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
    $$$$$: 2755-block 29
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
    $$$$$: 2755-block 30
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
    $$$$$: 2755-block 31
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
        -: 2756:
        -: 2757:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 7 returned 100% blocks executed 100%
        7: 2758:TestInfo::~TestInfo() { delete factory_; }
        7: 2758-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7: 2758-block  1
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
call   11 returned 7
call   12 returned 7
call   13 returned 7
call   14 returned 7
call   15 returned 7
call   16 returned 7
call   17 returned 7
call   18 returned 7
call   19 returned 7
call   20 returned 7
call   21 returned 7
call   22 returned 7
        7: 2758-block  2
call   23 returned 7
call   24 returned 7
call   25 returned 7
call   26 returned 7
call   27 returned 7
call   28 returned 7
call   29 returned 7
call   30 returned 7
call   31 returned 7
call   32 returned 7
call   33 returned 7
call   34 returned 7
call   35 returned 7
call   36 returned 7
call   37 returned 7
call   38 returned 7
call   39 returned 7
call   40 returned 7
call   41 returned 7
call   42 returned 7
call   43 returned 7
call   44 returned 7
call   45 returned 7
call   46 returned 7
call   47 returned 7
call   48 returned 7
call   49 returned 7
call   50 returned 7
call   51 returned 7
call   52 returned 7
call   53 returned 7
        -: 2759:
        -: 2760:namespace internal {
        -: 2761:
        -: 2762:// Creates a new TestInfo object and registers it with Google Test;
        -: 2763:// returns the created object.
        -: 2764://
        -: 2765:// Arguments:
        -: 2766://
        -: 2767://   test_suite_name:  name of the test suite
        -: 2768://   name:             name of the test
        -: 2769://   type_param:       the name of the test's type parameter, or NULL if
        -: 2770://                     this is not a typed or a type-parameterized test.
        -: 2771://   value_param:      text representation of the test's value parameter,
        -: 2772://                     or NULL if this is not a value-parameterized test.
        -: 2773://   code_location:    code location where the test is defined
        -: 2774://   fixture_class_id: ID of the test fixture class
        -: 2775://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2776://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2777://   factory:          pointer to the factory that creates a test object.
        -: 2778://                     The newly created TestInfo instance will assume
        -: 2779://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 7 returned 100% blocks executed 61%
        7: 2780:TestInfo* MakeAndRegisterTestInfo(
        -: 2781:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2782:    const char* value_param, CodeLocation code_location,
        -: 2783:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2784:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2785:  TestInfo* const test_info =
        -: 2786:      new TestInfo(test_suite_name, name, type_param, value_param,
        7: 2787:                   code_location, fixture_class_id, factory);
        7: 2787-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 2787-block  1
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
branch 11 taken 7 (fallthrough)
branch 12 taken 0 (throw)
        7: 2787-block  2
call   13 returned 7
call   14 returned 7
call   15 returned 7
branch 16 taken 7 (fallthrough)
branch 17 taken 0 (throw)
        7: 2787-block  3
call   18 returned 7
branch 19 taken 7 (fallthrough)
branch 20 taken 0 (throw)
        7: 2787-block  4
call   21 returned 7
call   22 returned 7
branch 23 taken 7 (fallthrough)
branch 24 taken 0 (throw)
        7: 2787-block  5
call   25 returned 7
call   26 returned 7
call   27 returned 7
call   28 returned 7
call   29 returned 7
call   30 returned 7
call   31 returned 7
call   32 returned 7
call   33 returned 7
call   34 returned 7
    $$$$$: 2787-block  6
call   35 never executed
    $$$$$: 2787-block  7
call   36 never executed
    $$$$$: 2787-block  8
call   37 never executed
    $$$$$: 2787-block  9
call   38 never executed
    $$$$$: 2787-block 10
call   39 never executed
    $$$$$: 2787-block 11
call   40 never executed
    $$$$$: 2787-block 12
call   41 never executed
    $$$$$: 2787-block 13
call   42 never executed
    $$$$$: 2787-block 14
call   43 never executed
    $$$$$: 2787-block 15
call   44 never executed
    $$$$$: 2787-block 16
call   45 never executed
        7: 2788:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        7: 2789:  return test_info;
        7: 2789-block  0
        -: 2790:}
        -: 2791:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2792:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2793:                                CodeLocation code_location) {
    #####: 2794:  Message errors;
    %%%%%: 2794-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2794-block  1
call    5 never executed
        -: 2795:  errors
    #####: 2796:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2796-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2796-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2797:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2797-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2798:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2798-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2798-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2798-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2799:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2799-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2800:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2800-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2801:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2801-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2802:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2802-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2803:      << "test suites.";
    %%%%%: 2803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2804:
    #####: 2805:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2805-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2805-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2805-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 2805-block  3
call   19 never executed
    $$$$$: 2805-block  4
call   20 never executed
    $$$$$: 2805-block  5
call   21 never executed
    $$$$$: 2805-block  6
call   22 never executed
        -: 2806:                                          code_location.line)
    #####: 2807:                    << " " << errors.GetString();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2807-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2807-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2807-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2807-block  3
call   15 never executed
call   16 never executed
    $$$$$: 2807-block  4
call   17 never executed
    $$$$$: 2807-block  5
call   18 never executed
    #####: 2808:}
        -: 2809:}  // namespace internal
        -: 2810:
        -: 2811:namespace {
        -: 2812:
        -: 2813:// A predicate that checks the test name of a TestInfo against a known
        -: 2814:// value.
        -: 2815://
        -: 2816:// This is used for implementation of the TestSuite class only.  We put
        -: 2817:// it in the anonymous namespace to prevent polluting the outer
        -: 2818:// namespace.
        -: 2819://
        -: 2820:// TestNameIs is copyable.
        -: 2821:class TestNameIs {
        -: 2822: public:
        -: 2823:  // Constructor.
        -: 2824:  //
        -: 2825:  // TestNameIs has NO default constructor.
        -: 2826:  explicit TestNameIs(const char* name)
        -: 2827:      : name_(name) {}
        -: 2828:
        -: 2829:  // Returns true if and only if the test name of test_info matches name_.
        -: 2830:  bool operator()(const TestInfo * test_info) const {
        -: 2831:    return test_info && test_info->name() == name_;
        -: 2832:  }
        -: 2833:
        -: 2834: private:
        -: 2835:  std::string name_;
        -: 2836:};
        -: 2837:
        -: 2838:}  // namespace
        -: 2839:
        -: 2840:namespace internal {
        -: 2841:
        -: 2842:// This method expands all parameterized tests registered with macros TEST_P
        -: 2843:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2844:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 95%
        1: 2845:void UnitTestImpl::RegisterParameterizedTests() {
       1*: 2846:  if (!parameterized_tests_registered_) {
        1: 2846-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 2846-block  1
        1: 2846-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 2847:    parameterized_test_registry_.RegisterTests();
        1: 2847-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 2848:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 2849:    parameterized_tests_registered_ = true;
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 2850:  }
        1: 2851:}
        -: 2852:
        -: 2853:}  // namespace internal
        -: 2854:
        -: 2855:// Creates the test object, runs it, records its result, and then
        -: 2856:// deletes it.
function _ZN7testing8TestInfo3RunEv called 7 returned 100% blocks executed 96%
        7: 2857:void TestInfo::Run() {
       7*: 2858:  if (!should_run_) return;
        7: 2858-block  0
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
    %%%%%: 2858-block  1
        7: 2858-block  2
branch  3 taken 0 (fallthrough)
branch  4 taken 7
    %%%%%: 2858-block  3
        -: 2859:
        -: 2860:  // Tells UnitTest where to store test result.
        7: 2861:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        7: 2861-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 2862:  impl->set_current_test_info(this);
        7: 2862-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
        -: 2863:
        7: 2864:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 2864-block  0
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
        -: 2865:
        -: 2866:  // Notifies the unit test event listeners that a test is about to start.
        7: 2867:  repeater->OnTestStart(*this);
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0 (throw)
        -: 2868:
        7: 2869:  result_.set_start_timestamp(internal::GetTimeInMillis());
        7: 2869-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 2869-block  1
call    6 returned 7
        7: 2870:  internal::Timer timer;
call    0 returned 7
call    1 returned 7
        -: 2871:
        7: 2872:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 2872-block  0
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
call   11 returned 7
call   12 returned 7
branch 13 taken 7 (fallthrough)
branch 14 taken 0 (throw)
        -: 2873:
        -: 2874:  // Creates the test object.
       21: 2875:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
        7: 2876:      factory_, &internal::TestFactoryBase::CreateTest,
        7: 2876-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        -: 2877:      "the test fixture's constructor");
        -: 2878:
        -: 2879:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2880:  // GTEST_SKIP().
        -: 2881:  // Note that the object will not be null
       7*: 2882:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
        7: 2882-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 2882-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 0
        7: 2882-block  2
call    5 returned 7
branch  6 taken 7 (fallthrough)
branch  7 taken 0 (throw)
        7: 2882-block  3
branch  8 taken 7 (fallthrough)
branch  9 taken 0
        7: 2882-block  4
    %%%%%: 2882-block  5
        7: 2882-block  6
branch 10 taken 7 (fallthrough)
branch 11 taken 0
        -: 2883:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2884:    // exception handling code.
        7: 2885:    test->Run();
        7: 2885-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -: 2886:  }
        -: 2887:
        7: 2888:  if (test != nullptr) {
        7: 2888-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        -: 2889:    // Deletes the test object.
        7: 2890:    impl->os_stack_trace_getter()->UponLeavingGTest();
        7: 2890-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 2890-block  1
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
call   11 returned 7
call   12 returned 7
branch 13 taken 7 (fallthrough)
branch 14 taken 0 (throw)
        7: 2891:    internal::HandleExceptionsInMethodIfSupported(
        7: 2891-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -: 2892:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2893:  }
        -: 2894:
        7: 2895:  result_.set_elapsed_time(timer.Elapsed());
        7: 2895-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 2895-block  1
call    6 returned 7
        -: 2896:
        -: 2897:  // Notifies the unit test event listener that a test has just finished.
        7: 2898:  repeater->OnTestEnd(*this);
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0 (throw)
        -: 2899:
        -: 2900:  // Tells UnitTest to stop associating assertion results to this
        -: 2901:  // test.
        7: 2902:  impl->set_current_test_info(nullptr);
        7: 2902-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
        -: 2903:}
        -: 2904:
        -: 2905:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2906:void TestInfo::Skip() {
    #####: 2907:  if (!should_run_) return;
    %%%%%: 2907-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2907-block  1
    %%%%%: 2907-block  2
branch  3 never executed
branch  4 never executed
    %%%%%: 2907-block  3
        -: 2908:
    #####: 2909:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2910:  impl->set_current_test_info(this);
    %%%%%: 2910-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2911:
    #####: 2912:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2912-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2913:
        -: 2914:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2915:  repeater->OnTestStart(*this);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2916:
    #####: 2917:  const TestPartResult test_part_result =
    %%%%%: 2917-block  0
call    0 never executed
    #####: 2918:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2918-block  0
call    8 never executed
    #####: 2919:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2919-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2919-block  1
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2920:      test_part_result);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2921:
        -: 2922:  // Notifies the unit test event listener that a test has just finished.
    #####: 2923:  repeater->OnTestEnd(*this);
    %%%%%: 2923-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2924:  impl->set_current_test_info(nullptr);
    %%%%%: 2924-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2925:}
        -: 2926:
        -: 2927:// class TestSuite
        -: 2928:
        -: 2929:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2930:int TestSuite::successful_test_count() const {
        1: 2931:  return CountIf(test_info_list_, TestPassed);
        1: 2931-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        -: 2932:}
        -: 2933:
        -: 2934:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 2935:int TestSuite::skipped_test_count() const {
        1: 2936:  return CountIf(test_info_list_, TestSkipped);
        1: 2936-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        -: 2937:}
        -: 2938:
        -: 2939:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 2 returned 100% blocks executed 100%
        2: 2940:int TestSuite::failed_test_count() const {
        2: 2941:  return CountIf(test_info_list_, TestFailed);
        2: 2941-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
        -: 2942:}
        -: 2943:
        -: 2944:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2945:int TestSuite::reportable_disabled_test_count() const {
        1: 2946:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2946-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        -: 2947:}
        -: 2948:
        -: 2949:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2950:int TestSuite::disabled_test_count() const {
    #####: 2951:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2951-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2952:}
        -: 2953:
        -: 2954:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2955:int TestSuite::reportable_test_count() const {
    #####: 2956:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2956-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2957:}
        -: 2958:
        -: 2959:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 4 returned 100% blocks executed 100%
        4: 2960:int TestSuite::test_to_run_count() const {
        4: 2961:  return CountIf(test_info_list_, ShouldRunTest);
        4: 2961-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
call    3 returned 4
call    4 returned 4
call    5 returned 4
        -: 2962:}
        -: 2963:
        -: 2964:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 8 returned 100% blocks executed 100%
        8: 2965:int TestSuite::total_test_count() const {
        8: 2966:  return static_cast<int>(test_info_list_.size());
        8: 2966-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
call    4 returned 8
call    5 returned 8
        -: 2967:}
        -: 2968:
        -: 2969:// Creates a TestSuite with the given name.
        -: 2970://
        -: 2971:// Arguments:
        -: 2972://
        -: 2973://   a_name:       name of the test suite
        -: 2974://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2975://                 this is not a typed or a type-parameterized test suite.
        -: 2976://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2977://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 1 returned 100% blocks executed 57%
        1: 2978:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2979:                     internal::SetUpTestSuiteFunc set_up_tc,
        1: 2980:                     internal::TearDownTestSuiteFunc tear_down_tc)
        1: 2980-block  0
call    0 returned 1
call    1 returned 1
        -: 2981:    : name_(a_name),
    #####: 2982:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2982-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2982-block  1
call    4 never executed
        -: 2983:      set_up_tc_(set_up_tc),
        -: 2984:      tear_down_tc_(tear_down_tc),
        -: 2985:      should_run_(false),
        -: 2986:      start_timestamp_(0),
       1*: 2987:      elapsed_time_(0) {}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 2987-block  0
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
branch 15 taken 0 (fallthrough)
branch 16 taken 1
    %%%%%: 2987-block  1
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2987-block  2
        1: 2987-block  3
        1: 2987-block  4
call   22 returned 1
branch 23 taken 0 (fallthrough)
branch 24 taken 1
    %%%%%: 2987-block  5
call   25 never executed
        1: 2987-block  6
branch 26 taken 0 (fallthrough)
branch 27 taken 1
    %%%%%: 2987-block  7
call   28 never executed
        1: 2987-block  8
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
call   34 returned 1
call   35 returned 1
call   36 returned 1
call   37 returned 1
call   38 returned 1
call   39 returned 1
call   40 returned 1
call   41 returned 1
call   42 returned 1
call   43 returned 1
call   44 returned 1
call   45 returned 1
call   46 returned 1
call   47 returned 1
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
call   53 returned 1
call   54 returned 1
call   55 returned 1
call   56 returned 1
call   57 returned 1
call   58 returned 1
call   59 returned 1
call   60 returned 1
branch 61 taken 1 (fallthrough)
branch 62 taken 0 (throw)
        1: 2987-block  9
    $$$$$: 2987-block 10
call   63 never executed
    $$$$$: 2987-block 11
call   64 never executed
    $$$$$: 2987-block 12
branch 65 never executed
branch 66 never executed
    $$$$$: 2987-block 13
call   67 never executed
    $$$$$: 2987-block 14
branch 68 never executed
branch 69 never executed
    $$$$$: 2987-block 15
call   70 never executed
    $$$$$: 2987-block 16
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
    $$$$$: 2987-block 17
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
    $$$$$: 2987-block 18
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
    $$$$$: 2987-block 19
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
        -: 2988:
        -: 2989:// Destructor of TestSuite.
        3: 2990:TestSuite::~TestSuite() {
        -: 2991:  // Deletes every Test in the collection.
        1: 2992:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 2993:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 1 returned 100% blocks executed 100%
        1: 2990:TestSuite::~TestSuite() {
        -: 2991:  // Deletes every Test in the collection.
        -: 2992:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        1: 2993:}
        1: 2993-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 1 returned 100% blocks executed 100%
        2: 2990:TestSuite::~TestSuite() {
        1: 2990-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
        -: 2991:  // Deletes every Test in the collection.
        1: 2992:  ForEach(test_info_list_, internal::Delete<TestInfo>);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 2993:}
------------------
        -: 2994:
        -: 2995:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2996:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2997:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2998:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2998-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 2999:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2999-block  0
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    %%%%%: 2999-block  1
    %%%%%: 2999-block  2
        -: 3000:}
        -: 3001:
        -: 3002:// Returns the i-th test among all the tests. i can range from 0 to
        -: 3003:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 7 returned 100% blocks executed 93%
        7: 3004:TestInfo* TestSuite::GetMutableTestInfo(int i) {
        7: 3005:  const int index = GetElementOr(test_indices_, i, -1);
        7: 3005-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
       7*: 3006:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 3006-block  0
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
    %%%%%: 3006-block  1
        7: 3006-block  2
        -: 3007:}
        -: 3008:
        -: 3009:// Adds a test to this test suite.  Will delete the test upon
        -: 3010:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 7 returned 100% blocks executed 94%
        7: 3011:void TestSuite::AddTestInfo(TestInfo* test_info) {
        7: 3012:  test_info_list_.push_back(test_info);
        7: 3012-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
        7: 3013:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
branch 10 taken 7 (fallthrough)
branch 11 taken 0 (throw)
        7: 3013-block  0
call   12 returned 7
    $$$$$: 3013-block  1
call   13 never executed
        7: 3014:}
        -: 3015:
        -: 3016:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 1 returned 100% blocks executed 77%
        1: 3017:void TestSuite::Run() {
       1*: 3018:  if (!should_run_) return;
        1: 3018-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3018-block  1
        1: 3018-block  2
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%: 3018-block  3
        -: 3019:
        1: 3020:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 3020-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3021:  impl->set_current_test_suite(this);
        1: 3021-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 3022:
        1: 3023:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3023-block  0
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
        -: 3024:
        -: 3025:  // Call both legacy and the new API
        1: 3026:  repeater->OnTestSuiteStart(*this);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        -: 3027://  Legacy API is deprecated but still available
        -: 3028:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3029:  repeater->OnTestCaseStart(*this);
        1: 3029-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        -: 3030:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3031:
        1: 3032:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3032-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3032-block  1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1: 3033:  internal::HandleExceptionsInMethodIfSupported(
        1: 3033-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3034:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3035:
        1: 3036:  const bool skip_all = ad_hoc_test_result().Failed();
        1: 3036-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        -: 3037:
        1: 3038:  start_timestamp_ = internal::GetTimeInMillis();
        1: 3038-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3038-block  1
call    5 returned 1
call    6 returned 1
        1: 3039:  internal::Timer timer;
call    0 returned 1
call    1 returned 1
        8: 3040:  for (int i = 0; i < total_test_count(); i++) {
        8: 3040-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
branch  4 taken 7 (fallthrough)
branch  5 taken 1
        7: 3040-block  1
        7: 3041:    if (skip_all) {
        7: 3041-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####: 3042:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3042-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3042-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 3043:    } else {
        7: 3044:      GetMutableTestInfo(i)->Run();
        7: 3044-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 3044-block  1
call    6 returned 7
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0 (throw)
        -: 3045:    }
       7*: 3046:    if (GTEST_FLAG_GET(fail_fast) &&
        7: 3046-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%: 3046-block  1
        7: 3046-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    %%%%%: 3046-block  3
        7: 3046-block  4
        7: 3046-block  5
branch  4 taken 0 (fallthrough)
branch  5 taken 7
    #####: 3047:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3047-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3047-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3047-block  2
branch 12 never executed
branch 13 never executed
    #####: 3048:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3048-block  0
    %%%%%: 3048-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3048-block  2
    #####: 3049:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3049-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3049-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 3050:      }
    #####: 3051:      break;
    %%%%%: 3051-block  0
        -: 3052:    }
        -: 3053:  }
        1: 3054:  elapsed_time_ = timer.Elapsed();
        1: 3054-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3054-block  1
call    5 returned 1
call    6 returned 1
        -: 3055:
        1: 3056:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3056-block  0
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1: 3057:  internal::HandleExceptionsInMethodIfSupported(
        1: 3057-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3058:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3059:
        -: 3060:  // Call both legacy and the new API
        1: 3061:  repeater->OnTestSuiteEnd(*this);
        1: 3061-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        -: 3062://  Legacy API is deprecated but still available
        -: 3063:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3064:  repeater->OnTestCaseEnd(*this);
        1: 3064-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        -: 3065:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3066:
        1: 3067:  impl->set_current_test_suite(nullptr);
        1: 3067-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 3068:}
        -: 3069:
        -: 3070:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3071:void TestSuite::Skip() {
    #####: 3072:  if (!should_run_) return;
    %%%%%: 3072-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3072-block  1
    %%%%%: 3072-block  2
branch  5 never executed
branch  6 never executed
    %%%%%: 3072-block  3
        -: 3073:
    #####: 3074:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3074-block  0
call    0 never executed
    #####: 3075:  impl->set_current_test_suite(this);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 3076:
    #####: 3077:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 3078:
        -: 3079:  // Call both legacy and the new API
    #####: 3080:  repeater->OnTestSuiteStart(*this);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 3081://  Legacy API is deprecated but still available
        -: 3082:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3083:  repeater->OnTestCaseStart(*this);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 3084:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3085:
    #####: 3086:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3086-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3087:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3087-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 3088:  }
        -: 3089:
        -: 3090:  // Call both legacy and the new API
    #####: 3091:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3091-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 3092:  // Legacy API is deprecated but still available
        -: 3093:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3094:  repeater->OnTestCaseEnd(*this);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 3095:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3096:
    #####: 3097:  impl->set_current_test_suite(nullptr);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 3098:}
        -: 3099:
        -: 3100:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 1 returned 100% blocks executed 100%
        1: 3101:void TestSuite::ClearResult() {
        1: 3102:  ad_hoc_test_result_.Clear();
        1: 3102-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 3103:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 3104:}
        -: 3105:
        -: 3106:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3107:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3108:  Shuffle(random, &test_indices_);
    %%%%%: 3108-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3109:}
        -: 3110:
        -: 3111:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 3112:void TestSuite::UnshuffleTests() {
        8: 3113:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3113-block  0
        8: 3113-block  1
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
branch  4 taken 7 (fallthrough)
branch  5 taken 1
        7: 3114:    test_indices_[i] = static_cast<int>(i);
        7: 3114-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        -: 3115:  }
        1: 3116:}
        -: 3117:
        -: 3118:// Formats a countable noun.  Depending on its quantity, either the
        -: 3119:// singular form or the plural form is used. e.g.
        -: 3120://
        -: 3121:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3122:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 7 returned 100% blocks executed 72%
        7: 3123:static std::string FormatCountableNoun(int count,
        -: 3124:                                       const char * singular_form,
        -: 3125:                                       const char * plural_form) {
       14: 3126:  return internal::StreamableToString(count) + " " +
        7: 3126-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7: 3126-block  1
call    7 returned 7
        7: 3126-block  2
call    8 returned 7
call    9 returned 7
call   10 returned 7
call   11 returned 7
    $$$$$: 3126-block  3
call   12 never executed
    $$$$$: 3126-block  4
call   13 never executed
    $$$$$: 3126-block  5
call   14 never executed
    $$$$$: 3126-block  6
call   15 never executed
       21: 3127:      (count == 1 ? singular_form : plural_form);
        7: 3127-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2: 3127-block  1
        5: 3127-block  2
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -: 3128:}
        -: 3129:
        -: 3130:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3131:static std::string FormatTestCount(int test_count) {
        3: 3132:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3132-block  0
call    0 returned 3
call    1 returned 3
        -: 3133:}
        -: 3134:
        -: 3135:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3136:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3137:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3137-block  0
call    0 returned 2
call    1 returned 2
        -: 3138:}
        -: 3139:
        -: 3140:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3141:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3142:// to "Failure", as the user usually doesn't care about the difference
        -: 3143:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3144:static const char * TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3145:  switch (type) {
    %%%%%: 3145-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3146:    case TestPartResult::kSkip:
    #####: 3147:      return "Skipped\n";
    %%%%%: 3147-block  0
    #####: 3148:    case TestPartResult::kSuccess:
    #####: 3149:      return "Success";
    %%%%%: 3149-block  0
        -: 3150:
    #####: 3151:    case TestPartResult::kNonFatalFailure:
        -: 3152:    case TestPartResult::kFatalFailure:
        -: 3153:#ifdef _MSC_VER
        -: 3154:      return "error: ";
        -: 3155:#else
    #####: 3156:      return "Failure\n";
    %%%%%: 3156-block  0
        -: 3157:#endif
    #####: 3158:    default:
    #####: 3159:      return "Unknown result type";
    %%%%%: 3159-block  0
        -: 3160:  }
        -: 3161:}
        -: 3162:
        -: 3163:namespace internal {
        -: 3164:namespace {
        -: 3165:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3166:}  // namespace
        -: 3167:
        -: 3168:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3169:static std::string PrintTestPartResultToString(
        -: 3170:    const TestPartResult& test_part_result) {
    #####: 3171:  return (Message()
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3171-block  0
call    3 never executed
    $$$$$: 3171-block  1
call    4 never executed
    #####: 3172:          << internal::FormatFileLocation(test_part_result.file_name(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3172-block  0
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 3172-block  1
call   10 never executed
    $$$$$: 3172-block  2
call   11 never executed
    #####: 3173:                                          test_part_result.line_number())
    %%%%%: 3173-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3174:          << " " << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3174-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3174-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
    $$$$$: 3174-block  2
call   14 never executed
    #####: 3175:          << test_part_result.message()).GetString();
    %%%%%: 3175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3175-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3175-block  2
call   12 never executed
    $$$$$: 3175-block  3
call   13 never executed
        -: 3176:}
        -: 3177:
        -: 3178:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3179:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        -: 3180:  const std::string& result =
    #####: 3181:      PrintTestPartResultToString(test_part_result);
    %%%%%: 3181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3181-block  1
call    4 never executed
    $$$$$: 3181-block  2
call    5 never executed
    #####: 3182:  printf("%s\n", result.c_str());
    %%%%%: 3182-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3182-block  1
    %%%%%: 3182-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3183:  fflush(stdout);
    %%%%%: 3183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3184:  // If the test program runs in Visual Studio or a debugger, the
        -: 3185:  // following statements add the test part result message to the Output
        -: 3186:  // window such that the user can double-click on it to jump to the
        -: 3187:  // corresponding source code location; otherwise they do nothing.
        -: 3188:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3189:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3190:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3191:  // want the same message printed twice.
        -: 3192:  ::OutputDebugStringA(result.c_str());
        -: 3193:  ::OutputDebugStringA("\n");
        -: 3194:#endif
    #####: 3195:}
        -: 3196:
        -: 3197:// class PrettyUnitTestResultPrinter
        -: 3198:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3199:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3200:
        -: 3201:// Returns the character attribute for the given color.
        -: 3202:static WORD GetColorAttribute(GTestColor color) {
        -: 3203:  switch (color) {
        -: 3204:    case GTestColor::kRed:
        -: 3205:      return FOREGROUND_RED;
        -: 3206:    case GTestColor::kGreen:
        -: 3207:      return FOREGROUND_GREEN;
        -: 3208:    case GTestColor::kYellow:
        -: 3209:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3210:    default:           return 0;
        -: 3211:  }
        -: 3212:}
        -: 3213:
        -: 3214:static int GetBitOffset(WORD color_mask) {
        -: 3215:  if (color_mask == 0) return 0;
        -: 3216:
        -: 3217:  int bitOffset = 0;
        -: 3218:  while ((color_mask & 1) == 0) {
        -: 3219:    color_mask >>= 1;
        -: 3220:    ++bitOffset;
        -: 3221:  }
        -: 3222:  return bitOffset;
        -: 3223:}
        -: 3224:
        -: 3225:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3226:  // Let's reuse the BG
        -: 3227:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3228:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3229:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3230:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3231:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3232:
        -: 3233:  WORD new_color =
        -: 3234:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3235:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3236:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3237:
        -: 3238:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3239:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3240:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3241:  }
        -: 3242:  return new_color;
        -: 3243:}
        -: 3244:
        -: 3245:#else
        -: 3246:
        -: 3247:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3248:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3249:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3250:  switch (color) {
    %%%%%: 3250-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3251:    case GTestColor::kRed:
    #####: 3252:      return "1";
    %%%%%: 3252-block  0
    #####: 3253:    case GTestColor::kGreen:
    #####: 3254:      return "2";
    %%%%%: 3254-block  0
    #####: 3255:    case GTestColor::kYellow:
    #####: 3256:      return "3";
    %%%%%: 3256-block  0
    #####: 3257:    default:
    #####: 3258:      return nullptr;
    %%%%%: 3258-block  0
        -: 3259:  }
        -: 3260:}
        -: 3261:
        -: 3262:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3263:
        -: 3264:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 37%
        1: 3265:bool ShouldUseColor(bool stdout_is_tty) {
        2: 3266:  std::string c = GTEST_FLAG_GET(color);
        1: 3266-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3266-block  1
call    4 returned 1
        1: 3267:  const char* const gtest_color = c.c_str();
        1: 3267-block  0
call    0 returned 1
        -: 3268:
        1: 3269:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 3270:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3271:    // On Windows the TERM variable is usually not set, but the
        -: 3272:    // console there does support colors.
        -: 3273:    return stdout_is_tty;
        -: 3274:#else
        -: 3275:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3276:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3276-block  0
call    0 never executed
        -: 3277:    const bool term_supports_color =
    #####: 3278:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3279:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3279-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3280:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 3280-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3281:        String::CStringEquals(term, "screen") ||
    %%%%%: 3281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3282:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 3282-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3283:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3284:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 3284-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3285:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3286:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 3286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3287:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3287-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3287-block  1
    %%%%%: 3287-block  2
    #####: 3288:        String::CStringEquals(term, "cygwin");
    %%%%%: 3288-block  0
call    0 never executed
    #####: 3289:    return stdout_is_tty && term_supports_color;
    %%%%%: 3289-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3289-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3289-block  2
    %%%%%: 3289-block  3
    %%%%%: 3289-block  4
        -: 3290:#endif  // GTEST_OS_WINDOWS
        -: 3291:  }
        -: 3292:
        2: 3293:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3293-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 3294:      String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3294-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       3*: 3295:      String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3295-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3295-block  1
        1: 3295-block  2
        2: 3296:      String::CStringEquals(gtest_color, "1");
        1: 3296-block  0
call    0 returned 1
        1: 3296-block  1
        -: 3297:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3298:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3299:  // be conservative.
        -: 3300:}
        -: 3301:
        -: 3302:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3303:// cannot simply emit special characters and have the terminal change colors.
        -: 3304:// This routine must actually emit the characters rather than return a string
        -: 3305:// that would be colored when printed, as can be done on Linux.
        -: 3306:
        -: 3307:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 21 returned 100% blocks executed 49%
       21: 3308:static void ColoredPrintf(GTestColor color, const char *fmt, ...) {
       21: 3309:  va_list args;
       21: 3309-block  0
call    0 returned 21
       21: 3310:  va_start(args, fmt);
        -: 3311:
        -: 3312:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \
        -: 3313:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)
        -: 3314:  const bool use_color = AlwaysFalse();
        -: 3315:#else
        -: 3316:  static const bool in_color_mode =
       21: 3317:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
branch  0 taken 1 (fallthrough)
branch  1 taken 20
        1: 3317-block  0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3317-block  1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3317-block  2
call   10 returned 1
    $$$$$: 3317-block  3
branch 11 never executed
branch 12 never executed
    $$$$$: 3317-block  4
call   13 never executed
      21*: 3318:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       21: 3318-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 21
    %%%%%: 3318-block  1
       21: 3318-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 21
    %%%%%: 3318-block  3
branch  4 never executed
branch  5 never executed
    %%%%%: 3318-block  4
       21: 3318-block  5
        -: 3319:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS
        -: 3320:
       21: 3321:  if (!use_color) {
       21: 3321-block  0
branch  0 taken 21 (fallthrough)
branch  1 taken 0
      21*: 3322:    vprintf(fmt, args);
       21: 3322-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 21
    %%%%%: 3322-block  1
       21: 3322-block  2
call    2 returned 21
branch  3 taken 21 (fallthrough)
branch  4 taken 0 (throw)
       21: 3323:    va_end(args);
       21: 3324:    return;
       21: 3324-block  0
        -: 3325:  }
        -: 3326:
        -: 3327:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3328:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3329:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3330:
        -: 3331:  // Gets the current text color.
        -: 3332:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3333:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3334:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3335:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3336:
        -: 3337:  // We need to flush the stream buffers into the console before each
        -: 3338:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3339:  // printed but has not yet reached the console.
        -: 3340:  fflush(stdout);
        -: 3341:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3342:
        -: 3343:  vprintf(fmt, args);
        -: 3344:
        -: 3345:  fflush(stdout);
        -: 3346:  // Restores the text color.
        -: 3347:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3348:#else
    #####: 3349:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3349-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3349-block  1
    %%%%%: 3349-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3350:  vprintf(fmt, args);
    %%%%%: 3350-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3350-block  1
    %%%%%: 3350-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3351:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3351-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3351-block  1
    %%%%%: 3351-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3352:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3353:  va_end(args);
    %%%%%: 3353-block  0
        -: 3354:}
        -: 3355:
        -: 3356:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3357:// output to label the type parameter and value parameter for a test.
        -: 3358:static const char kTypeParamLabel[] = "TypeParam";
        -: 3359:static const char kValueParamLabel[] = "GetParam()";
        -: 3360:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3361:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3362:  const char* const type_param = test_info.type_param();
    %%%%%: 3362-block  0
call    0 never executed
call    1 never executed
    #####: 3363:  const char* const value_param = test_info.value_param();
call    0 never executed
call    1 never executed
        -: 3364:
    #####: 3365:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3365-block  0
branch  2 never executed
branch  3 never executed
    #####: 3366:    printf(", where ");
    %%%%%: 3366-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3366-block  1
    %%%%%: 3366-block  2
call    2 never executed
    #####: 3367:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3368:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3368-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3368-block  1
    %%%%%: 3368-block  2
call    2 never executed
    #####: 3369:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3369-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 3369-block  1
    %%%%%: 3369-block  2
call    4 never executed
        -: 3370:    }
    #####: 3371:    if (value_param != nullptr) {
    %%%%%: 3371-block  0
branch  0 never executed
branch  1 never executed
    #####: 3372:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3372-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3372-block  1
    %%%%%: 3372-block  2
call    2 never executed
        -: 3373:    }
        -: 3374:  }
    #####: 3375:}
        -: 3376:
        -: 3377:// This class implements the TestEventListener interface.
        -: 3378://
        -: 3379:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3380:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3381: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC2Ev called 1 returned 100% blocks executed 100%
        1: 3382:  PrettyUnitTestResultPrinter() {}
        1: 3382-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 14 returned 100% blocks executed 75%
       14: 3383:  static void PrintTestName(const char* test_suite, const char* test) {
      14*: 3384:    printf("%s.%s", test_suite, test);
       14: 3384-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    %%%%%: 3384-block  1
       14: 3384-block  2
call    2 returned 14
       14: 3385:  }
        -: 3386:
        -: 3387:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3388:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3389:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3390:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3391:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3392:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3393:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3394:#else
        -: 3395:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3396:#endif  // OnTestCaseStart
        -: 3397:
        -: 3398:  void OnTestStart(const TestInfo& test_info) override;
        -: 3399:
        -: 3400:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3401:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3402:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3403:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3404:#else
        -: 3405:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3406:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3407:
        -: 3408:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3409:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3410:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3411:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3412:
        -: 3413: private:
        -: 3414:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3415:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3416:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3417:};
        -: 3418:
        -: 3419:  // Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 60%
        1: 3420:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3421:    const UnitTest& unit_test, int iteration) {
        1: 3422:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3422-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3423:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3423-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3423-block  1
    %%%%%: 3423-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3424:
        2: 3425:  std::string f = GTEST_FLAG_GET(filter);
        1: 3425-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3425-block  1
call    4 returned 1
    $$$$$: 3425-block  2
call    5 never executed
        1: 3426:  const char* const filter = f.c_str();
        1: 3426-block  0
call    0 returned 1
        -: 3427:
        -: 3428:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3429:  // tests may be skipped.
        1: 3430:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3431:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3431-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3432:                  filter);
        -: 3433:  }
        -: 3434:
        1: 3435:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3435-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3435-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3436:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3436-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3437:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3437-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3438:                  static_cast<int>(shard_index) + 1,
        -: 3439:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3440:  }
        -: 3441:
       1*: 3442:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3442-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3442-block  1
        1: 3442-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 3443:    ColoredPrintf(GTestColor::kYellow,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3444:                  "Note: Randomizing tests' orders with a seed of %d .\n",
    #####: 3445:                  unit_test.random_seed());
    %%%%%: 3445-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3446:  }
        -: 3447:
        1: 3448:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3448-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       2*: 3449:  printf("Running %s from %s.\n",
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 3449-block  0
        1: 3449-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        2: 3450:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 3450-block  0
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3450-block  1
call   10 returned 1
        1: 3450-block  2
call   11 returned 1
call   12 returned 1
    $$$$$: 3450-block  3
call   13 never executed
    $$$$$: 3450-block  4
call   14 never executed
        2: 3451:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3451-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 3451-block  1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3451-block  2
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 3451-block  3
call   13 never executed
    $$$$$: 3451-block  4
call   14 never executed
        1: 3452:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3453:}
        -: 3454:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 83%
        1: 3455:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3456:    const UnitTest& /*unit_test*/) {
        1: 3457:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3457-block  0
call    0 returned 1
       1*: 3458:  printf("Global test environment set-up.\n");
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3458-block  0
        1: 3458-block  1
call    2 returned 1
        1: 3459:  fflush(stdout);
call    0 returned 1
        1: 3460:}
        -: 3461:
        -: 3462:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 69%
        1: 3463:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        1: 3464:  const std::string counts =
        1: 3464-block  0
call    0 returned 1
        2: 3465:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3465-block  0
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 3465-block  1
call    9 returned 1
    $$$$$: 3465-block  2
call   10 never executed
        1: 3466:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3466-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*: 3467:  printf("%s from %s", counts.c_str(), test_case.name());
        1: 3467-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%: 3467-block  1
        1: 3467-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3468:  if (test_case.type_param() == nullptr) {
        1: 3468-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 3469:    printf("\n");
        1: 3469-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3470:  } else {
    #####: 3471:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3471-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3471-block  1
    %%%%%: 3471-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 3472:  }
        1: 3473:  fflush(stdout);
        1: 3473-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3474:}
        -: 3475:#else
        -: 3476:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3477:    const TestSuite& test_suite) {
        -: 3478:  const std::string counts =
        -: 3479:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3480:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3481:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3482:  if (test_suite.type_param() == nullptr) {
        -: 3483:    printf("\n");
        -: 3484:  } else {
        -: 3485:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3486:  }
        -: 3487:  fflush(stdout);
        -: 3488:}
        -: 3489:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3490:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 7 returned 100% blocks executed 100%
        7: 3491:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
        7: 3492:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
        7: 3492-block  0
call    0 returned 7
        7: 3493:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        7: 3494:  printf("\n");
call    0 returned 7
        7: 3495:  fflush(stdout);
call    0 returned 7
        7: 3496:}
        -: 3497:
        -: 3498:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3499:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3500:    const TestPartResult& result) {
    #####: 3501:  switch (result.type()) {
    %%%%%: 3501-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3502:    // If the test part succeeded, we don't need to do anything.
    #####: 3503:    case TestPartResult::kSuccess:
    #####: 3504:      return;
    %%%%%: 3504-block  0
    #####: 3505:    default:
        -: 3506:      // Print failure message from the assertion
        -: 3507:      // (e.g. expected this and got that).
    #####: 3508:      PrintTestPartResult(result);
    %%%%%: 3508-block  0
call    0 never executed
    #####: 3509:      fflush(stdout);
call    0 never executed
        -: 3510:  }
        -: 3511:}
        -: 3512:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 7 returned 100% blocks executed 69%
        7: 3513:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
        7: 3514:  if (test_info.result()->Passed()) {
        7: 3514-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0
        7: 3515:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
        7: 3515-block  0
call    0 returned 7
    #####: 3516:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3516-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3517:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3517-block  0
call    0 never executed
        -: 3518:  } else {
    #####: 3519:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3519-block  0
call    0 never executed
        -: 3520:  }
        7: 3521:  PrintTestName(test_info.test_suite_name(), test_info.name());
        7: 3521-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        7: 3522:  if (test_info.result()->Failed())
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 0 (fallthrough)
branch  5 taken 7
    #####: 3523:    PrintFullTestCommentIfPresent(test_info);
    %%%%%: 3523-block  0
call    0 never executed
        -: 3524:
       7*: 3525:  if (GTEST_FLAG_GET(print_time)) {
        7: 3525-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%: 3525-block  1
        7: 3525-block  2
branch  2 taken 7 (fallthrough)
branch  3 taken 0
      14*: 3526:    printf(" (%s ms)\n", internal::StreamableToString(
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
branch  4 taken 0 (fallthrough)
branch  5 taken 7
    %%%%%: 3526-block  0
        7: 3526-block  1
call    6 returned 7
branch  7 taken 7 (fallthrough)
branch  8 taken 0 (throw)
        7: 3526-block  2
call    9 returned 7
call   10 returned 7
    $$$$$: 3526-block  3
call   11 never executed
    $$$$$: 3526-block  4
call   12 never executed
       21: 3527:           test_info.result()->elapsed_time()).c_str());
        7: 3527-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
        7: 3527-block  1
call    7 returned 7
call    8 returned 7
    $$$$$: 3527-block  2
call    9 never executed
        -: 3528:  } else {
    #####: 3529:    printf("\n");
    %%%%%: 3529-block  0
call    0 never executed
        -: 3530:  }
        7: 3531:  fflush(stdout);
        7: 3531-block  0
call    0 returned 7
        7: 3532:}
        -: 3533:
        -: 3534:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 74%
        1: 3535:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       1*: 3536:  if (!GTEST_FLAG_GET(print_time)) return;
        1: 3536-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3536-block  1
        1: 3536-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 3536-block  3
        -: 3537:
        1: 3538:  const std::string counts =
        1: 3538-block  0
call    0 returned 1
        2: 3539:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3539-block  0
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 3539-block  1
call    9 returned 1
    $$$$$: 3539-block  2
call   10 never executed
        1: 3540:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3540-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*: 3541:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%: 3541-block  0
        1: 3541-block  1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        2: 3542:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        1: 3542-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3542-block  1
call   10 returned 1
        1: 3542-block  2
call   11 returned 1
call   12 returned 1
call   13 returned 1
    $$$$$: 3542-block  3
call   14 never executed
    $$$$$: 3542-block  4
call   15 never executed
    $$$$$: 3542-block  5
call   16 never executed
        1: 3543:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3544:}
        -: 3545:#else
        -: 3546:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3547:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3548:
        -: 3549:  const std::string counts =
        -: 3550:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3551:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3552:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3553:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3554:  fflush(stdout);
        -: 3555:}
        -: 3556:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3557:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 83%
        1: 3558:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3559:    const UnitTest& /*unit_test*/) {
        1: 3560:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3560-block  0
call    0 returned 1
       1*: 3561:  printf("Global test environment tear-down\n");
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3561-block  0
        1: 3561-block  1
call    2 returned 1
        1: 3562:  fflush(stdout);
call    0 returned 1
        1: 3563:}
        -: 3564:
        -: 3565:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3566:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3567:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3567-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3568:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3569:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3569-block  0
    %%%%%: 3569-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3569-block  2
call    9 never executed
call   10 never executed
    $$$$$: 3569-block  3
call   11 never executed
    $$$$$: 3569-block  4
call   12 never executed
        -: 3570:
    #####: 3571:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3571-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3571-block  1
    #####: 3572:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3572-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 3573:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3573-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3573-block  1
    %%%%%: 3573-block  2
    %%%%%: 3573-block  3
branch 12 never executed
branch 13 never executed
    #####: 3574:      continue;
    %%%%%: 3574-block  0
        -: 3575:    }
    #####: 3576:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3576-block  0
    %%%%%: 3576-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3576-block  2
    #####: 3577:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3577-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 3578:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3578-block  0
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3578-block  1
    %%%%%: 3578-block  2
    %%%%%: 3578-block  3
branch 10 never executed
branch 11 never executed
    #####: 3579:        continue;
    %%%%%: 3579-block  0
        -: 3580:      }
    #####: 3581:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3581-block  0
call    0 never executed
    #####: 3582:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3582-block  0
    %%%%%: 3582-block  1
call    8 never executed
    #####: 3583:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3584:      printf("\n");
call    0 never executed
        -: 3585:    }
        -: 3586:  }
    #####: 3587:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3587-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3587-block  1
    %%%%%: 3587-block  2
    %%%%%: 3587-block  3
branch  2 never executed
branch  3 never executed
    %%%%%: 3587-block  4
    %%%%%: 3587-block  5
call    4 never executed
        -: 3588:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3589:}
        -: 3590:
        -: 3591:// Internal helper for printing the list of test suite failures not covered by
        -: 3592:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3593:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3594:    const UnitTest& unit_test) {
    #####: 3595:  int suite_failure_count = 0;
    #####: 3596:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3596-block  0
    %%%%%: 3596-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3596-block  2
    #####: 3597:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3597-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 3598:    if (!test_suite.should_run()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3599:      continue;
    %%%%%: 3599-block  0
        -: 3600:    }
    #####: 3601:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3601-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3602:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3602-block  0
call    0 never executed
    #####: 3603:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3603-block  0
    %%%%%: 3603-block  1
call    6 never executed
    #####: 3604:      ++suite_failure_count;
        -: 3605:    }
        -: 3606:  }
    #####: 3607:  if (suite_failure_count > 0) {
    %%%%%: 3607-block  0
branch  0 never executed
branch  1 never executed
    #####: 3608:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3608-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3608-block  1
    %%%%%: 3608-block  2
    %%%%%: 3608-block  3
branch  2 never executed
branch  3 never executed
    %%%%%: 3608-block  4
    %%%%%: 3608-block  5
call    4 never executed
        -: 3609:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3610:  }
    #####: 3611:}
        -: 3612:
        -: 3613:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3614:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3615:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3615-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3616:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3617:    return;
    %%%%%: 3617-block  0
        -: 3618:  }
        -: 3619:
    #####: 3620:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3620-block  0
    %%%%%: 3620-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3620-block  2
    #####: 3621:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3621-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 3622:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3622-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3622-block  1
    %%%%%: 3622-block  2
    %%%%%: 3622-block  3
branch 12 never executed
branch 13 never executed
    #####: 3623:      continue;
    %%%%%: 3623-block  0
        -: 3624:    }
    #####: 3625:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3625-block  0
    %%%%%: 3625-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3625-block  2
    #####: 3626:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3626-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 3627:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3627-block  0
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3627-block  1
    %%%%%: 3627-block  2
    %%%%%: 3627-block  3
branch 10 never executed
branch 11 never executed
    #####: 3628:        continue;
    %%%%%: 3628-block  0
        -: 3629:      }
    #####: 3630:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3630-block  0
call    0 never executed
    #####: 3631:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3631-block  0
    %%%%%: 3631-block  1
call    8 never executed
    #####: 3632:      printf("\n");
call    0 never executed
        -: 3633:    }
        -: 3634:  }
        -: 3635:}
        -: 3636:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 59%
        1: 3637:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3638:                                                     int /*iteration*/) {
        1: 3639:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3639-block  0
call    0 returned 1
       2*: 3640:  printf("%s from %s ran.",
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 3640-block  0
        1: 3640-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        2: 3641:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 3641-block  0
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3641-block  1
call   10 returned 1
        1: 3641-block  2
call   11 returned 1
call   12 returned 1
    $$$$$: 3641-block  3
call   13 never executed
    $$$$$: 3641-block  4
call   14 never executed
        2: 3642:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$: 3642-block  0
call    9 never executed
    $$$$$: 3642-block  1
call   10 never executed
       1*: 3643:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3643-block  0
        1: 3643-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
       1*: 3644:    printf(" (%s ms total)",
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 3644-block  0
        1: 3644-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2: 3645:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3645-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3645-block  1
call   10 returned 1
        1: 3645-block  2
call   11 returned 1
call   12 returned 1
call   13 returned 1
    $$$$$: 3645-block  3
call   14 never executed
    $$$$$: 3645-block  4
call   15 never executed
    $$$$$: 3645-block  5
call   16 never executed
        -: 3646:  }
        1: 3647:  printf("\n");
        1: 3647-block  0
call    0 returned 1
        1: 3648:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
       1*: 3649:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%: 3649-block  0
        1: 3649-block  1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1: 3649-block  2
call   13 returned 1
call   14 returned 1
    $$$$$: 3649-block  3
call   15 never executed
    $$$$$: 3649-block  4
call   16 never executed
        -: 3650:
        1: 3651:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 3652:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3653:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3653-block  0
call    0 never executed
    #####: 3654:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3654-block  0
    %%%%%: 3654-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3654-block  2
call    9 never executed
call   10 never executed
    $$$$$: 3654-block  3
call   11 never executed
    $$$$$: 3654-block  4
call   12 never executed
    #####: 3655:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3656:  }
        -: 3657:
        1: 3658:  if (!unit_test.Passed()) {
        1: 3658-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 3659:    PrintFailedTests(unit_test);
    %%%%%: 3659-block  0
call    0 never executed
    #####: 3660:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3661:  }
        -: 3662:
        1: 3663:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3663-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
       1*: 3664:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3664-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 3664-block  1
    %%%%%: 3664-block  2
branch  4 never executed
branch  5 never executed
    #####: 3665:    if (unit_test.Passed()) {
    %%%%%: 3665-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3666:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3666-block  0
call    0 never executed
        -: 3667:    }
    #####: 3668:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3668-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3668-block  1
    %%%%%: 3668-block  2
    %%%%%: 3668-block  3
call    2 never executed
        -: 3669:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3670:  }
        -: 3671:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3672:  fflush(stdout);
        1: 3672-block  0
call    0 returned 1
        1: 3673:}
        -: 3674:
        -: 3675:// End PrettyUnitTestResultPrinter
        -: 3676:
        -: 3677:// This class implements the TestEventListener interface.
        -: 3678://
        -: 3679:// Class BriefUnitTestResultPrinter is copyable.
        -: 3680:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3681: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC2Ev called 0 returned 0% blocks executed 0%
    #####: 3682:  BriefUnitTestResultPrinter() {}
    %%%%%: 3682-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3683:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3684:    printf("%s.%s", test_suite, test);
    %%%%%: 3684-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3684-block  1
    %%%%%: 3684-block  2
call    2 never executed
    #####: 3685:  }
        -: 3686:
        -: 3687:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3688:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3689:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3690:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3691:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3692:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3693:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3694:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3695:#else
        -: 3696:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3697:#endif  // OnTestCaseStart
        -: 3698:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3699:  void OnTestStart(const TestInfo& /*test_info*/) override {}
        -: 3700:
        -: 3701:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3702:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3703:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3704:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3705:#else
        -: 3706:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3707:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3708:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3709:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3710:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3711:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3712:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3713:};
        -: 3714:
        -: 3715:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3716:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3717:    const TestPartResult& result) {
    #####: 3718:  switch (result.type()) {
    %%%%%: 3718-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3719:    // If the test part succeeded, we don't need to do anything.
    #####: 3720:    case TestPartResult::kSuccess:
    #####: 3721:      return;
    %%%%%: 3721-block  0
    #####: 3722:    default:
        -: 3723:      // Print failure message from the assertion
        -: 3724:      // (e.g. expected this and got that).
    #####: 3725:      PrintTestPartResult(result);
    %%%%%: 3725-block  0
call    0 never executed
    #####: 3726:      fflush(stdout);
call    0 never executed
        -: 3727:  }
        -: 3728:}
        -: 3729:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3730:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3731:  if (test_info.result()->Failed()) {
    %%%%%: 3731-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3732:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3732-block  0
call    0 never executed
    #####: 3733:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 3734:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3735:
    #####: 3736:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3736-block  0
    %%%%%: 3736-block  1
branch  2 never executed
branch  3 never executed
    #####: 3737:      printf(" (%s ms)\n",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3737-block  0
    %%%%%: 3737-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3738:             internal::StreamableToString(test_info.result()->elapsed_time())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3738-block  0
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 3738-block  1
call   12 never executed
    $$$$$: 3738-block  2
call   13 never executed
    $$$$$: 3738-block  3
call   14 never executed
    #####: 3739:                 .c_str());
    %%%%%: 3739-block  0
call    0 never executed
    %%%%%: 3739-block  1
call    1 never executed
        -: 3740:    } else {
    #####: 3741:      printf("\n");
    %%%%%: 3741-block  0
call    0 never executed
        -: 3742:    }
    #####: 3743:    fflush(stdout);
    %%%%%: 3743-block  0
call    0 never executed
        -: 3744:  }
    #####: 3745:}
    %%%%%: 3745-block  0
        -: 3746:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3747:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3748:                                                    int /*iteration*/) {
    #####: 3749:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3749-block  0
call    0 never executed
    #####: 3750:  printf("%s from %s ran.",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3750-block  0
    %%%%%: 3750-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3751:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3751-block  0
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3751-block  1
call   10 never executed
    %%%%%: 3751-block  2
call   11 never executed
call   12 never executed
    $$$$$: 3751-block  3
call   13 never executed
    $$$$$: 3751-block  4
call   14 never executed
    #####: 3752:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 3752-block  0
call    9 never executed
    $$$$$: 3752-block  1
call   10 never executed
    #####: 3753:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3753-block  0
    %%%%%: 3753-block  1
branch  2 never executed
branch  3 never executed
    #####: 3754:    printf(" (%s ms total)",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3754-block  0
    %%%%%: 3754-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3755:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3755-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3755-block  1
call   10 never executed
    %%%%%: 3755-block  2
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 3755-block  3
call   14 never executed
    $$$$$: 3755-block  4
call   15 never executed
    $$$$$: 3755-block  5
call   16 never executed
        -: 3756:  }
    #####: 3757:  printf("\n");
    %%%%%: 3757-block  0
call    0 never executed
    #####: 3758:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3759:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3759-block  0
    %%%%%: 3759-block  1
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 3759-block  2
call   13 never executed
call   14 never executed
    $$$$$: 3759-block  3
call   15 never executed
    $$$$$: 3759-block  4
call   16 never executed
        -: 3760:
    #####: 3761:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3762:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3763:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3763-block  0
call    0 never executed
    #####: 3764:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3764-block  0
    %%%%%: 3764-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3764-block  2
call    9 never executed
call   10 never executed
    $$$$$: 3764-block  3
call   11 never executed
    $$$$$: 3764-block  4
call   12 never executed
        -: 3765:  }
        -: 3766:
    #####: 3767:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3767-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3768:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3768-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 3768-block  1
    %%%%%: 3768-block  2
branch  4 never executed
branch  5 never executed
    #####: 3769:    if (unit_test.Passed()) {
    %%%%%: 3769-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3770:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3770-block  0
call    0 never executed
        -: 3771:    }
    #####: 3772:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3772-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3772-block  1
    %%%%%: 3772-block  2
    %%%%%: 3772-block  3
call    2 never executed
        -: 3773:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3774:  }
        -: 3775:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3776:  fflush(stdout);
    %%%%%: 3776-block  0
call    0 never executed
    #####: 3777:}
        -: 3778:
        -: 3779:// End BriefUnitTestResultPrinter
        -: 3780:
        -: 3781:// class TestEventRepeater
        -: 3782://
        -: 3783:// This class forwards events to other event listeners.
        -: 3784:class TestEventRepeater : public TestEventListener {
        -: 3785: public:
function _ZN7testing8internal17TestEventRepeaterC2Ev called 1 returned 100% blocks executed 100%
        1: 3786:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3786-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
        -: 3787:  ~TestEventRepeater() override;
        -: 3788:  void Append(TestEventListener *listener);
        -: 3789:  TestEventListener* Release(TestEventListener* listener);
        -: 3790:
        -: 3791:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3792:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3793:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3793-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3793-block  1
    %%%%%: 3793-block  2
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3794:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
    %%%%%: 3794-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 3795:
        -: 3796:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3797:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3798:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3799:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3800://  Legacy API is deprecated but still available
        -: 3801:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3802:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3803:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3804:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3805:  void OnTestStart(const TestInfo& test_info) override;
        -: 3806:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3807:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3808://  Legacy API is deprecated but still available
        -: 3809:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3810:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3811:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3812:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3813:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3814:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3815:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3816:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3817:
        -: 3818: private:
        -: 3819:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3820:  // in death test child processes.
        -: 3821:  bool forwarding_enabled_;
        -: 3822:  // The list of listeners that receive events.
        -: 3823:  std::vector<TestEventListener*> listeners_;
        -: 3824:
        -: 3825:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 3826:};
        -: 3827:
        3: 3828:TestEventRepeater::~TestEventRepeater() {
        1: 3829:  ForEach(listeners_, Delete<TestEventListener>);
        2: 3830:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 1 returned 100% blocks executed 100%
        1: 3828:TestEventRepeater::~TestEventRepeater() {
        -: 3829:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3830:}
        1: 3830-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 1 returned 100% blocks executed 100%
        2: 3828:TestEventRepeater::~TestEventRepeater() {
        1: 3828-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
        1: 3829:  ForEach(listeners_, Delete<TestEventListener>);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 3830:}
------------------
        -: 3831:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3832:void TestEventRepeater::Append(TestEventListener *listener) {
        1: 3833:  listeners_.push_back(listener);
        1: 3833-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 3834:}
        -: 3835:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 22%
        1: 3836:TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {
       1*: 3837:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3837-block  0
        1: 3837-block  1
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 3837-block  2
    #####: 3838:    if (listeners_[i] == listener) {
    %%%%%: 3838-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3839:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3839-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 3839-block  1
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 3839-block  2
call   20 never executed
    $$$$$: 3839-block  3
call   21 never executed
    $$$$$: 3839-block  4
call   22 never executed
    #####: 3840:      return listener;
        -: 3841:    }
        -: 3842:  }
        -: 3843:
        1: 3844:  return nullptr;
        1: 3844-block  0
        -: 3845:}
        -: 3846:
        -: 3847:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3848:// This defines a member that forwards the call to all listeners.
        -: 3849:#define GTEST_REPEATER_METHOD_(Name, Type) \
        -: 3850:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3851:  if (forwarding_enabled_) { \
        -: 3852:    for (size_t i = 0; i < listeners_.size(); i++) { \
        -: 3853:      listeners_[i]->Name(parameter); \
        -: 3854:    } \
        -: 3855:  } \
        -: 3856:}
        -: 3857:// This defines a member that forwards the call to all listeners in reverse
        -: 3858:// order.
        -: 3859:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3860:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3861:    if (forwarding_enabled_) {                          \
        -: 3862:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3863:        listeners_[i - 1]->Name(parameter);             \
        -: 3864:      }                                                 \
        -: 3865:    }                                                   \
        -: 3866:  }
        -: 3867:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 96%
       2*: 3868:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3868-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3868-block  1
        1: 3868-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3868-block  3
        2: 3868-block  4
call    7 returned 2
call    8 returned 2
call    9 returned 2
call   10 returned 2
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3868-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 96%
       2*: 3869:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3869-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3869-block  1
        1: 3869-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3869-block  3
        2: 3869-block  4
call    7 returned 2
call    8 returned 2
call    9 returned 2
call   10 returned 2
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3869-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
        -: 3870://  Legacy API is deprecated but still available
        -: 3871:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 96%
       2*: 3872:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        1: 3872-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3872-block  1
        1: 3872-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3872-block  3
        2: 3872-block  4
call    7 returned 2
call    8 returned 2
call    9 returned 2
call   10 returned 2
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3872-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
        -: 3873:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 96%
       2*: 3874:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        1: 3874-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3874-block  1
        1: 3874-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3874-block  3
        2: 3874-block  4
call    7 returned 2
call    8 returned 2
call    9 returned 2
call   10 returned 2
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3874-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 7 returned 100% blocks executed 96%
      14*: 3875:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
        7: 3875-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 0 (fallthrough)
branch  4 taken 7
    %%%%%: 3875-block  1
        7: 3875-block  2
branch  5 taken 7 (fallthrough)
branch  6 taken 0
        7: 3875-block  3
       14: 3875-block  4
call    7 returned 14
call    8 returned 14
call    9 returned 14
call   10 returned 14
branch 11 taken 7 (fallthrough)
branch 12 taken 7
        7: 3875-block  5
call   13 returned 7
call   14 returned 7
call   15 returned 7
call   16 returned 7
call   17 returned 7
call   18 returned 7
call   19 returned 7
call   20 returned 7
call   21 returned 7
call   22 returned 7
call   23 returned 7
call   24 returned 7
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3876:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3876-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3876-block  1
    %%%%%: 3876-block  2
branch  5 never executed
branch  6 never executed
    %%%%%: 3876-block  3
    %%%%%: 3876-block  4
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 3876-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 96%
       2*: 3877:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3877-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3877-block  1
        1: 3877-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3877-block  3
        2: 3877-block  4
call    7 returned 2
call    8 returned 2
call    9 returned 2
call   10 returned 2
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3877-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 96%
       2*: 3878:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3878-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3878-block  1
        1: 3878-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3878-block  3
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        2: 3878-block  4
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3878-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 96%
       2*: 3879:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3879-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3879-block  1
        1: 3879-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3879-block  3
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        2: 3879-block  4
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3879-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 7 returned 100% blocks executed 96%
      14*: 3880:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
        7: 3880-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 0 (fallthrough)
branch  4 taken 7
    %%%%%: 3880-block  1
        7: 3880-block  2
branch  5 taken 7 (fallthrough)
branch  6 taken 0
        7: 3880-block  3
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
       14: 3880-block  4
branch 11 taken 7 (fallthrough)
branch 12 taken 7
        7: 3880-block  5
call   13 returned 7
call   14 returned 7
call   15 returned 7
call   16 returned 7
call   17 returned 7
call   18 returned 7
call   19 returned 7
call   20 returned 7
call   21 returned 7
call   22 returned 7
call   23 returned 7
call   24 returned 7
        -: 3881://  Legacy API is deprecated but still available
        -: 3882:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 96%
       2*: 3883:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        1: 3883-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3883-block  1
        1: 3883-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3883-block  3
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        2: 3883-block  4
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3883-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
        -: 3884:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 96%
       2*: 3885:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        1: 3885-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3885-block  1
        1: 3885-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3885-block  3
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        2: 3885-block  4
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3885-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 96%
       2*: 3886:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3886-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3886-block  1
        1: 3886-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1: 3886-block  3
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        2: 3886-block  4
branch 11 taken 1 (fallthrough)
branch 12 taken 1
        1: 3886-block  5
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
        -: 3887:
        -: 3888:#undef GTEST_REPEATER_METHOD_
        -: 3889:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3890:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 96%
        1: 3891:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3892:                                             int iteration) {
       1*: 3893:  if (forwarding_enabled_) {
        1: 3893-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3893-block  1
        1: 3893-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        2: 3894:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3894-block  0
        2: 3894-block  1
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        1: 3895:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3895-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
        -: 3896:    }
        -: 3897:  }
        1: 3898:}
        -: 3899:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 96%
        1: 3900:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3901:                                           int iteration) {
       1*: 3902:  if (forwarding_enabled_) {
        1: 3902-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3902-block  1
        1: 3902-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        2: 3903:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3903-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        2: 3903-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        1: 3904:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3904-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
        -: 3905:    }
        -: 3906:  }
        1: 3907:}
        -: 3908:
        -: 3909:// End TestEventRepeater
        -: 3910:
        -: 3911:// This class generates an XML output file.
        -: 3912:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3913: public:
        -: 3914:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3915:
        -: 3916:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3917:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3918:
        -: 3919:  // Prints an XML summary of all unit tests.
        -: 3920:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3921:                                const std::vector<TestSuite*>& test_suites);
        -: 3922:
        -: 3923: private:
        -: 3924:  // Is c a whitespace character that is normalized to a space character
        -: 3925:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEc called 0 returned 0% blocks executed 0%
    #####: 3926:  static bool IsNormalizableWhitespace(char c) {
    #####: 3927:    return c == 0x9 || c == 0xA || c == 0xD;
    %%%%%: 3927-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3927-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3927-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3927-block  3
    %%%%%: 3927-block  4
    %%%%%: 3927-block  5
        -: 3928:  }
        -: 3929:
        -: 3930:  // May c appear in a well-formed XML document?
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEc called 0 returned 0% blocks executed 0%
    #####: 3931:  static bool IsValidXmlCharacter(char c) {
    #####: 3932:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3932-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3932-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3932-block  2
    %%%%%: 3932-block  3
    %%%%%: 3932-block  4
        -: 3933:  }
        -: 3934:
        -: 3935:  // Returns an XML-escaped copy of the input string str.  If
        -: 3936:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3937:  // value, and normalizable whitespace is preserved by replacing it
        -: 3938:  // with character references.
        -: 3939:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3940:
        -: 3941:  // Returns the given string with all characters invalid in XML removed.
        -: 3942:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3943:
        -: 3944:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3945:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3946:    return EscapeXml(str, true);
    %%%%%: 3946-block  0
call    0 never executed
call    1 never executed
        -: 3947:  }
        -: 3948:
        -: 3949:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3950:  static std::string EscapeXmlText(const char* str) {
        -: 3951:    return EscapeXml(str, false);
        -: 3952:  }
        -: 3953:
        -: 3954:  // Verifies that the given attribute belongs to the given element and
        -: 3955:  // streams the attribute as XML.
        -: 3956:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3957:                                 const std::string& element_name,
        -: 3958:                                 const std::string& name,
        -: 3959:                                 const std::string& value);
        -: 3960:
        -: 3961:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3962:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3963:
        -: 3964:  // Streams a test suite XML stanza containing the given test result.
        -: 3965:  //
        -: 3966:  // Requires: result.Failed()
        -: 3967:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3968:                                              const TestResult& result);
        -: 3969:
        -: 3970:  // Streams an XML representation of a TestResult object.
        -: 3971:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3972:                                  const TestResult& result);
        -: 3973:
        -: 3974:  // Streams an XML representation of a TestInfo object.
        -: 3975:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3976:                                const char* test_suite_name,
        -: 3977:                                const TestInfo& test_info);
        -: 3978:
        -: 3979:  // Prints an XML representation of a TestSuite object
        -: 3980:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3981:                                const TestSuite& test_suite);
        -: 3982:
        -: 3983:  // Prints an XML summary of unit_test to output stream out.
        -: 3984:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3985:                               const UnitTest& unit_test);
        -: 3986:
        -: 3987:  // Produces a string representing the test properties in a result as space
        -: 3988:  // delimited XML attributes based on the property key="value" pairs.
        -: 3989:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3990:  // to delimit this attribute from prior attributes.
        -: 3991:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3992:
        -: 3993:  // Streams an XML representation of the test properties of a TestResult
        -: 3994:  // object.
        -: 3995:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3996:                                      const TestResult& result);
        -: 3997:
        -: 3998:  // The output file.
        -: 3999:  const std::string output_file_;
        -: 4000:
        -: 4001:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 4002:};
        -: 4003:
        -: 4004:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4005:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    %%%%%: 4005-block  0
call    0 never executed
call    1 never executed
    #####: 4006:    : output_file_(output_file) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4006-block  0
call   13 never executed
call   14 never executed
    $$$$$: 4006-block  1
call   15 never executed
    $$$$$: 4006-block  2
call   16 never executed
    $$$$$: 4006-block  3
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4006-block  4
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 4007:  if (output_file_.empty()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4008:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4008-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4008-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4008-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4008-block  3
call   12 never executed
    $$$$$: 4008-block  4
call   13 never executed
        -: 4009:  }
    #####: 4010:}
    %%%%%: 4010-block  0
        -: 4011:
        -: 4012:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4013:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4014:                                                  int /*iteration*/) {
    #####: 4015:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4015-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4016:  std::stringstream stream;
    %%%%%: 4016-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4016-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4016-block  2
call    6 never executed
call    7 never executed
    #####: 4017:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4018:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4018-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4018-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4018-block  2
    %%%%%: 4018-block  3
branch  8 never executed
branch  9 never executed
    %%%%%: 4018-block  4
    %%%%%: 4018-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4018-block  6
call   13 never executed
call   14 never executed
    $$$$$: 4018-block  7
call   15 never executed
    $$$$$: 4018-block  8
call   16 never executed
    #####: 4019:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4020:}
        -: 4021:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4022:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4023:    const std::vector<TestSuite*>& test_suites) {
    #####: 4024:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4024-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4025:  std::stringstream stream;
    %%%%%: 4025-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4025-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4025-block  2
call    6 never executed
call    7 never executed
    #####: 4026:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4026-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4027:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4027-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4027-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4027-block  2
    %%%%%: 4027-block  3
branch  8 never executed
branch  9 never executed
    %%%%%: 4027-block  4
    %%%%%: 4027-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4027-block  6
call   13 never executed
call   14 never executed
    $$$$$: 4027-block  7
call   15 never executed
    $$$$$: 4027-block  8
call   16 never executed
    #####: 4028:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4029:}
        -: 4030:
        -: 4031:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4032:// is true, the text is meant to appear as an attribute value, and
        -: 4033:// normalizable whitespace is preserved by replacing it with character
        -: 4034:// references.
        -: 4035://
        -: 4036:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4037:// It is expected that most, if not all, of the text processed by this
        -: 4038:// module will consist of ordinary English text.
        -: 4039:// If this module is ever modified to produce version 1.1 XML output,
        -: 4040:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4041:std::string XmlUnitTestResultPrinter::EscapeXml(
        -: 4042:    const std::string& str, bool is_attribute) {
    #####: 4043:  Message m;
    %%%%%: 4043-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4043-block  1
call    4 never executed
    $$$$$: 4043-block  2
call    5 never executed
        -: 4044:
    #####: 4045:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4045-block  0
    %%%%%: 4045-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4046:    const char ch = str[i];
    %%%%%: 4046-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4047:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4048:      case '<':
    #####: 4049:        m << "&lt;";
    %%%%%: 4049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4050:        break;
    %%%%%: 4050-block  0
    #####: 4051:      case '>':
    #####: 4052:        m << "&gt;";
    %%%%%: 4052-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4053:        break;
    %%%%%: 4053-block  0
    #####: 4054:      case '&':
    #####: 4055:        m << "&amp;";
    %%%%%: 4055-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4056:        break;
    %%%%%: 4056-block  0
    #####: 4057:      case '\'':
    #####: 4058:        if (is_attribute)
    %%%%%: 4058-block  0
branch  0 never executed
branch  1 never executed
    #####: 4059:          m << "&apos;";
    %%%%%: 4059-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4060:        else
    #####: 4061:          m << '\'';
    %%%%%: 4061-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4061-block  1
call    4 never executed
    $$$$$: 4061-block  2
call    5 never executed
    #####: 4062:        break;
    %%%%%: 4062-block  0
    #####: 4063:      case '"':
    #####: 4064:        if (is_attribute)
    %%%%%: 4064-block  0
branch  0 never executed
branch  1 never executed
    #####: 4065:          m << "&quot;";
    %%%%%: 4065-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4066:        else
    #####: 4067:          m << '"';
    %%%%%: 4067-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4067-block  1
call    4 never executed
    $$$$$: 4067-block  2
call    5 never executed
    #####: 4068:        break;
    %%%%%: 4068-block  0
    #####: 4069:      default:
    #####: 4070:        if (IsValidXmlCharacter(ch)) {
    %%%%%: 4070-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4071:          if (is_attribute && IsNormalizableWhitespace(ch))
    %%%%%: 4071-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4071-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4071-block  2
    %%%%%: 4071-block  3
    %%%%%: 4071-block  4
branch  5 never executed
branch  6 never executed
    #####: 4072:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4072-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4072-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4072-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4072-block  3
call   12 never executed
call   13 never executed
    $$$$$: 4072-block  4
call   14 never executed
    $$$$$: 4072-block  5
call   15 never executed
    #####: 4073:              << ";";
    %%%%%: 4073-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4074:          else
    #####: 4075:            m << ch;
    %%%%%: 4075-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4076:        }
    #####: 4077:        break;
    %%%%%: 4077-block  0
        -: 4078:    }
        -: 4079:  }
        -: 4080:
    #####: 4081:  return m.GetString();
    %%%%%: 4081-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4082:}
        -: 4083:
        -: 4084:// Returns the given string with all characters invalid in XML removed.
        -: 4085:// Currently invalid characters are dropped from the string. An
        -: 4086:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4087:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4088:    const std::string& str) {
    #####: 4089:  std::string output;
    %%%%%: 4089-block  0
call    0 never executed
    #####: 4090:  output.reserve(str.size());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4091:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4091-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4091-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4091-block  2
call   11 never executed
    #####: 4092:    if (IsValidXmlCharacter(*it))
    %%%%%: 4092-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4093:      output.push_back(*it);
    %%%%%: 4093-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 4094:
    #####: 4095:  return output;
        -: 4096:}
        -: 4097:
        -: 4098:// The following routines generate an XML representation of a UnitTest
        -: 4099:// object.
        -: 4100://
        -: 4101:// This is how Google Test concepts map to the DTD:
        -: 4102://
        -: 4103:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4104://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4105://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4106://       <failure message="...">...</failure>
        -: 4107://       <failure message="...">...</failure>
        -: 4108://       <failure message="...">...</failure>
        -: 4109://                                     <-- individual assertion failures
        -: 4110://     </testcase>
        -: 4111://   </testsuite>
        -: 4112:// </testsuites>
        -: 4113:
        -: 4114:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4115:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4116:  ::std::stringstream ss;
    %%%%%: 4116-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4116-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4116-block  2
call    6 never executed
call    7 never executed
    #####: 4117:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4117-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4118:  return ss.str();
    %%%%%: 4118-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4119:}
        -: 4120:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4121:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4122:#if defined(_MSC_VER)
        -: 4123:  return localtime_s(out, &seconds) == 0;
        -: 4124:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4125:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4126:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4127:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4128:  if (tm_ptr == nullptr) return false;
        -: 4129:  *out = *tm_ptr;
        -: 4130:  return true;
        -: 4131:#elif defined(__STDC_LIB_EXT1__)
        -: 4132:  // Uses localtime_s when available as localtime_r is only available from
        -: 4133:  // C23 standard.
        -: 4134:  return localtime_s(&seconds, out) != nullptr;
        -: 4135:#else
    #####: 4136:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4136-block  0
call    0 never executed
        -: 4137:#endif
        -: 4138:}
        -: 4139:
        -: 4140:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4141:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4142:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
    #####: 4143:  struct tm time_struct;
    %%%%%: 4143-block  0
call    0 never executed
    #####: 4144:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4145:    return "";
    %%%%%: 4145-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4145-block  1
call    5 never executed
call    6 never executed
    $$$$$: 4145-block  2
call    7 never executed
    $$$$$: 4145-block  3
call    8 never executed
        -: 4146:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4147:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4147-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4147-block  1
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4147-block  2
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 4147-block  3
call   24 never executed
    $$$$$: 4147-block  4
call   25 never executed
    $$$$$: 4147-block  5
call   26 never executed
    $$$$$: 4147-block  6
call   27 never executed
    $$$$$: 4147-block  7
call   28 never executed
    $$$$$: 4147-block  8
call   29 never executed
    $$$$$: 4147-block  9
call   30 never executed
    #####: 4148:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4148-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4148-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4148-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4148-block  3
call   21 never executed
    $$$$$: 4148-block  4
call   22 never executed
    $$$$$: 4148-block  5
call   23 never executed
    $$$$$: 4148-block  6
call   24 never executed
    $$$$$: 4148-block  7
call   25 never executed
    $$$$$: 4148-block  8
call   26 never executed
    #####: 4149:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4149-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4149-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4149-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4149-block  3
call   21 never executed
    $$$$$: 4149-block  4
call   22 never executed
    $$$$$: 4149-block  5
call   23 never executed
    $$$$$: 4149-block  6
call   24 never executed
    $$$$$: 4149-block  7
call   25 never executed
    $$$$$: 4149-block  8
call   26 never executed
    #####: 4150:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4150-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4150-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4150-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4150-block  3
call   21 never executed
    $$$$$: 4150-block  4
call   22 never executed
    $$$$$: 4150-block  5
call   23 never executed
    $$$$$: 4150-block  6
call   24 never executed
    $$$$$: 4150-block  7
call   25 never executed
    $$$$$: 4150-block  8
call   26 never executed
    #####: 4151:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4151-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4151-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4151-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4151-block  3
call   21 never executed
    $$$$$: 4151-block  4
call   22 never executed
    $$$$$: 4151-block  5
call   23 never executed
    $$$$$: 4151-block  6
call   24 never executed
    $$$$$: 4151-block  7
call   25 never executed
    $$$$$: 4151-block  8
call   26 never executed
    #####: 4152:      String::FormatIntWidth2(time_struct.tm_sec) + "." +
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4152-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4152-block  1
call    9 never executed
    %%%%%: 4152-block  2
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4152-block  3
call   14 never executed
    $$$$$: 4152-block  4
call   15 never executed
    $$$$$: 4152-block  5
call   16 never executed
    $$$$$: 4152-block  6
call   17 never executed
    #####: 4153:      String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4153-block  0
call    0 never executed
    %%%%%: 4153-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4153-block  2
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4153-block  3
call   11 never executed
    $$$$$: 4153-block  4
call   12 never executed
        -: 4154:}
        -: 4155:
        -: 4156:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4157:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4158:                                                     const char* data) {
    #####: 4159:  const char* segment = data;
    #####: 4160:  *stream << "<![CDATA[";
    %%%%%: 4160-block  0
call    0 never executed
call    1 never executed
        -: 4161:  for (;;) {
    #####: 4162:    const char* const next_segment = strstr(segment, "]]>");
    %%%%%: 4162-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4162-block  1
    #####: 4163:    if (next_segment != nullptr) {
    %%%%%: 4163-block  0
branch  0 never executed
branch  1 never executed
        -: 4164:      stream->write(
    #####: 4165:          segment, static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4165-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4166:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
call    1 never executed
    #####: 4167:      segment = next_segment + strlen("]]>");
call    0 never executed
        -: 4168:    } else {
    #####: 4169:      *stream << segment;
    %%%%%: 4169-block  0
call    0 never executed
call    1 never executed
    #####: 4170:      break;
        -: 4171:    }
    #####: 4172:  }
    %%%%%: 4172-block  0
    #####: 4173:  *stream << "]]>";
    %%%%%: 4173-block  0
call    0 never executed
call    1 never executed
    #####: 4174:}
        -: 4175:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4176:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4177:    std::ostream* stream,
        -: 4178:    const std::string& element_name,
        -: 4179:    const std::string& name,
        -: 4180:    const std::string& value) {
        -: 4181:  const std::vector<std::string>& allowed_names =
    #####: 4182:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4182-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4182-block  1
call    5 never executed
        -: 4183:
    #####: 4184:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4184-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4184-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4184-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4184-block  3
call   24 never executed
call   25 never executed
    %%%%%: 4184-block  4
call   26 never executed
call   27 never executed
    $$$$$: 4184-block  5
call   28 never executed
    $$$$$: 4184-block  6
call   29 never executed
    $$$$$: 4184-block  7
call   30 never executed
        -: 4185:                   allowed_names.end())
        -: 4186:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4187:      << ">.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4187-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4187-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4187-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4187-block  3
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4187-block  4
call   18 never executed
branch 19 never executed
branch 20 never executed
        -: 4188:
    #####: 4189:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4189-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4189-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4189-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4189-block  3
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4189-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4189-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 4189-block  6
call   22 never executed
call   23 never executed
    $$$$$: 4189-block  7
call   24 never executed
    $$$$$: 4189-block  8
call   25 never executed
    #####: 4190:}
        -: 4191:
        -: 4192:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4193:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4194:    ::std::ostream* stream, const TestResult& result) {
        -: 4195:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4196:  *stream << "  <testsuite";
    %%%%%: 4196-block  0
call    0 never executed
call    1 never executed
    #####: 4197:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4197-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4197-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4197-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4197-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4197-block  4
call   36 never executed
    $$$$$: 4197-block  5
call   37 never executed
    $$$$$: 4197-block  6
call   38 never executed
    $$$$$: 4197-block  7
call   39 never executed
    $$$$$: 4197-block  8
call   40 never executed
    $$$$$: 4197-block  9
call   41 never executed
    $$$$$: 4197-block 10
call   42 never executed
    $$$$$: 4197-block 11
call   43 never executed
    $$$$$: 4197-block 12
call   44 never executed
    $$$$$: 4197-block 13
call   45 never executed
    $$$$$: 4197-block 14
call   46 never executed
    $$$$$: 4197-block 15
call   47 never executed
    #####: 4198:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4198-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4198-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4198-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4198-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4198-block  4
call   36 never executed
    $$$$$: 4198-block  5
call   37 never executed
    $$$$$: 4198-block  6
call   38 never executed
    $$$$$: 4198-block  7
call   39 never executed
    $$$$$: 4198-block  8
call   40 never executed
    $$$$$: 4198-block  9
call   41 never executed
    $$$$$: 4198-block 10
call   42 never executed
    $$$$$: 4198-block 11
call   43 never executed
    $$$$$: 4198-block 12
call   44 never executed
    $$$$$: 4198-block 13
call   45 never executed
    $$$$$: 4198-block 14
call   46 never executed
    $$$$$: 4198-block 15
call   47 never executed
    #####: 4199:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4199-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4199-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4199-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4199-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4199-block  4
call   36 never executed
    $$$$$: 4199-block  5
call   37 never executed
    $$$$$: 4199-block  6
call   38 never executed
    $$$$$: 4199-block  7
call   39 never executed
    $$$$$: 4199-block  8
call   40 never executed
    $$$$$: 4199-block  9
call   41 never executed
    $$$$$: 4199-block 10
call   42 never executed
    $$$$$: 4199-block 11
call   43 never executed
    $$$$$: 4199-block 12
call   44 never executed
    $$$$$: 4199-block 13
call   45 never executed
    $$$$$: 4199-block 14
call   46 never executed
    $$$$$: 4199-block 15
call   47 never executed
    #####: 4200:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4200-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4200-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4200-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4200-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4200-block  4
call   36 never executed
    $$$$$: 4200-block  5
call   37 never executed
    $$$$$: 4200-block  6
call   38 never executed
    $$$$$: 4200-block  7
call   39 never executed
    $$$$$: 4200-block  8
call   40 never executed
    $$$$$: 4200-block  9
call   41 never executed
    $$$$$: 4200-block 10
call   42 never executed
    $$$$$: 4200-block 11
call   43 never executed
    $$$$$: 4200-block 12
call   44 never executed
    $$$$$: 4200-block 13
call   45 never executed
    $$$$$: 4200-block 14
call   46 never executed
    $$$$$: 4200-block 15
call   47 never executed
    #####: 4201:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4201-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4201-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4201-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4201-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4201-block  4
call   36 never executed
    $$$$$: 4201-block  5
call   37 never executed
    $$$$$: 4201-block  6
call   38 never executed
    $$$$$: 4201-block  7
call   39 never executed
    $$$$$: 4201-block  8
call   40 never executed
    $$$$$: 4201-block  9
call   41 never executed
    $$$$$: 4201-block 10
call   42 never executed
    $$$$$: 4201-block 11
call   43 never executed
    $$$$$: 4201-block 12
call   44 never executed
    $$$$$: 4201-block 13
call   45 never executed
    $$$$$: 4201-block 14
call   46 never executed
    $$$$$: 4201-block 15
call   47 never executed
    #####: 4202:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4202-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4202-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4202-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4202-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4202-block  4
call   36 never executed
    $$$$$: 4202-block  5
call   37 never executed
    $$$$$: 4202-block  6
call   38 never executed
    $$$$$: 4202-block  7
call   39 never executed
    $$$$$: 4202-block  8
call   40 never executed
    $$$$$: 4202-block  9
call   41 never executed
    $$$$$: 4202-block 10
call   42 never executed
    $$$$$: 4202-block 11
call   43 never executed
    $$$$$: 4202-block 12
call   44 never executed
    $$$$$: 4202-block 13
call   45 never executed
    $$$$$: 4202-block 14
call   46 never executed
    $$$$$: 4202-block 15
call   47 never executed
    #####: 4203:  OutputXmlAttribute(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4203-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4203-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4203-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4203-block  3
call   25 never executed
    $$$$$: 4203-block  4
call   26 never executed
    $$$$$: 4203-block  5
call   27 never executed
    $$$$$: 4203-block  6
call   28 never executed
    $$$$$: 4203-block  7
call   29 never executed
    $$$$$: 4203-block  8
call   30 never executed
    $$$$$: 4203-block  9
call   31 never executed
    $$$$$: 4203-block 10
call   32 never executed
    #####: 4204:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 4204-block  0
call    7 never executed
    $$$$$: 4204-block  1
call    8 never executed
    #####: 4205:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4205-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4205-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4205-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4205-block  3
call   25 never executed
    $$$$$: 4205-block  4
call   26 never executed
    $$$$$: 4205-block  5
call   27 never executed
    $$$$$: 4205-block  6
call   28 never executed
    $$$$$: 4205-block  7
call   29 never executed
    $$$$$: 4205-block  8
call   30 never executed
    $$$$$: 4205-block  9
call   31 never executed
    $$$$$: 4205-block 10
call   32 never executed
        -: 4206:      stream, "testsuite", "timestamp",
    #####: 4207:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 4207-block  0
call    7 never executed
    $$$$$: 4207-block  1
call    8 never executed
    #####: 4208:  *stream << ">";
call    0 never executed
call    1 never executed
        -: 4209:
        -: 4210:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4211:  *stream << "    <testcase";
call    0 never executed
call    1 never executed
    #####: 4212:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4212-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4212-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4212-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4212-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4212-block  4
call   36 never executed
    $$$$$: 4212-block  5
call   37 never executed
    $$$$$: 4212-block  6
call   38 never executed
    $$$$$: 4212-block  7
call   39 never executed
    $$$$$: 4212-block  8
call   40 never executed
    $$$$$: 4212-block  9
call   41 never executed
    $$$$$: 4212-block 10
call   42 never executed
    $$$$$: 4212-block 11
call   43 never executed
    $$$$$: 4212-block 12
call   44 never executed
    $$$$$: 4212-block 13
call   45 never executed
    $$$$$: 4212-block 14
call   46 never executed
    $$$$$: 4212-block 15
call   47 never executed
    #####: 4213:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4213-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4213-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4213-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4213-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4213-block  4
call   36 never executed
    $$$$$: 4213-block  5
call   37 never executed
    $$$$$: 4213-block  6
call   38 never executed
    $$$$$: 4213-block  7
call   39 never executed
    $$$$$: 4213-block  8
call   40 never executed
    $$$$$: 4213-block  9
call   41 never executed
    $$$$$: 4213-block 10
call   42 never executed
    $$$$$: 4213-block 11
call   43 never executed
    $$$$$: 4213-block 12
call   44 never executed
    $$$$$: 4213-block 13
call   45 never executed
    $$$$$: 4213-block 14
call   46 never executed
    $$$$$: 4213-block 15
call   47 never executed
    #####: 4214:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4214-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4214-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4214-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4214-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4214-block  4
call   36 never executed
    $$$$$: 4214-block  5
call   37 never executed
    $$$$$: 4214-block  6
call   38 never executed
    $$$$$: 4214-block  7
call   39 never executed
    $$$$$: 4214-block  8
call   40 never executed
    $$$$$: 4214-block  9
call   41 never executed
    $$$$$: 4214-block 10
call   42 never executed
    $$$$$: 4214-block 11
call   43 never executed
    $$$$$: 4214-block 12
call   44 never executed
    $$$$$: 4214-block 13
call   45 never executed
    $$$$$: 4214-block 14
call   46 never executed
    $$$$$: 4214-block 15
call   47 never executed
    #####: 4215:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4215-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4215-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4215-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4215-block  3
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    $$$$$: 4215-block  4
call   36 never executed
    $$$$$: 4215-block  5
call   37 never executed
    $$$$$: 4215-block  6
call   38 never executed
    $$$$$: 4215-block  7
call   39 never executed
    $$$$$: 4215-block  8
call   40 never executed
    $$$$$: 4215-block  9
call   41 never executed
    $$$$$: 4215-block 10
call   42 never executed
    $$$$$: 4215-block 11
call   43 never executed
    $$$$$: 4215-block 12
call   44 never executed
    $$$$$: 4215-block 13
call   45 never executed
    $$$$$: 4215-block 14
call   46 never executed
    $$$$$: 4215-block 15
call   47 never executed
    #####: 4216:  OutputXmlAttribute(stream, "testcase", "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4216-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4216-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4216-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4216-block  3
call   25 never executed
    $$$$$: 4216-block  4
call   26 never executed
    $$$$$: 4216-block  5
call   27 never executed
    $$$$$: 4216-block  6
call   28 never executed
    $$$$$: 4216-block  7
call   29 never executed
    $$$$$: 4216-block  8
call   30 never executed
    $$$$$: 4216-block  9
call   31 never executed
    $$$$$: 4216-block 10
call   32 never executed
    #####: 4217:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 4217-block  0
call    7 never executed
    $$$$$: 4217-block  1
call    8 never executed
    #####: 4218:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4218-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4218-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4218-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4218-block  3
call   25 never executed
    $$$$$: 4218-block  4
call   26 never executed
    $$$$$: 4218-block  5
call   27 never executed
    $$$$$: 4218-block  6
call   28 never executed
    $$$$$: 4218-block  7
call   29 never executed
    $$$$$: 4218-block  8
call   30 never executed
    $$$$$: 4218-block  9
call   31 never executed
    $$$$$: 4218-block 10
call   32 never executed
        -: 4219:      stream, "testcase", "timestamp",
    #####: 4220:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 4220-block  0
call    7 never executed
    $$$$$: 4220-block  1
call    8 never executed
        -: 4221:
        -: 4222:  // Output the actual test result.
    #####: 4223:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4224:
        -: 4225:  // Complete the test suite.
    #####: 4226:  *stream << "  </testsuite>\n";
call    0 never executed
call    1 never executed
    #####: 4227:}
        -: 4228:
        -: 4229:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4230:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4231:                                                 const char* test_suite_name,
        -: 4232:                                                 const TestInfo& test_info) {
    #####: 4233:  const TestResult& result = *test_info.result();
    %%%%%: 4233-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4234:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4234-block  0
call    7 never executed
    $$$$$: 4234-block  1
call    8 never executed
        -: 4235:
    #####: 4236:  if (test_info.is_in_another_shard()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4237:    return;
    %%%%%: 4237-block  0
        -: 4238:  }
        -: 4239:
    #####: 4240:  *stream << "    <testcase";
    %%%%%: 4240-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4241:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4241-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4241-block  1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4241-block  2
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4241-block  3
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4241-block  4
call   27 never executed
    $$$$$: 4241-block  5
call   28 never executed
    $$$$$: 4241-block  6
call   29 never executed
    $$$$$: 4241-block  7
call   30 never executed
    $$$$$: 4241-block  8
call   31 never executed
    $$$$$: 4241-block  9
call   32 never executed
    $$$$$: 4241-block 10
call   33 never executed
    $$$$$: 4241-block 11
call   34 never executed
        -: 4242:
    #####: 4243:  if (test_info.value_param() != nullptr) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4244:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4244-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4244-block  1
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4244-block  2
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4244-block  3
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    $$$$$: 4244-block  4
call   26 never executed
    $$$$$: 4244-block  5
call   27 never executed
    $$$$$: 4244-block  6
call   28 never executed
    $$$$$: 4244-block  7
call   29 never executed
    $$$$$: 4244-block  8
call   30 never executed
    $$$$$: 4244-block  9
call   31 never executed
    $$$$$: 4244-block 10
call   32 never executed
    $$$$$: 4244-block 11
call   33 never executed
    #####: 4245:                       test_info.value_param());
call    0 never executed
        -: 4246:  }
    #####: 4247:  if (test_info.type_param() != nullptr) {
    %%%%%: 4247-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4248:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4248-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4248-block  1
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4248-block  2
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4248-block  3
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    $$$$$: 4248-block  4
call   26 never executed
    $$$$$: 4248-block  5
call   27 never executed
    $$$$$: 4248-block  6
call   28 never executed
    $$$$$: 4248-block  7
call   29 never executed
    $$$$$: 4248-block  8
call   30 never executed
    $$$$$: 4248-block  9
call   31 never executed
    $$$$$: 4248-block 10
call   32 never executed
    $$$$$: 4248-block 11
call   33 never executed
    #####: 4249:                       test_info.type_param());
call    0 never executed
        -: 4250:  }
    #####: 4251:  if (GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4251-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4251-block  1
    %%%%%: 4251-block  2
branch  2 never executed
branch  3 never executed
    #####: 4252:    OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4252-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4252-block  1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4252-block  2
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4252-block  3
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4252-block  4
call   27 never executed
    $$$$$: 4252-block  5
call   28 never executed
    $$$$$: 4252-block  6
call   29 never executed
    $$$$$: 4252-block  7
call   30 never executed
    $$$$$: 4252-block  8
call   31 never executed
    $$$$$: 4252-block  9
call   32 never executed
    $$$$$: 4252-block 10
call   33 never executed
    $$$$$: 4252-block 11
call   34 never executed
    #####: 4253:    OutputXmlAttribute(stream, kTestsuite, "line",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4253-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4253-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4253-block  2
call   14 never executed
    $$$$$: 4253-block  3
call   15 never executed
    $$$$$: 4253-block  4
call   16 never executed
    $$$$$: 4253-block  5
call   17 never executed
    #####: 4254:                       StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4254-block  0
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4254-block  1
call   12 never executed
    $$$$$: 4254-block  2
call   13 never executed
    $$$$$: 4254-block  3
call   14 never executed
    #####: 4255:    *stream << " />\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4256:    return;
    %%%%%: 4256-block  0
        -: 4257:  }
        -: 4258:
    #####: 4259:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4259-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4259-block  1
    %%%%%: 4259-block  2
    %%%%%: 4259-block  3
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4259-block  4
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4259-block  5
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4259-block  6
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4259-block  7
call   27 never executed
    $$$$$: 4259-block  8
call   28 never executed
    $$$$$: 4259-block  9
call   29 never executed
    $$$$$: 4259-block 10
call   30 never executed
    $$$$$: 4259-block 11
call   31 never executed
    $$$$$: 4259-block 12
call   32 never executed
    $$$$$: 4259-block 13
call   33 never executed
    $$$$$: 4259-block 14
call   34 never executed
    #####: 4260:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
call    1 never executed
    #####: 4261:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4261-block  0
    %%%%%: 4261-block  1
    %%%%%: 4261-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4261-block  3
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4261-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4261-block  5
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4261-block  6
call   27 never executed
    $$$$$: 4261-block  7
call   28 never executed
    $$$$$: 4261-block  8
call   29 never executed
    $$$$$: 4261-block  9
call   30 never executed
    $$$$$: 4261-block 10
call   31 never executed
    $$$$$: 4261-block 11
call   32 never executed
    $$$$$: 4261-block 12
call   33 never executed
    $$$$$: 4261-block 13
call   34 never executed
    #####: 4262:                     test_info.should_run()
call    0 never executed
call    1 never executed
    #####: 4263:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4263-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4263-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 4263-block  2
    %%%%%: 4263-block  3
        -: 4264:                         : "suppressed");
    #####: 4265:  OutputXmlAttribute(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4265-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4265-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4265-block  2
call   14 never executed
    $$$$$: 4265-block  3
call   15 never executed
    $$$$$: 4265-block  4
call   16 never executed
    $$$$$: 4265-block  5
call   17 never executed
    #####: 4266:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4266-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4266-block  1
call    9 never executed
    $$$$$: 4266-block  2
call   10 never executed
    #####: 4267:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4267-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4267-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4267-block  2
call   14 never executed
    $$$$$: 4267-block  3
call   15 never executed
    $$$$$: 4267-block  4
call   16 never executed
    $$$$$: 4267-block  5
call   17 never executed
        -: 4268:      stream, kTestsuite, "timestamp",
    #####: 4269:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4269-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4269-block  1
call    9 never executed
    $$$$$: 4269-block  2
call   10 never executed
    #####: 4270:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4270-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4270-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4270-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4270-block  3
call   25 never executed
    $$$$$: 4270-block  4
call   26 never executed
    $$$$$: 4270-block  5
call   27 never executed
    $$$$$: 4270-block  6
call   28 never executed
    $$$$$: 4270-block  7
call   29 never executed
    $$$$$: 4270-block  8
call   30 never executed
    $$$$$: 4270-block  9
call   31 never executed
    $$$$$: 4270-block 10
call   32 never executed
        -: 4271:
    #####: 4272:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4273:}
        -: 4274:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4275:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4276:                                                   const TestResult& result) {
    #####: 4277:  int failures = 0;
    #####: 4278:  int skips = 0;
    #####: 4279:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4279-block  0
    %%%%%: 4279-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4279-block  2
    #####: 4280:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4280-block  0
call    0 never executed
call    1 never executed
    #####: 4281:    if (part.failed()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4282:      if (++failures == 1 && skips == 0) {
    %%%%%: 4282-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4282-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4282-block  2
    %%%%%: 4282-block  3
    %%%%%: 4282-block  4
branch  4 never executed
branch  5 never executed
    #####: 4283:        *stream << ">\n";
    %%%%%: 4283-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4284:      }
    #####: 4285:      const std::string location =
    %%%%%: 4285-block  0
call    0 never executed
    #####: 4286:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
call    0 never executed
    #####: 4287:                                                          part.line_number());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4287-block  0
call    7 never executed
    #####: 4288:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4288-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4288-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4288-block  2
call   13 never executed
    $$$$$: 4288-block  3
call   14 never executed
        -: 4289:      *stream << "      <failure message=\""
    #####: 4290:              << EscapeXmlAttribute(summary)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4290-block  0
call    3 never executed
    %%%%%: 4290-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4290-block  2
call    6 never executed
    $$$$$: 4290-block  3
call    7 never executed
    #####: 4291:              << "\" type=\"\">";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4291-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4291-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4292:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4292-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    %%%%%: 4292-block  1
call   12 never executed
    $$$$$: 4292-block  2
call   13 never executed
    $$$$$: 4292-block  3
call   14 never executed
    #####: 4293:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4293-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4293-block  1
call    9 never executed
call   10 never executed
    $$$$$: 4293-block  2
call   11 never executed
    $$$$$: 4293-block  3
call   12 never executed
    #####: 4294:      *stream << "</failure>\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4295:    } else if (part.skipped()) {
    %%%%%: 4295-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4296:      if (++skips == 1 && failures == 0) {
    %%%%%: 4296-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4296-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4296-block  2
    %%%%%: 4296-block  3
    %%%%%: 4296-block  4
branch  4 never executed
branch  5 never executed
    #####: 4297:        *stream << ">\n";
    %%%%%: 4297-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4298:      }
    #####: 4299:      const std::string location =
    %%%%%: 4299-block  0
call    0 never executed
    #####: 4300:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
call    0 never executed
    #####: 4301:                                                          part.line_number());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4301-block  0
call    7 never executed
    #####: 4302:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4302-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4302-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4302-block  2
call   13 never executed
    $$$$$: 4302-block  3
call   14 never executed
        -: 4303:      *stream << "      <skipped message=\""
    #####: 4304:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4304-block  0
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4304-block  1
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4304-block  2
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4304-block  3
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4304-block  4
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
    $$$$$: 4304-block  5
call   29 never executed
    $$$$$: 4304-block  6
call   30 never executed
    $$$$$: 4304-block  7
call   31 never executed
    $$$$$: 4304-block  8
call   32 never executed
    $$$$$: 4304-block  9
call   33 never executed
    $$$$$: 4304-block 10
call   34 never executed
    #####: 4305:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4305-block  0
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    %%%%%: 4305-block  1
call   12 never executed
    $$$$$: 4305-block  2
call   13 never executed
    $$$$$: 4305-block  3
call   14 never executed
    #####: 4306:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4306-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4306-block  1
call    9 never executed
call   10 never executed
    $$$$$: 4306-block  2
call   11 never executed
    $$$$$: 4306-block  3
call   12 never executed
    #####: 4307:      *stream << "</skipped>\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4308:    }
        -: 4309:  }
        -: 4310:
    #####: 4311:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4311-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4311-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4311-block  2
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4311-block  3
    %%%%%: 4311-block  4
    %%%%%: 4311-block  5
branch  8 never executed
branch  9 never executed
    #####: 4312:    *stream << " />\n";
    %%%%%: 4312-block  0
call    0 never executed
call    1 never executed
        -: 4313:  } else {
    #####: 4314:    if (failures == 0 && skips == 0) {
    %%%%%: 4314-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4314-block  1
branch  2 never executed
branch  3 never executed
    #####: 4315:      *stream << ">\n";
    %%%%%: 4315-block  0
call    0 never executed
call    1 never executed
        -: 4316:    }
    #####: 4317:    OutputXmlTestProperties(stream, result);
    %%%%%: 4317-block  0
call    0 never executed
    #####: 4318:    *stream << "    </testcase>\n";
call    0 never executed
call    1 never executed
        -: 4319:  }
    #####: 4320:}
    %%%%%: 4320-block  0
        -: 4321:
        -: 4322:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4323:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4324:                                                 const TestSuite& test_suite) {
    #####: 4325:  const std::string kTestsuite = "testsuite";
    %%%%%: 4325-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    %%%%%: 4325-block  1
call    7 never executed
    $$$$$: 4325-block  2
call    8 never executed
    $$$$$: 4325-block  3
call    9 never executed
    #####: 4326:  *stream << "  <" << kTestsuite;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4326-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4327:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4327-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4327-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4327-block  2
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4327-block  3
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
    $$$$$: 4327-block  4
call   29 never executed
    $$$$$: 4327-block  5
call   30 never executed
    $$$$$: 4327-block  6
call   31 never executed
    $$$$$: 4327-block  7
call   32 never executed
    $$$$$: 4327-block  8
call   33 never executed
    $$$$$: 4327-block  9
call   34 never executed
    $$$$$: 4327-block 10
call   35 never executed
    $$$$$: 4327-block 11
call   36 never executed
    #####: 4328:  OutputXmlAttribute(stream, kTestsuite, "tests",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4328-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4328-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4328-block  2
call   14 never executed
    $$$$$: 4328-block  3
call   15 never executed
    $$$$$: 4328-block  4
call   16 never executed
    $$$$$: 4328-block  5
call   17 never executed
    #####: 4329:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4329-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4329-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4329-block  2
call   16 never executed
    $$$$$: 4329-block  3
call   17 never executed
    $$$$$: 4329-block  4
call   18 never executed
    #####: 4330:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 4330-block  0
    %%%%%: 4330-block  1
branch  2 never executed
branch  3 never executed
    #####: 4331:    OutputXmlAttribute(stream, kTestsuite, "failures",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4331-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4331-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4331-block  2
call   14 never executed
    $$$$$: 4331-block  3
call   15 never executed
    $$$$$: 4331-block  4
call   16 never executed
    $$$$$: 4331-block  5
call   17 never executed
    #####: 4332:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4332-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4332-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4332-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4332-block  3
call   16 never executed
    $$$$$: 4332-block  4
call   17 never executed
    $$$$$: 4332-block  5
call   18 never executed
    #####: 4333:    OutputXmlAttribute(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4333-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4333-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4333-block  2
call   14 never executed
    $$$$$: 4333-block  3
call   15 never executed
    $$$$$: 4333-block  4
call   16 never executed
    $$$$$: 4333-block  5
call   17 never executed
        -: 4334:        stream, kTestsuite, "disabled",
    #####: 4335:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4335-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4335-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4335-block  2
call   16 never executed
    $$$$$: 4335-block  3
call   17 never executed
    $$$$$: 4335-block  4
call   18 never executed
    #####: 4336:    OutputXmlAttribute(stream, kTestsuite, "skipped",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4336-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4336-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4336-block  2
call   14 never executed
    $$$$$: 4336-block  3
call   15 never executed
    $$$$$: 4336-block  4
call   16 never executed
    $$$$$: 4336-block  5
call   17 never executed
    #####: 4337:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4337-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4337-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4337-block  2
call   16 never executed
    $$$$$: 4337-block  3
call   17 never executed
    $$$$$: 4337-block  4
call   18 never executed
        -: 4338:
    #####: 4339:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4339-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4339-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4339-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4339-block  3
call   25 never executed
    $$$$$: 4339-block  4
call   26 never executed
    $$$$$: 4339-block  5
call   27 never executed
    $$$$$: 4339-block  6
call   28 never executed
    $$$$$: 4339-block  7
call   29 never executed
    $$$$$: 4339-block  8
call   30 never executed
    $$$$$: 4339-block  9
call   31 never executed
    $$$$$: 4339-block 10
call   32 never executed
        -: 4340:
    #####: 4341:    OutputXmlAttribute(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4341-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4341-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4341-block  2
call   14 never executed
    $$$$$: 4341-block  3
call   15 never executed
    $$$$$: 4341-block  4
call   16 never executed
    $$$$$: 4341-block  5
call   17 never executed
    #####: 4342:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4342-block  0
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4342-block  1
call   11 never executed
    $$$$$: 4342-block  2
call   12 never executed
    #####: 4343:    OutputXmlAttribute(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4343-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4343-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4343-block  2
call   14 never executed
    $$$$$: 4343-block  3
call   15 never executed
    $$$$$: 4343-block  4
call   16 never executed
    $$$$$: 4343-block  5
call   17 never executed
        -: 4344:        stream, kTestsuite, "timestamp",
    #####: 4345:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4345-block  0
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4345-block  1
call   11 never executed
    $$$$$: 4345-block  2
call   12 never executed
    #####: 4346:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4346-block  0
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4346-block  1
call   13 never executed
call   14 never executed
    $$$$$: 4346-block  2
call   15 never executed
    $$$$$: 4346-block  3
call   16 never executed
        -: 4347:  }
    #####: 4348:  *stream << ">\n";
    %%%%%: 4348-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4349:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4349-block  0
    %%%%%: 4349-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4349-block  2
    #####: 4350:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4350-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4350-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4351:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4351-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4351-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -: 4352:  }
    #####: 4353:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4353-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4353-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4353-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4354:}
        -: 4355:
        -: 4356:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4357:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4358:                                                const UnitTest& unit_test) {
    #####: 4359:  const std::string kTestsuites = "testsuites";
    %%%%%: 4359-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    %%%%%: 4359-block  1
call    7 never executed
    $$$$$: 4359-block  2
call    8 never executed
    $$$$$: 4359-block  3
call    9 never executed
        -: 4360:
    #####: 4361:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4362:  *stream << "<" << kTestsuites;
    %%%%%: 4362-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4362-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4363:
    #####: 4364:  OutputXmlAttribute(stream, kTestsuites, "tests",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4364-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4364-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4364-block  2
call   14 never executed
    $$$$$: 4364-block  3
call   15 never executed
    $$$$$: 4364-block  4
call   16 never executed
    $$$$$: 4364-block  5
call   17 never executed
    #####: 4365:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4365-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4365-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4365-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4365-block  3
call   16 never executed
    $$$$$: 4365-block  4
call   17 never executed
    $$$$$: 4365-block  5
call   18 never executed
    #####: 4366:  OutputXmlAttribute(stream, kTestsuites, "failures",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4366-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4366-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4366-block  2
call   14 never executed
    $$$$$: 4366-block  3
call   15 never executed
    $$$$$: 4366-block  4
call   16 never executed
    $$$$$: 4366-block  5
call   17 never executed
    #####: 4367:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4367-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4367-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4367-block  2
call   16 never executed
    $$$$$: 4367-block  3
call   17 never executed
    $$$$$: 4367-block  4
call   18 never executed
    #####: 4368:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4368-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4368-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4368-block  2
call   14 never executed
    $$$$$: 4368-block  3
call   15 never executed
    $$$$$: 4368-block  4
call   16 never executed
    $$$$$: 4368-block  5
call   17 never executed
        -: 4369:      stream, kTestsuites, "disabled",
    #####: 4370:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4370-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4370-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4370-block  2
call   16 never executed
    $$$$$: 4370-block  3
call   17 never executed
    $$$$$: 4370-block  4
call   18 never executed
    #####: 4371:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4371-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4371-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4371-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4371-block  3
call   25 never executed
    $$$$$: 4371-block  4
call   26 never executed
    $$$$$: 4371-block  5
call   27 never executed
    $$$$$: 4371-block  6
call   28 never executed
    $$$$$: 4371-block  7
call   29 never executed
    $$$$$: 4371-block  8
call   30 never executed
    $$$$$: 4371-block  9
call   31 never executed
    $$$$$: 4371-block 10
call   32 never executed
    #####: 4372:  OutputXmlAttribute(stream, kTestsuites, "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4372-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4372-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4372-block  2
call   14 never executed
    $$$$$: 4372-block  3
call   15 never executed
    $$$$$: 4372-block  4
call   16 never executed
    $$$$$: 4372-block  5
call   17 never executed
    #####: 4373:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4373-block  0
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4373-block  1
call   11 never executed
    $$$$$: 4373-block  2
call   12 never executed
    #####: 4374:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4374-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4374-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4374-block  2
call   14 never executed
    $$$$$: 4374-block  3
call   15 never executed
    $$$$$: 4374-block  4
call   16 never executed
    $$$$$: 4374-block  5
call   17 never executed
        -: 4375:      stream, kTestsuites, "timestamp",
    #####: 4376:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4376-block  0
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4376-block  1
call   11 never executed
    $$$$$: 4376-block  2
call   12 never executed
        -: 4377:
    #####: 4378:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 4378-block  0
    %%%%%: 4378-block  1
branch  2 never executed
branch  3 never executed
    #####: 4379:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4379-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4379-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4379-block  2
call   14 never executed
    $$$$$: 4379-block  3
call   15 never executed
    $$$$$: 4379-block  4
call   16 never executed
    $$$$$: 4379-block  5
call   17 never executed
    #####: 4380:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4380-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4380-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4380-block  2
call   14 never executed
    $$$$$: 4380-block  3
call   15 never executed
    $$$$$: 4380-block  4
call   16 never executed
        -: 4381:  }
    #####: 4382:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4382-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4382-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4382-block  2
call   13 never executed
call   14 never executed
    $$$$$: 4382-block  3
call   15 never executed
    $$$$$: 4382-block  4
call   16 never executed
        -: 4383:
    #####: 4384:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4384-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4384-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4384-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4384-block  3
call   25 never executed
    $$$$$: 4384-block  4
call   26 never executed
    $$$$$: 4384-block  5
call   27 never executed
    $$$$$: 4384-block  6
call   28 never executed
    $$$$$: 4384-block  7
call   29 never executed
    $$$$$: 4384-block  8
call   30 never executed
    $$$$$: 4384-block  9
call   31 never executed
    $$$$$: 4384-block 10
call   32 never executed
    #####: 4385:  *stream << ">\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4386:
    #####: 4387:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4387-block  0
    %%%%%: 4387-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4387-block  2
    #####: 4388:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4388-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4388-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4388-block  2
branch 12 never executed
branch 13 never executed
    #####: 4389:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4389-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4389-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 4390:  }
        -: 4391:
        -: 4392:  // If there was a test failure outside of one of the test suites (like in a
        -: 4393:  // test environment) include that in the output.
    #####: 4394:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4394-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4394-block  1
branch  8 never executed
branch  9 never executed
    #####: 4395:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4395-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4396:  }
        -: 4397:
    #####: 4398:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4398-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4398-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4398-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4399:}
        -: 4400:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4401:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4402:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4403:  const std::string kTestsuites = "testsuites";
    %%%%%: 4403-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    %%%%%: 4403-block  1
call    7 never executed
    $$$$$: 4403-block  2
call    8 never executed
    $$$$$: 4403-block  3
call    9 never executed
        -: 4404:
    #####: 4405:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4406:  *stream << "<" << kTestsuites;
    %%%%%: 4406-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4406-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4407:
    #####: 4408:  int total_tests = 0;
    %%%%%: 4408-block  0
call    0 never executed
    #####: 4409:  for (auto test_suite : test_suites) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    %%%%%: 4409-block  0
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4409-block  1
call    9 never executed
call   10 never executed
    #####: 4410:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 4411:  }
    #####: 4412:  OutputXmlAttribute(stream, kTestsuites, "tests",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4412-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4412-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4412-block  2
call   14 never executed
    $$$$$: 4412-block  3
call   15 never executed
    $$$$$: 4412-block  4
call   16 never executed
    $$$$$: 4412-block  5
call   17 never executed
    #####: 4413:                     StreamableToString(total_tests));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4413-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 4413-block  1
call    7 never executed
    $$$$$: 4413-block  2
call    8 never executed
    #####: 4414:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4414-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4414-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4414-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4414-block  3
call   25 never executed
    $$$$$: 4414-block  4
call   26 never executed
    $$$$$: 4414-block  5
call   27 never executed
    $$$$$: 4414-block  6
call   28 never executed
    $$$$$: 4414-block  7
call   29 never executed
    $$$$$: 4414-block  8
call   30 never executed
    $$$$$: 4414-block  9
call   31 never executed
    $$$$$: 4414-block 10
call   32 never executed
    #####: 4415:  *stream << ">\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4416:
    #####: 4417:  for (auto test_suite : test_suites) {
    %%%%%: 4417-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    %%%%%: 4417-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4417-block  2
call    9 never executed
call   10 never executed
    %%%%%: 4417-block  3
call   11 never executed
    #####: 4418:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4419:  }
    #####: 4420:  *stream << "</" << kTestsuites << ">\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4420-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4420-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4421:}
        -: 4422:
        -: 4423:// Produces a string representing the test properties in a result as space
        -: 4424:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4425:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4426:    const TestResult& result) {
    #####: 4427:  Message attributes;
    %%%%%: 4427-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4427-block  1
call    4 never executed
    $$$$$: 4427-block  2
call    5 never executed
    #####: 4428:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4428-block  0
    %%%%%: 4428-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4429:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4429-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4430:    attributes << " " << property.key() << "="
    %%%%%: 4430-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4430-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4430-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
    $$$$$: 4430-block  3
call   16 never executed
    #####: 4431:        << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4431-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4431-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4431-block  2
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4431-block  3
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 4431-block  4
call   22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 4431-block  5
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
    $$$$$: 4431-block  6
call   32 never executed
    $$$$$: 4431-block  7
call   33 never executed
    $$$$$: 4431-block  8
call   34 never executed
    $$$$$: 4431-block  9
call   35 never executed
    $$$$$: 4431-block 10
call   36 never executed
    $$$$$: 4431-block 11
call   37 never executed
        -: 4432:  }
    #####: 4433:  return attributes.GetString();
    %%%%%: 4433-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4434:}
        -: 4435:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4436:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4437:    std::ostream* stream, const TestResult& result) {
    #####: 4438:  const std::string kProperties = "properties";
    %%%%%: 4438-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4438-block  1
call    7 never executed
    $$$$$: 4438-block  2
call    8 never executed
    #####: 4439:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4439-block  0
call    7 never executed
    $$$$$: 4439-block  1
call    8 never executed
        -: 4440:
    #####: 4441:  if (result.test_property_count() <= 0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4442:    return;
    %%%%%: 4442-block  0
        -: 4443:  }
        -: 4444:
    #####: 4445:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4445-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4445-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4445-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4446:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4446-block  0
    %%%%%: 4446-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4446-block  2
    #####: 4447:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4447-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4448:    *stream << "        <" << kProperty;
    %%%%%: 4448-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4448-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4449:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4449-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4449-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4449-block  2
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4449-block  3
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4449-block  4
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4449-block  5
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    $$$$$: 4449-block  6
call   30 never executed
    $$$$$: 4449-block  7
call   31 never executed
    $$$$$: 4449-block  8
call   32 never executed
    $$$$$: 4449-block  9
call   33 never executed
    $$$$$: 4449-block 10
call   34 never executed
    $$$$$: 4449-block 11
call   35 never executed
    #####: 4450:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4450-block  0
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4450-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4450-block  2
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4450-block  3
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4450-block  4
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    $$$$$: 4450-block  5
call   30 never executed
    $$$$$: 4450-block  6
call   31 never executed
    $$$$$: 4450-block  7
call   32 never executed
    $$$$$: 4450-block  8
call   33 never executed
    $$$$$: 4450-block  9
call   34 never executed
    $$$$$: 4450-block 10
call   35 never executed
    #####: 4451:    *stream << "/>\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4452:  }
    #####: 4453:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4453-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4453-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4453-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 4454:}
        -: 4455:
        -: 4456:// End XmlUnitTestResultPrinter
        -: 4457:
        -: 4458:// This class generates an JSON output file.
        -: 4459:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4460: public:
        -: 4461:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4462:
        -: 4463:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4464:
        -: 4465:  // Prints an JSON summary of all unit tests.
        -: 4466:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4467:                                const std::vector<TestSuite*>& test_suites);
        -: 4468:
        -: 4469: private:
        -: 4470:  // Returns an JSON-escaped copy of the input string str.
        -: 4471:  static std::string EscapeJson(const std::string& str);
        -: 4472:
        -: 4473:  //// Verifies that the given attribute belongs to the given element and
        -: 4474:  //// streams the attribute as JSON.
        -: 4475:  static void OutputJsonKey(std::ostream* stream,
        -: 4476:                            const std::string& element_name,
        -: 4477:                            const std::string& name,
        -: 4478:                            const std::string& value,
        -: 4479:                            const std::string& indent,
        -: 4480:                            bool comma = true);
        -: 4481:  static void OutputJsonKey(std::ostream* stream,
        -: 4482:                            const std::string& element_name,
        -: 4483:                            const std::string& name,
        -: 4484:                            int value,
        -: 4485:                            const std::string& indent,
        -: 4486:                            bool comma = true);
        -: 4487:
        -: 4488:  // Streams a test suite JSON stanza containing the given test result.
        -: 4489:  //
        -: 4490:  // Requires: result.Failed()
        -: 4491:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4492:                                               const TestResult& result);
        -: 4493:
        -: 4494:  // Streams a JSON representation of a TestResult object.
        -: 4495:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4496:                                   const TestResult& result);
        -: 4497:
        -: 4498:  // Streams a JSON representation of a TestInfo object.
        -: 4499:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4500:                                 const char* test_suite_name,
        -: 4501:                                 const TestInfo& test_info);
        -: 4502:
        -: 4503:  // Prints a JSON representation of a TestSuite object
        -: 4504:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4505:                                 const TestSuite& test_suite);
        -: 4506:
        -: 4507:  // Prints a JSON summary of unit_test to output stream out.
        -: 4508:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4509:                                const UnitTest& unit_test);
        -: 4510:
        -: 4511:  // Produces a string representing the test properties in a result as
        -: 4512:  // a JSON dictionary.
        -: 4513:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4514:                                          const std::string& indent);
        -: 4515:
        -: 4516:  // The output file.
        -: 4517:  const std::string output_file_;
        -: 4518:
        -: 4519:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 4520:};
        -: 4521:
        -: 4522:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4523:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    %%%%%: 4523-block  0
call    0 never executed
call    1 never executed
    #####: 4524:    : output_file_(output_file) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4524-block  0
call   13 never executed
call   14 never executed
    $$$$$: 4524-block  1
call   15 never executed
    $$$$$: 4524-block  2
call   16 never executed
    $$$$$: 4524-block  3
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4524-block  4
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 4525:  if (output_file_.empty()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4526:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4526-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4526-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4526-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4526-block  3
call   12 never executed
    $$$$$: 4526-block  4
call   13 never executed
        -: 4527:  }
    #####: 4528:}
    %%%%%: 4528-block  0
        -: 4529:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4530:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4531:                                                  int /*iteration*/) {
    #####: 4532:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4532-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4533:  std::stringstream stream;
    %%%%%: 4533-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4533-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4533-block  2
call    6 never executed
call    7 never executed
    #####: 4534:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4534-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4535:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4535-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4535-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4535-block  2
    %%%%%: 4535-block  3
branch  8 never executed
branch  9 never executed
    %%%%%: 4535-block  4
    %%%%%: 4535-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4535-block  6
call   13 never executed
call   14 never executed
    $$$$$: 4535-block  7
call   15 never executed
    $$$$$: 4535-block  8
call   16 never executed
    #####: 4536:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4537:}
        -: 4538:
        -: 4539:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4540:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4541:  Message m;
    %%%%%: 4541-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4541-block  1
call    4 never executed
    $$$$$: 4541-block  2
call    5 never executed
        -: 4542:
    #####: 4543:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4543-block  0
    %%%%%: 4543-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4544:    const char ch = str[i];
    %%%%%: 4544-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4545:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4546:      case '\\':
        -: 4547:      case '"':
        -: 4548:      case '/':
    #####: 4549:        m << '\\' << ch;
    %%%%%: 4549-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4549-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4549-block  2
call    8 never executed
    $$$$$: 4549-block  3
call    9 never executed
    #####: 4550:        break;
    #####: 4551:      case '\b':
    #####: 4552:        m << "\\b";
    %%%%%: 4552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4553:        break;
    %%%%%: 4553-block  0
    #####: 4554:      case '\t':
    #####: 4555:        m << "\\t";
    %%%%%: 4555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4556:        break;
    %%%%%: 4556-block  0
    #####: 4557:      case '\n':
    #####: 4558:        m << "\\n";
    %%%%%: 4558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4559:        break;
    %%%%%: 4559-block  0
    #####: 4560:      case '\f':
    #####: 4561:        m << "\\f";
    %%%%%: 4561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4562:        break;
    %%%%%: 4562-block  0
    #####: 4563:      case '\r':
    #####: 4564:        m << "\\r";
    %%%%%: 4564-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4565:        break;
    %%%%%: 4565-block  0
    #####: 4566:      default:
    #####: 4567:        if (ch < ' ') {
    %%%%%: 4567-block  0
branch  0 never executed
branch  1 never executed
    #####: 4568:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4568-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4568-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4568-block  3
call   12 never executed
call   13 never executed
    $$$$$: 4568-block  4
call   14 never executed
    $$$$$: 4568-block  5
call   15 never executed
        -: 4569:        } else {
    #####: 4570:          m << ch;
    %%%%%: 4570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4571:        }
    #####: 4572:        break;
    %%%%%: 4572-block  0
        -: 4573:    }
        -: 4574:  }
        -: 4575:
    #####: 4576:  return m.GetString();
    %%%%%: 4576-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4577:}
        -: 4578:
        -: 4579:// The following routines generate an JSON representation of a UnitTest
        -: 4580:// object.
        -: 4581:
        -: 4582:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEl called 0 returned 0% blocks executed 0%
    #####: 4583:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4584:  ::std::stringstream ss;
    %%%%%: 4584-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4584-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4584-block  2
call    6 never executed
call    7 never executed
    #####: 4585:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4585-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4585-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4586:  return ss.str();
    %%%%%: 4586-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4587:}
        -: 4588:
        -: 4589:// Converts the given epoch time in milliseconds to a date string in the
        -: 4590:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339El called 0 returned 0% blocks executed 0%
    #####: 4591:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
    #####: 4592:  struct tm time_struct;
    %%%%%: 4592-block  0
call    0 never executed
    #####: 4593:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4594:    return "";
    %%%%%: 4594-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4594-block  1
call    5 never executed
call    6 never executed
    $$$$$: 4594-block  2
call    7 never executed
    $$$$$: 4594-block  3
call    8 never executed
        -: 4595:  // YYYY-MM-DDThh:mm:ss
    #####: 4596:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4596-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4596-block  1
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4596-block  2
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 4596-block  3
call   24 never executed
    $$$$$: 4596-block  4
call   25 never executed
    $$$$$: 4596-block  5
call   26 never executed
    $$$$$: 4596-block  6
call   27 never executed
    $$$$$: 4596-block  7
call   28 never executed
    $$$$$: 4596-block  8
call   29 never executed
    $$$$$: 4596-block  9
call   30 never executed
    #####: 4597:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4597-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4597-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4597-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4597-block  3
call   21 never executed
    $$$$$: 4597-block  4
call   22 never executed
    $$$$$: 4597-block  5
call   23 never executed
    $$$$$: 4597-block  6
call   24 never executed
    $$$$$: 4597-block  7
call   25 never executed
    $$$$$: 4597-block  8
call   26 never executed
    #####: 4598:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4598-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4598-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4598-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4598-block  3
call   21 never executed
    $$$$$: 4598-block  4
call   22 never executed
    $$$$$: 4598-block  5
call   23 never executed
    $$$$$: 4598-block  6
call   24 never executed
    $$$$$: 4598-block  7
call   25 never executed
    $$$$$: 4598-block  8
call   26 never executed
    #####: 4599:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4599-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4599-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4599-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4599-block  3
call   21 never executed
    $$$$$: 4599-block  4
call   22 never executed
    $$$$$: 4599-block  5
call   23 never executed
    $$$$$: 4599-block  6
call   24 never executed
    $$$$$: 4599-block  7
call   25 never executed
    $$$$$: 4599-block  8
call   26 never executed
    #####: 4600:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4600-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4600-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4600-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4600-block  3
call   14 never executed
    %%%%%: 4600-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4600-block  5
call   21 never executed
    $$$$$: 4600-block  6
call   22 never executed
    $$$$$: 4600-block  7
call   23 never executed
    $$$$$: 4600-block  8
call   24 never executed
    $$$$$: 4600-block  9
call   25 never executed
    $$$$$: 4600-block 10
call   26 never executed
    #####: 4601:      String::FormatIntWidth2(time_struct.tm_sec) + "Z";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4601-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4601-block  1
call   11 never executed
    $$$$$: 4601-block  2
call   12 never executed
        -: 4602:}
        -: 4603:
function _ZN7testing8internalL6IndentEm called 0 returned 0% blocks executed 0%
    #####: 4604:static inline std::string Indent(size_t width) {
    #####: 4605:  return std::string(width, ' ');
    %%%%%: 4605-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4605-block  1
call    5 never executed
call    6 never executed
    $$$$$: 4605-block  2
call    7 never executed
    $$$$$: 4605-block  3
call    8 never executed
        -: 4606:}
        -: 4607:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4608:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4609:    std::ostream* stream,
        -: 4610:    const std::string& element_name,
        -: 4611:    const std::string& name,
        -: 4612:    const std::string& value,
        -: 4613:    const std::string& indent,
        -: 4614:    bool comma) {
        -: 4615:  const std::vector<std::string>& allowed_names =
    #####: 4616:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4616-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4616-block  1
call    4 never executed
    $$$$$: 4616-block  2
call    5 never executed
        -: 4617:
    #####: 4618:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4618-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4618-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4618-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4618-block  3
call   24 never executed
call   25 never executed
    %%%%%: 4618-block  4
call   26 never executed
call   27 never executed
    $$$$$: 4618-block  5
call   28 never executed
    $$$$$: 4618-block  6
call   29 never executed
    $$$$$: 4618-block  7
call   30 never executed
        -: 4619:                   allowed_names.end())
        -: 4620:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4621:      << "\".";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4621-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4621-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4621-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4621-block  3
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4621-block  4
call   18 never executed
branch 19 never executed
branch 20 never executed
        -: 4622:
    #####: 4623:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4623-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4623-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4623-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4623-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4623-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4623-block  5
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4623-block  6
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 4623-block  7
call   26 never executed
call   27 never executed
    $$$$$: 4623-block  8
call   28 never executed
    $$$$$: 4623-block  9
call   29 never executed
    #####: 4624:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4625:    *stream << ",\n";
    %%%%%: 4625-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4626:}
        -: 4627:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4628:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4629:    std::ostream* stream,
        -: 4630:    const std::string& element_name,
        -: 4631:    const std::string& name,
        -: 4632:    int value,
        -: 4633:    const std::string& indent,
        -: 4634:    bool comma) {
        -: 4635:  const std::vector<std::string>& allowed_names =
    #####: 4636:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4636-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4636-block  1
call    4 never executed
    $$$$$: 4636-block  2
call    5 never executed
        -: 4637:
    #####: 4638:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4638-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4638-block  1
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4638-block  2
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4638-block  3
call   24 never executed
call   25 never executed
    %%%%%: 4638-block  4
call   26 never executed
call   27 never executed
    $$$$$: 4638-block  5
call   28 never executed
    $$$$$: 4638-block  6
call   29 never executed
    $$$$$: 4638-block  7
call   30 never executed
        -: 4639:                   allowed_names.end())
        -: 4640:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4641:      << "\".";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4641-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4641-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4641-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4641-block  3
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4641-block  4
call   18 never executed
branch 19 never executed
branch 20 never executed
        -: 4642:
    #####: 4643:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4643-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4643-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4643-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4643-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4643-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4643-block  5
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4643-block  6
call   23 never executed
call   24 never executed
    $$$$$: 4643-block  7
call   25 never executed
    $$$$$: 4643-block  8
call   26 never executed
    #####: 4644:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4645:    *stream << ",\n";
    %%%%%: 4645-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4646:}
        -: 4647:
        -: 4648:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4649:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4650:    ::std::ostream* stream, const TestResult& result) {
        -: 4651:  // Output the boilerplate for a new test suite.
    #####: 4652:  *stream << Indent(4) << "{\n";
    %%%%%: 4652-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4652-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4652-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4652-block  3
call   12 never executed
    $$$$$: 4652-block  4
call   13 never executed
    #####: 4653:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4653-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4653-block  1
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4653-block  2
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4653-block  3
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
    $$$$$: 4653-block  4
call   41 never executed
    $$$$$: 4653-block  5
call   42 never executed
    $$$$$: 4653-block  6
call   43 never executed
    $$$$$: 4653-block  7
call   44 never executed
    $$$$$: 4653-block  8
call   45 never executed
    $$$$$: 4653-block  9
call   46 never executed
    $$$$$: 4653-block 10
call   47 never executed
    $$$$$: 4653-block 11
call   48 never executed
    $$$$$: 4653-block 12
call   49 never executed
    $$$$$: 4653-block 13
call   50 never executed
    $$$$$: 4653-block 14
call   51 never executed
    $$$$$: 4653-block 15
call   52 never executed
    $$$$$: 4653-block 16
call   53 never executed
    $$$$$: 4653-block 17
call   54 never executed
    #####: 4654:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4654-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4654-block  1
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4654-block  2
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    $$$$$: 4654-block  3
call   30 never executed
    $$$$$: 4654-block  4
call   31 never executed
    $$$$$: 4654-block  5
call   32 never executed
    $$$$$: 4654-block  6
call   33 never executed
    $$$$$: 4654-block  7
call   34 never executed
    $$$$$: 4654-block  8
call   35 never executed
    $$$$$: 4654-block  9
call   36 never executed
    $$$$$: 4654-block 10
call   37 never executed
    $$$$$: 4654-block 11
call   38 never executed
    $$$$$: 4654-block 12
call   39 never executed
    #####: 4655:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 4655-block  0
    %%%%%: 4655-block  1
branch  2 never executed
branch  3 never executed
    #####: 4656:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4656-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4656-block  1
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4656-block  2
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4656-block  3
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    $$$$$: 4656-block  4
call   30 never executed
    $$$$$: 4656-block  5
call   31 never executed
    $$$$$: 4656-block  6
call   32 never executed
    $$$$$: 4656-block  7
call   33 never executed
    $$$$$: 4656-block  8
call   34 never executed
    $$$$$: 4656-block  9
call   35 never executed
    $$$$$: 4656-block 10
call   36 never executed
    $$$$$: 4656-block 11
call   37 never executed
    $$$$$: 4656-block 12
call   38 never executed
    $$$$$: 4656-block 13
call   39 never executed
    #####: 4657:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4657-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4657-block  1
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4657-block  2
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    $$$$$: 4657-block  3
call   30 never executed
    $$$$$: 4657-block  4
call   31 never executed
    $$$$$: 4657-block  5
call   32 never executed
    $$$$$: 4657-block  6
call   33 never executed
    $$$$$: 4657-block  7
call   34 never executed
    $$$$$: 4657-block  8
call   35 never executed
    $$$$$: 4657-block  9
call   36 never executed
    $$$$$: 4657-block 10
call   37 never executed
    $$$$$: 4657-block 11
call   38 never executed
    $$$$$: 4657-block 12
call   39 never executed
    #####: 4658:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4658-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4658-block  1
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4658-block  2
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    $$$$$: 4658-block  3
call   30 never executed
    $$$$$: 4658-block  4
call   31 never executed
    $$$$$: 4658-block  5
call   32 never executed
    $$$$$: 4658-block  6
call   33 never executed
    $$$$$: 4658-block  7
call   34 never executed
    $$$$$: 4658-block  8
call   35 never executed
    $$$$$: 4658-block  9
call   36 never executed
    $$$$$: 4658-block 10
call   37 never executed
    $$$$$: 4658-block 11
call   38 never executed
    $$$$$: 4658-block 12
call   39 never executed
    #####: 4659:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4659-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4659-block  1
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4659-block  2
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    $$$$$: 4659-block  3
call   30 never executed
    $$$$$: 4659-block  4
call   31 never executed
    $$$$$: 4659-block  5
call   32 never executed
    $$$$$: 4659-block  6
call   33 never executed
    $$$$$: 4659-block  7
call   34 never executed
    $$$$$: 4659-block  8
call   35 never executed
    $$$$$: 4659-block  9
call   36 never executed
    $$$$$: 4659-block 10
call   37 never executed
    $$$$$: 4659-block 11
call   38 never executed
    $$$$$: 4659-block 12
call   39 never executed
    #####: 4660:    OutputJsonKey(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4660-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4660-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4660-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4660-block  3
call   25 never executed
    $$$$$: 4660-block  4
call   26 never executed
    $$$$$: 4660-block  5
call   27 never executed
    $$$$$: 4660-block  6
call   28 never executed
    $$$$$: 4660-block  7
call   29 never executed
    $$$$$: 4660-block  8
call   30 never executed
    $$$$$: 4660-block  9
call   31 never executed
    $$$$$: 4660-block 10
call   32 never executed
    #####: 4661:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4661-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4661-block  1
call    9 never executed
    $$$$$: 4661-block  2
call   10 never executed
    #####: 4662:                  Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 4662-block  0
call    5 never executed
    $$$$$: 4662-block  1
call    6 never executed
    #####: 4663:    OutputJsonKey(stream, "testsuite", "timestamp",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4663-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4663-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4663-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4663-block  3
call   25 never executed
    $$$$$: 4663-block  4
call   26 never executed
    $$$$$: 4663-block  5
call   27 never executed
    $$$$$: 4663-block  6
call   28 never executed
    $$$$$: 4663-block  7
call   29 never executed
    $$$$$: 4663-block  8
call   30 never executed
    $$$$$: 4663-block  9
call   31 never executed
    $$$$$: 4663-block 10
call   32 never executed
    #####: 4664:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4664-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4664-block  1
call    9 never executed
    $$$$$: 4664-block  2
call   10 never executed
    #####: 4665:                  Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 4665-block  0
call    5 never executed
    $$$$$: 4665-block  1
call    6 never executed
        -: 4666:  }
    #####: 4667:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4667-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4667-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4667-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4667-block  3
call   12 never executed
    $$$$$: 4667-block  4
call   13 never executed
        -: 4668:
        -: 4669:  // Output the boilerplate for a new test case.
    #####: 4670:  *stream << Indent(8) << "{\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4670-block  0
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4670-block  1
call   10 never executed
call   11 never executed
    $$$$$: 4670-block  2
call   12 never executed
    $$$$$: 4670-block  3
call   13 never executed
    #####: 4671:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4671-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4671-block  1
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4671-block  2
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4671-block  3
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
    $$$$$: 4671-block  4
call   41 never executed
    $$$$$: 4671-block  5
call   42 never executed
    $$$$$: 4671-block  6
call   43 never executed
    $$$$$: 4671-block  7
call   44 never executed
    $$$$$: 4671-block  8
call   45 never executed
    $$$$$: 4671-block  9
call   46 never executed
    $$$$$: 4671-block 10
call   47 never executed
    $$$$$: 4671-block 11
call   48 never executed
    $$$$$: 4671-block 12
call   49 never executed
    $$$$$: 4671-block 13
call   50 never executed
    $$$$$: 4671-block 14
call   51 never executed
    $$$$$: 4671-block 15
call   52 never executed
    $$$$$: 4671-block 16
call   53 never executed
    $$$$$: 4671-block 17
call   54 never executed
    #####: 4672:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4672-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4672-block  1
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4672-block  2
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4672-block  3
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
    $$$$$: 4672-block  4
call   41 never executed
    $$$$$: 4672-block  5
call   42 never executed
    $$$$$: 4672-block  6
call   43 never executed
    $$$$$: 4672-block  7
call   44 never executed
    $$$$$: 4672-block  8
call   45 never executed
    $$$$$: 4672-block  9
call   46 never executed
    $$$$$: 4672-block 10
call   47 never executed
    $$$$$: 4672-block 11
call   48 never executed
    $$$$$: 4672-block 12
call   49 never executed
    $$$$$: 4672-block 13
call   50 never executed
    $$$$$: 4672-block 14
call   51 never executed
    $$$$$: 4672-block 15
call   52 never executed
    $$$$$: 4672-block 16
call   53 never executed
    $$$$$: 4672-block 17
call   54 never executed
    #####: 4673:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4673-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4673-block  1
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4673-block  2
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4673-block  3
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
    $$$$$: 4673-block  4
call   41 never executed
    $$$$$: 4673-block  5
call   42 never executed
    $$$$$: 4673-block  6
call   43 never executed
    $$$$$: 4673-block  7
call   44 never executed
    $$$$$: 4673-block  8
call   45 never executed
    $$$$$: 4673-block  9
call   46 never executed
    $$$$$: 4673-block 10
call   47 never executed
    $$$$$: 4673-block 11
call   48 never executed
    $$$$$: 4673-block 12
call   49 never executed
    $$$$$: 4673-block 13
call   50 never executed
    $$$$$: 4673-block 14
call   51 never executed
    $$$$$: 4673-block 15
call   52 never executed
    $$$$$: 4673-block 16
call   53 never executed
    $$$$$: 4673-block 17
call   54 never executed
    #####: 4674:  OutputJsonKey(stream, "testcase", "timestamp",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4674-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4674-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4674-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4674-block  3
call   25 never executed
    $$$$$: 4674-block  4
call   26 never executed
    $$$$$: 4674-block  5
call   27 never executed
    $$$$$: 4674-block  6
call   28 never executed
    $$$$$: 4674-block  7
call   29 never executed
    $$$$$: 4674-block  8
call   30 never executed
    $$$$$: 4674-block  9
call   31 never executed
    $$$$$: 4674-block 10
call   32 never executed
    #####: 4675:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4675-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4675-block  1
call    9 never executed
    $$$$$: 4675-block  2
call   10 never executed
    #####: 4676:                Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 4676-block  0
call    5 never executed
    $$$$$: 4676-block  1
call    6 never executed
    #####: 4677:  OutputJsonKey(stream, "testcase", "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4677-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4677-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4677-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4677-block  3
call   25 never executed
    $$$$$: 4677-block  4
call   26 never executed
    $$$$$: 4677-block  5
call   27 never executed
    $$$$$: 4677-block  6
call   28 never executed
    $$$$$: 4677-block  7
call   29 never executed
    $$$$$: 4677-block  8
call   30 never executed
    $$$$$: 4677-block  9
call   31 never executed
    $$$$$: 4677-block 10
call   32 never executed
    #####: 4678:                FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4678-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4678-block  1
call    9 never executed
    $$$$$: 4678-block  2
call   10 never executed
    #####: 4679:                Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 4679-block  0
call    5 never executed
    $$$$$: 4679-block  1
call    6 never executed
    #####: 4680:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4680-block  0
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4680-block  1
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 4680-block  2
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4680-block  3
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
    $$$$$: 4680-block  4
call   41 never executed
    $$$$$: 4680-block  5
call   42 never executed
    $$$$$: 4680-block  6
call   43 never executed
    $$$$$: 4680-block  7
call   44 never executed
    $$$$$: 4680-block  8
call   45 never executed
    $$$$$: 4680-block  9
call   46 never executed
    $$$$$: 4680-block 10
call   47 never executed
    $$$$$: 4680-block 11
call   48 never executed
    $$$$$: 4680-block 12
call   49 never executed
    $$$$$: 4680-block 13
call   50 never executed
    $$$$$: 4680-block 14
call   51 never executed
    $$$$$: 4680-block 15
call   52 never executed
    $$$$$: 4680-block 16
call   53 never executed
    $$$$$: 4680-block 17
call   54 never executed
    #####: 4681:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4681-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4681-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4681-block  2
call   16 never executed
    $$$$$: 4681-block  3
call   17 never executed
    $$$$$: 4681-block  4
call   18 never executed
    $$$$$: 4681-block  5
call   19 never executed
        -: 4682:
        -: 4683:  // Output the actual test result.
    #####: 4684:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4685:
        -: 4686:  // Finish the test suite.
    #####: 4687:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4687-block  0
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4687-block  1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4687-block  2
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4687-block  3
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 4687-block  4
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    $$$$$: 4687-block  5
call   26 never executed
    $$$$$: 4687-block  6
call   27 never executed
    $$$$$: 4687-block  7
call   28 never executed
    $$$$$: 4687-block  8
call   29 never executed
    #####: 4688:}
        -: 4689:
        -: 4690:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4691:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4692:                                                   const char* test_suite_name,
        -: 4693:                                                   const TestInfo& test_info) {
    #####: 4694:  const TestResult& result = *test_info.result();
    %%%%%: 4694-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4695:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4695-block  0
call    7 never executed
    $$$$$: 4695-block  1
call    8 never executed
    #####: 4696:  const std::string kIndent = Indent(10);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4696-block  0
call    4 never executed
        -: 4697:
    #####: 4698:  *stream << Indent(8) << "{\n";
    %%%%%: 4698-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4698-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4698-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4698-block  3
call   12 never executed
call   13 never executed
    $$$$$: 4698-block  4
call   14 never executed
    $$$$$: 4698-block  5
call   15 never executed
    #####: 4699:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4699-block  0
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4699-block  1
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4699-block  2
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4699-block  3
call   27 never executed
    $$$$$: 4699-block  4
call   28 never executed
    $$$$$: 4699-block  5
call   29 never executed
    $$$$$: 4699-block  6
call   30 never executed
    $$$$$: 4699-block  7
call   31 never executed
    $$$$$: 4699-block  8
call   32 never executed
    $$$$$: 4699-block  9
call   33 never executed
    $$$$$: 4699-block 10
call   34 never executed
        -: 4700:
    #####: 4701:  if (test_info.value_param() != nullptr) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4702:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4702-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4702-block  1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4702-block  2
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4702-block  3
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4702-block  4
call   27 never executed
    $$$$$: 4702-block  5
call   28 never executed
    $$$$$: 4702-block  6
call   29 never executed
    $$$$$: 4702-block  7
call   30 never executed
    $$$$$: 4702-block  8
call   31 never executed
    $$$$$: 4702-block  9
call   32 never executed
    $$$$$: 4702-block 10
call   33 never executed
    $$$$$: 4702-block 11
call   34 never executed
        -: 4703:                  kIndent);
        -: 4704:  }
    #####: 4705:  if (test_info.type_param() != nullptr) {
    %%%%%: 4705-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4706:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4706-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4706-block  1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4706-block  2
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4706-block  3
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4706-block  4
call   27 never executed
    $$$$$: 4706-block  5
call   28 never executed
    $$$$$: 4706-block  6
call   29 never executed
    $$$$$: 4706-block  7
call   30 never executed
    $$$$$: 4706-block  8
call   31 never executed
    $$$$$: 4706-block  9
call   32 never executed
    $$$$$: 4706-block 10
call   33 never executed
    $$$$$: 4706-block 11
call   34 never executed
        -: 4707:                  kIndent);
        -: 4708:  }
    #####: 4709:  if (GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4709-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4709-block  1
    %%%%%: 4709-block  2
branch  2 never executed
branch  3 never executed
    #####: 4710:    OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4710-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4710-block  1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4710-block  2
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4710-block  3
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4710-block  4
call   27 never executed
    $$$$$: 4710-block  5
call   28 never executed
    $$$$$: 4710-block  6
call   29 never executed
    $$$$$: 4710-block  7
call   30 never executed
    $$$$$: 4710-block  8
call   31 never executed
    $$$$$: 4710-block  9
call   32 never executed
    $$$$$: 4710-block 10
call   33 never executed
    $$$$$: 4710-block 11
call   34 never executed
    #####: 4711:    OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4711-block  0
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4711-block  1
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4711-block  2
call   16 never executed
    $$$$$: 4711-block  3
call   17 never executed
    $$$$$: 4711-block  4
call   18 never executed
    $$$$$: 4711-block  5
call   19 never executed
    #####: 4712:    *stream << "\n" << Indent(8) << "}";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4712-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4712-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4712-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4712-block  3
call   15 never executed
call   16 never executed
    $$$$$: 4712-block  4
call   17 never executed
    $$$$$: 4712-block  5
call   18 never executed
    #####: 4713:    return;
        -: 4714:  }
        -: 4715:
    #####: 4716:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4716-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4716-block  1
    %%%%%: 4716-block  2
    %%%%%: 4716-block  3
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4716-block  4
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4716-block  5
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4716-block  6
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4716-block  7
call   27 never executed
    $$$$$: 4716-block  8
call   28 never executed
    $$$$$: 4716-block  9
call   29 never executed
    $$$$$: 4716-block 10
call   30 never executed
    $$$$$: 4716-block 11
call   31 never executed
    $$$$$: 4716-block 12
call   32 never executed
    $$$$$: 4716-block 13
call   33 never executed
    $$$$$: 4716-block 14
call   34 never executed
    #####: 4717:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
call    1 never executed
    #####: 4718:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4718-block  0
    %%%%%: 4718-block  1
    %%%%%: 4718-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4718-block  3
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4718-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4718-block  5
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    $$$$$: 4718-block  6
call   27 never executed
    $$$$$: 4718-block  7
call   28 never executed
    $$$$$: 4718-block  8
call   29 never executed
    $$$$$: 4718-block  9
call   30 never executed
    $$$$$: 4718-block 10
call   31 never executed
    $$$$$: 4718-block 11
call   32 never executed
    $$$$$: 4718-block 12
call   33 never executed
    $$$$$: 4718-block 13
call   34 never executed
    #####: 4719:                test_info.should_run()
call    0 never executed
call    1 never executed
    #####: 4720:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4720-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4720-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 4720-block  2
    %%%%%: 4720-block  3
        -: 4721:                    : "SUPPRESSED",
        -: 4722:                kIndent);
    #####: 4723:  OutputJsonKey(stream, kTestsuite, "timestamp",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4723-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4723-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4723-block  2
call   14 never executed
    $$$$$: 4723-block  3
call   15 never executed
    $$$$$: 4723-block  4
call   16 never executed
    $$$$$: 4723-block  5
call   17 never executed
    #####: 4724:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4724-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4724-block  1
call    9 never executed
    $$$$$: 4724-block  2
call   10 never executed
        -: 4725:                kIndent);
    #####: 4726:  OutputJsonKey(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4726-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4726-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4726-block  2
call   14 never executed
    $$$$$: 4726-block  3
call   15 never executed
    $$$$$: 4726-block  4
call   16 never executed
    $$$$$: 4726-block  5
call   17 never executed
    #####: 4727:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4727-block  0
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4727-block  1
call    9 never executed
    $$$$$: 4727-block  2
call   10 never executed
    #####: 4728:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4728-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4728-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4728-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4728-block  3
call   25 never executed
    $$$$$: 4728-block  4
call   26 never executed
    $$$$$: 4728-block  5
call   27 never executed
    $$$$$: 4728-block  6
call   28 never executed
    $$$$$: 4728-block  7
call   29 never executed
    $$$$$: 4728-block  8
call   30 never executed
    $$$$$: 4728-block  9
call   31 never executed
    $$$$$: 4728-block 10
call   32 never executed
        -: 4729:                false);
    #####: 4730:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4730-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4730-block  1
call    9 never executed
call   10 never executed
    $$$$$: 4730-block  2
call   11 never executed
    $$$$$: 4730-block  3
call   12 never executed
        -: 4731:
    #####: 4732:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4733:}
        -: 4734:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4735:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4736:                                                     const TestResult& result) {
    #####: 4737:  const std::string kIndent = Indent(10);
    %%%%%: 4737-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4737-block  1
call    5 never executed
        -: 4738:
    #####: 4739:  int failures = 0;
    #####: 4740:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4740-block  0
    %%%%%: 4740-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4740-block  2
    #####: 4741:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4741-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4742:    if (part.failed()) {
    %%%%%: 4742-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4743:      *stream << ",\n";
    %%%%%: 4743-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4744:      if (++failures == 1) {
    %%%%%: 4744-block  0
branch  0 never executed
branch  1 never executed
    #####: 4745:        *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4745-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4745-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4745-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4745-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
        -: 4746:      }
    #####: 4747:      const std::string location =
    %%%%%: 4747-block  0
call    0 never executed
    #####: 4748:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
call    0 never executed
    #####: 4749:                                                          part.line_number());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4749-block  0
call    7 never executed
    #####: 4750:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4750-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4750-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4750-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    %%%%%: 4750-block  3
call   18 never executed
    $$$$$: 4750-block  4
call   19 never executed
    $$$$$: 4750-block  5
call   20 never executed
    $$$$$: 4750-block  6
call   21 never executed
        -: 4751:      *stream << kIndent << "  {\n"
        -: 4752:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4753:              << kIndent << "    \"type\": \"\"\n"
    #####: 4754:              << kIndent << "  }";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4754-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4754-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4754-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4754-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4754-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4754-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 4754-block  6
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 4754-block  7
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 4754-block  8
call   28 never executed
branch 29 never executed
branch 30 never executed
        -: 4755:    }
        -: 4756:  }
        -: 4757:
    #####: 4758:  if (failures > 0)
    %%%%%: 4758-block  0
branch  0 never executed
branch  1 never executed
    #####: 4759:    *stream << "\n" << kIndent << "]";
    %%%%%: 4759-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4759-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4759-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4760:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4760-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4760-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4760-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4760-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4760-block  4
call   15 never executed
call   16 never executed
    $$$$$: 4760-block  5
call   17 never executed
    $$$$$: 4760-block  6
call   18 never executed
    #####: 4761:}
        -: 4762:
        -: 4763:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4764:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4765:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4766:  const std::string kTestsuite = "testsuite";
    %%%%%: 4766-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 4766-block  1
call    8 never executed
    $$$$$: 4766-block  2
call    9 never executed
    #####: 4767:  const std::string kIndent = Indent(6);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4767-block  0
call    5 never executed
        -: 4768:
    #####: 4769:  *stream << Indent(4) << "{\n";
    %%%%%: 4769-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4769-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4769-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4769-block  3
call   12 never executed
call   13 never executed
    $$$$$: 4769-block  4
call   14 never executed
    $$$$$: 4769-block  5
call   15 never executed
    #####: 4770:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4770-block  0
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4770-block  1
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4770-block  2
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
    $$$$$: 4770-block  3
call   29 never executed
    $$$$$: 4770-block  4
call   30 never executed
    $$$$$: 4770-block  5
call   31 never executed
    $$$$$: 4770-block  6
call   32 never executed
    $$$$$: 4770-block  7
call   33 never executed
    $$$$$: 4770-block  8
call   34 never executed
    $$$$$: 4770-block  9
call   35 never executed
    $$$$$: 4770-block 10
call   36 never executed
    #####: 4771:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4771-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4771-block  1
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4771-block  2
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4771-block  3
call   20 never executed
    $$$$$: 4771-block  4
call   21 never executed
    $$$$$: 4771-block  5
call   22 never executed
    $$$$$: 4771-block  6
call   23 never executed
        -: 4772:                kIndent);
    #####: 4773:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 4773-block  0
    %%%%%: 4773-block  1
branch  2 never executed
branch  3 never executed
    #####: 4774:    OutputJsonKey(stream, kTestsuite, "failures",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4774-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4774-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4774-block  2
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4774-block  3
call   17 never executed
    $$$$$: 4774-block  4
call   18 never executed
    $$$$$: 4774-block  5
call   19 never executed
    $$$$$: 4774-block  6
call   20 never executed
    #####: 4775:                  test_suite.failed_test_count(), kIndent);
    %%%%%: 4775-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4776:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4776-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4776-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4776-block  2
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4776-block  3
call   17 never executed
    $$$$$: 4776-block  4
call   18 never executed
    $$$$$: 4776-block  5
call   19 never executed
    $$$$$: 4776-block  6
call   20 never executed
    #####: 4777:                  test_suite.reportable_disabled_test_count(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4778:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4778-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4778-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4778-block  2
call   14 never executed
    $$$$$: 4778-block  3
call   15 never executed
    $$$$$: 4778-block  4
call   16 never executed
    $$$$$: 4778-block  5
call   17 never executed
    #####: 4779:    OutputJsonKey(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4779-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4779-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4779-block  2
call   14 never executed
    $$$$$: 4779-block  3
call   15 never executed
    $$$$$: 4779-block  4
call   16 never executed
    $$$$$: 4779-block  5
call   17 never executed
        -: 4780:        stream, kTestsuite, "timestamp",
    #####: 4781:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4781-block  0
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4781-block  1
call   11 never executed
    $$$$$: 4781-block  2
call   12 never executed
        -: 4782:        kIndent);
    #####: 4783:    OutputJsonKey(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4783-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4783-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4783-block  2
call   14 never executed
    $$$$$: 4783-block  3
call   15 never executed
    $$$$$: 4783-block  4
call   16 never executed
    $$$$$: 4783-block  5
call   17 never executed
    #####: 4784:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4784-block  0
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4784-block  1
call   11 never executed
    $$$$$: 4784-block  2
call   12 never executed
        -: 4785:                  kIndent, false);
    #####: 4786:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4786-block  0
call    8 never executed
    %%%%%: 4786-block  1
call    9 never executed
call   10 never executed
    $$$$$: 4786-block  2
call   11 never executed
    $$$$$: 4786-block  3
call   12 never executed
    #####: 4787:            << ",\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4787-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4788:  }
        -: 4789:
    #####: 4790:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4790-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4790-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4790-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
        -: 4791:
    #####: 4792:  bool comma = false;
    #####: 4793:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4793-block  0
    %%%%%: 4793-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4793-block  2
    #####: 4794:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4794-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4794-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4795:      if (comma) {
    %%%%%: 4795-block  0
branch  0 never executed
branch  1 never executed
    #####: 4796:        *stream << ",\n";
    %%%%%: 4796-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4797:      } else {
    #####: 4798:        comma = true;
    %%%%%: 4798-block  0
        -: 4799:      }
    #####: 4800:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4800-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4800-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -: 4801:    }
        -: 4802:  }
    #####: 4803:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4803-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4803-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4803-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4803-block  4
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4803-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4803-block  6
call   21 never executed
call   22 never executed
    $$$$$: 4803-block  7
call   23 never executed
    $$$$$: 4803-block  8
call   24 never executed
    #####: 4804:}
        -: 4805:
        -: 4806:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4807:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4808:                                                  const UnitTest& unit_test) {
    #####: 4809:  const std::string kTestsuites = "testsuites";
    %%%%%: 4809-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 4809-block  1
call    8 never executed
    $$$$$: 4809-block  2
call    9 never executed
    #####: 4810:  const std::string kIndent = Indent(2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4810-block  0
call    4 never executed
    $$$$$: 4810-block  1
call    5 never executed
    #####: 4811:  *stream << "{\n";
    %%%%%: 4811-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4812:
    #####: 4813:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4813-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4813-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4813-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4813-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4813-block  4
call   20 never executed
    $$$$$: 4813-block  5
call   21 never executed
    $$$$$: 4813-block  6
call   22 never executed
    $$$$$: 4813-block  7
call   23 never executed
        -: 4814:                kIndent);
    #####: 4815:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4815-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4815-block  1
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4815-block  2
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4815-block  3
call   20 never executed
    $$$$$: 4815-block  4
call   21 never executed
    $$$$$: 4815-block  5
call   22 never executed
    $$$$$: 4815-block  6
call   23 never executed
        -: 4816:                kIndent);
    #####: 4817:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4817-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4817-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4817-block  2
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4817-block  3
call   17 never executed
    $$$$$: 4817-block  4
call   18 never executed
    $$$$$: 4817-block  5
call   19 never executed
    $$$$$: 4817-block  6
call   20 never executed
    #####: 4818:                unit_test.reportable_disabled_test_count(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4819:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4819-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4819-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4819-block  2
call   14 never executed
    $$$$$: 4819-block  3
call   15 never executed
    $$$$$: 4819-block  4
call   16 never executed
    $$$$$: 4819-block  5
call   17 never executed
    #####: 4820:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 4820-block  0
    %%%%%: 4820-block  1
branch  2 never executed
branch  3 never executed
    #####: 4821:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4821-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4821-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4821-block  2
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 4821-block  3
call   18 never executed
    $$$$$: 4821-block  4
call   19 never executed
    $$$$$: 4821-block  5
call   20 never executed
    $$$$$: 4821-block  6
call   21 never executed
        -: 4822:                  kIndent);
        -: 4823:  }
    #####: 4824:  OutputJsonKey(stream, kTestsuites, "timestamp",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4824-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4824-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4824-block  2
call   14 never executed
    $$$$$: 4824-block  3
call   15 never executed
    $$$$$: 4824-block  4
call   16 never executed
    $$$$$: 4824-block  5
call   17 never executed
    #####: 4825:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4825-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4825-block  1
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4825-block  2
call   11 never executed
    $$$$$: 4825-block  3
call   12 never executed
        -: 4826:                kIndent);
    #####: 4827:  OutputJsonKey(stream, kTestsuites, "time",
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4827-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4827-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4827-block  2
call   14 never executed
    $$$$$: 4827-block  3
call   15 never executed
    $$$$$: 4827-block  4
call   16 never executed
    $$$$$: 4827-block  5
call   17 never executed
    #####: 4828:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4828-block  0
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4828-block  1
call   11 never executed
    $$$$$: 4828-block  2
call   12 never executed
        -: 4829:                false);
        -: 4830:
    #####: 4831:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4831-block  0
call    8 never executed
    %%%%%: 4831-block  1
call    9 never executed
call   10 never executed
    $$$$$: 4831-block  2
call   11 never executed
    $$$$$: 4831-block  3
call   12 never executed
    #####: 4832:          << ",\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4832-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4833:
    #####: 4834:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4834-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4834-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4834-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4834-block  3
call   25 never executed
    $$$$$: 4834-block  4
call   26 never executed
    $$$$$: 4834-block  5
call   27 never executed
    $$$$$: 4834-block  6
call   28 never executed
    $$$$$: 4834-block  7
call   29 never executed
    $$$$$: 4834-block  8
call   30 never executed
    $$$$$: 4834-block  9
call   31 never executed
    $$$$$: 4834-block 10
call   32 never executed
    #####: 4835:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4835-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4835-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4835-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
        -: 4836:
    #####: 4837:  bool comma = false;
    #####: 4838:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4838-block  0
    %%%%%: 4838-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4838-block  2
    #####: 4839:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4839-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4839-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4839-block  2
branch 12 never executed
branch 13 never executed
    #####: 4840:      if (comma) {
    %%%%%: 4840-block  0
branch  0 never executed
branch  1 never executed
    #####: 4841:        *stream << ",\n";
    %%%%%: 4841-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4842:      } else {
    #####: 4843:        comma = true;
    %%%%%: 4843-block  0
        -: 4844:      }
    #####: 4845:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4845-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4845-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 4846:    }
        -: 4847:  }
        -: 4848:
        -: 4849:  // If there was a test failure outside of one of the test suites (like in a
        -: 4850:  // test environment) include that in the output.
    #####: 4851:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4851-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4851-block  1
branch  8 never executed
branch  9 never executed
    #####: 4852:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4852-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4853:  }
        -: 4854:
    #####: 4855:  *stream << "\n" << kIndent << "]\n" << "}\n";
    %%%%%: 4855-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4855-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4855-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4855-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 4856:}
        -: 4857:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4858:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4859:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4860:  const std::string kTestsuites = "testsuites";
    %%%%%: 4860-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 4860-block  1
call    8 never executed
    $$$$$: 4860-block  2
call    9 never executed
    #####: 4861:  const std::string kIndent = Indent(2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4861-block  0
call    4 never executed
    $$$$$: 4861-block  1
call    5 never executed
    #####: 4862:  *stream << "{\n";
    %%%%%: 4862-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4863:  int total_tests = 0;
    #####: 4864:  for (auto test_suite : test_suites) {
    %%%%%: 4864-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    %%%%%: 4864-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4864-block  2
call    9 never executed
call   10 never executed
    #####: 4865:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 4866:  }
    #####: 4867:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4867-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4867-block  1
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4867-block  2
call   14 never executed
    $$$$$: 4867-block  3
call   15 never executed
    $$$$$: 4867-block  4
call   16 never executed
    $$$$$: 4867-block  5
call   17 never executed
        -: 4868:
    #####: 4869:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4869-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4869-block  1
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4869-block  2
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4869-block  3
call   25 never executed
    $$$$$: 4869-block  4
call   26 never executed
    $$$$$: 4869-block  5
call   27 never executed
    $$$$$: 4869-block  6
call   28 never executed
    $$$$$: 4869-block  7
call   29 never executed
    $$$$$: 4869-block  8
call   30 never executed
    $$$$$: 4869-block  9
call   31 never executed
    $$$$$: 4869-block 10
call   32 never executed
    #####: 4870:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4870-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4870-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4870-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
        -: 4871:
    #####: 4872:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4872-block  0
    %%%%%: 4872-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4872-block  2
    #####: 4873:    if (i != 0) {
    %%%%%: 4873-block  0
branch  0 never executed
branch  1 never executed
    #####: 4874:      *stream << ",\n";
    %%%%%: 4874-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4875:    }
    #####: 4876:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4876-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4877:  }
        -: 4878:
        -: 4879:  *stream << "\n"
        -: 4880:          << kIndent << "]\n"
    #####: 4881:          << "}\n";
    %%%%%: 4881-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4881-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4881-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4881-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 4882:}
        -: 4883:// Produces a string representing the test properties in a result as
        -: 4884:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4885:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4886:    const TestResult& result, const std::string& indent) {
    #####: 4887:  Message attributes;
    %%%%%: 4887-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4887-block  1
call    4 never executed
    $$$$$: 4887-block  2
call    5 never executed
    #####: 4888:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4888-block  0
    %%%%%: 4888-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4889:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4889-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4890:    attributes << ",\n" << indent << "\"" << property.key() << "\": "
    %%%%%: 4890-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4890-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4890-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4890-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4890-block  4
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    $$$$$: 4890-block  5
call   25 never executed
    #####: 4891:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4891-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4891-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4891-block  2
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4891-block  3
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 4891-block  4
call   22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 4891-block  5
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
    $$$$$: 4891-block  6
call   32 never executed
    $$$$$: 4891-block  7
call   33 never executed
    $$$$$: 4891-block  8
call   34 never executed
    $$$$$: 4891-block  9
call   35 never executed
    $$$$$: 4891-block 10
call   36 never executed
    $$$$$: 4891-block 11
call   37 never executed
        -: 4892:  }
    #####: 4893:  return attributes.GetString();
    %%%%%: 4893-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4894:}
        -: 4895:
        -: 4896:// End JsonUnitTestResultPrinter
        -: 4897:
        -: 4898:#if GTEST_CAN_STREAM_RESULTS_
        -: 4899:
        -: 4900:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4901:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4902:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4903:// in both time and space -- important as the input str may contain an
        -: 4904:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4905:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 4906:  std::string result;
    %%%%%: 4906-block  0
call    0 never executed
    #####: 4907:  result.reserve(strlen(str) + 1);
branch  0 never executed
branch  1 never executed
    %%%%%: 4907-block  0
    %%%%%: 4907-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4908:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 4908-block  0
call    0 never executed
    %%%%%: 4908-block  1
branch  1 never executed
branch  2 never executed
    %%%%%: 4908-block  2
call    3 never executed
call    4 never executed
    #####: 4909:    switch (ch) {
    %%%%%: 4909-block  0
branch  0 never executed
branch  1 never executed
    #####: 4910:      case '%':
        -: 4911:      case '=':
        -: 4912:      case '&':
        -: 4913:      case '\n':
    #####: 4914:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 4914-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4914-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4914-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4914-block  3
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4914-block  4
call   17 never executed
    $$$$$: 4914-block  5
call   18 never executed
    $$$$$: 4914-block  6
call   19 never executed
    $$$$$: 4914-block  7
call   20 never executed
    #####: 4915:        break;
    #####: 4916:      default:
    #####: 4917:        result.push_back(ch);
    %%%%%: 4917-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4918:        break;
    %%%%%: 4918-block  0
        -: 4919:    }
        -: 4920:  }
    #####: 4921:  return result;
    %%%%%: 4921-block  0
    %%%%%: 4921-block  1
        -: 4922:}
        -: 4923:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 4924:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 4925:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 4925-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4925-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4925-block  2
call   11 never executed
call   12 never executed
    %%%%%: 4925-block  3
call   13 never executed
call   14 never executed
    $$$$$: 4925-block  4
call   15 never executed
    $$$$$: 4925-block  5
call   16 never executed
    #####: 4926:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4926-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4927:
    #####: 4928:  addrinfo hints;
    %%%%%: 4928-block  0
call    0 never executed
    #####: 4929:  memset(&hints, 0, sizeof(hints));
branch  0 never executed
branch  1 never executed
    %%%%%: 4929-block  0
    #####: 4930:  hints.ai_family = AF_UNSPEC;    // To allow both IPv4 and IPv6 addresses.
    #####: 4931:  hints.ai_socktype = SOCK_STREAM;
    #####: 4932:  addrinfo* servinfo = nullptr;
    %%%%%: 4932-block  0
call    0 never executed
        -: 4933:
        -: 4934:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4935:  // the given host name.
    #####: 4936:  const int error_num = getaddrinfo(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4937:      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 4938:  if (error_num != 0) {
    %%%%%: 4938-block  0
branch  0 never executed
branch  1 never executed
    #####: 4939:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 4939-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4939-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4939-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4939-block  3
call    8 never executed
    $$$$$: 4939-block  4
call    9 never executed
    #####: 4940:                        << gai_strerror(error_num);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4940-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 4941:  }
        -: 4942:
        -: 4943:  // Loop through all the results and connect to the first we can.
    #####: 4944:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
    %%%%%: 4944-block  0
    %%%%%: 4944-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4944-block  2
branch  6 never executed
branch  7 never executed
    #####: 4945:       cur_addr = cur_addr->ai_next) {
    %%%%%: 4945-block  0
call    0 never executed
call    1 never executed
    #####: 4946:    sockfd_ = socket(
    %%%%%: 4946-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 4947:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
    #####: 4948:    if (sockfd_ != -1) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4949:      // Connect the client socket to the server socket.
    #####: 4950:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 4950-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4950-block  1
branch 11 never executed
branch 12 never executed
    #####: 4951:        close(sockfd_);
    %%%%%: 4951-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4952:        sockfd_ = -1;
    %%%%%: 4952-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 4953:      }
        -: 4954:    }
        -: 4955:  }
        -: 4956:
    #####: 4957:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 4957-block  0
call    0 never executed
        -: 4958:
    #####: 4959:  if (sockfd_ == -1) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4960:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 4960-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4960-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4960-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4960-block  3
call    8 never executed
    $$$$$: 4960-block  4
call    9 never executed
    #####: 4961:                        << host_name_ << ":" << port_num_;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4961-block  0
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4961-block  1
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4961-block  2
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
        -: 4962:  }
    #####: 4963:}
        -: 4964:
        -: 4965:// End of class Streaming Listener
        -: 4966:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4967:
        -: 4968:// class OsStackTraceGetter
        -: 4969:
        -: 4970:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4971:    "... " GTEST_NAME_ " internal frames ...";
        -: 4972:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4973:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4974:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4975:#if GTEST_HAS_ABSL
        -: 4976:  std::string result;
        -: 4977:
        -: 4978:  if (max_depth <= 0) {
        -: 4979:    return result;
        -: 4980:  }
        -: 4981:
        -: 4982:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4983:
        -: 4984:  std::vector<void*> raw_stack(max_depth);
        -: 4985:  // Skips the frames requested by the caller, plus this function.
        -: 4986:  const int raw_stack_size =
        -: 4987:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4988:
        -: 4989:  void* caller_frame = nullptr;
        -: 4990:  {
        -: 4991:    MutexLock lock(&mutex_);
        -: 4992:    caller_frame = caller_frame_;
        -: 4993:  }
        -: 4994:
        -: 4995:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4996:    if (raw_stack[i] == caller_frame &&
        -: 4997:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 4998:      // Add a marker to the trace and stop adding frames.
        -: 4999:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 5000:      break;
        -: 5001:    }
        -: 5002:
        -: 5003:    char tmp[1024];
        -: 5004:    const char* symbol = "(unknown)";
        -: 5005:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 5006:      symbol = tmp;
        -: 5007:    }
        -: 5008:
        -: 5009:    char line[1024];
        -: 5010:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 5011:    result += line;
        -: 5012:  }
        -: 5013:
        -: 5014:  return result;
        -: 5015:
        -: 5016:#else  // !GTEST_HAS_ABSL
        -: 5017:  static_cast<void>(max_depth);
        -: 5018:  static_cast<void>(skip_count);
    #####: 5019:  return "";
    %%%%%: 5019-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5019-block  1
call    5 never executed
call    6 never executed
    $$$$$: 5019-block  2
call    7 never executed
    $$$$$: 5019-block  3
call    8 never executed
        -: 5020:#endif  // GTEST_HAS_ABSL
        -: 5021:}
        -: 5022:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 37 returned 100% blocks executed 100%
       37: 5023:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5024:#if GTEST_HAS_ABSL
        -: 5025:  void* caller_frame = nullptr;
        -: 5026:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5027:    caller_frame = nullptr;
        -: 5028:  }
        -: 5029:
        -: 5030:  MutexLock lock(&mutex_);
        -: 5031:  caller_frame_ = caller_frame;
        -: 5032:#endif  // GTEST_HAS_ABSL
       37: 5033:}
        -: 5034:
        -: 5035:// A helper class that creates the premature-exit file in its
        -: 5036:// constructor and deletes the file in its destructor.
        -: 5037:class ScopedPrematureExitFile {
        -: 5038: public:
function _ZN7testing8internal23ScopedPrematureExitFileC2EPKc called 1 returned 100% blocks executed 46%
        1: 5039:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 5040:      : premature_exit_filepath_(premature_exit_filepath ?
        1: 5040-block  0
call    0 returned 1
       1*: 5041:                                 premature_exit_filepath : "") {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 5041-block  0
        1: 5041-block  1
        1: 5041-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 5041-block  3
call    9 returned 1
call   10 returned 1
    $$$$$: 5041-block  4
call   11 never executed
    $$$$$: 5041-block  5
call   12 never executed
    $$$$$: 5041-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -: 5042:    // If a path to the premature-exit file is specified...
        1: 5043:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        -: 5044:      // create the file with a single "0" character in it.  I/O
        -: 5045:      // errors are ignored as there's nothing better we can do and we
        -: 5046:      // don't want to fail the test because of this.
    #####: 5047:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5047-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5048:      fwrite("0", 1, 1, pfile);
    %%%%%: 5048-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5048-block  1
    %%%%%: 5048-block  2
branch  2 never executed
branch  3 never executed
    %%%%%: 5048-block  3
    %%%%%: 5048-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5049:      fclose(pfile);
    %%%%%: 5049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5050:    }
        1: 5051:  }
        1: 5051-block  0
        -: 5052:
function _ZN7testing8internal23ScopedPrematureExitFileD2Ev called 1 returned 100% blocks executed 32%
        1: 5053:  ~ScopedPrematureExitFile() {
        1: 5053-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 5054:#if !defined GTEST_OS_ESP8266
        1: 5055:    if (!premature_exit_filepath_.empty()) {
        1: 5055-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 5056:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5056-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 5057:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5058:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5058-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5059:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 5060:                          << retval;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 5061:      }
        -: 5062:    }
        -: 5063:#endif
        1: 5064:  }
        -: 5065:
        -: 5066: private:
        -: 5067:  const std::string premature_exit_filepath_;
        -: 5068:
        -: 5069:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 5070:};
        -: 5071:
        -: 5072:}  // namespace internal
        -: 5073:
        -: 5074:// class TestEventListeners
        -: 5075:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5076:TestEventListeners::TestEventListeners()
        1: 5076-block  0
call    0 returned 1
        1: 5077:    : repeater_(new internal::TestEventRepeater()),
call    0 returned 1
call    1 returned 1
        -: 5078:      default_result_printer_(nullptr),
        1: 5079:      default_xml_generator_(nullptr) {}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 5080:
function _ZN7testing18TestEventListenersD2Ev called 1 returned 100% blocks executed 100%
        1: 5081:TestEventListeners::~TestEventListeners() { delete repeater_; }
        1: 5081-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 5081-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
        1: 5081-block  2
call   10 returned 1
        -: 5082:
        -: 5083:// Returns the standard listener responsible for the default console
        -: 5084:// output.  Can be removed from the listeners list to shut down default
        -: 5085:// console output.  Note that removing this object from the listener list
        -: 5086:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5087:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5088:  repeater_->Append(listener);
        1: 5088-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        1: 5089:}
        -: 5090:
        -: 5091:// Removes the given event listener from the list and returns it.  It then
        -: 5092:// becomes the caller's responsibility to delete the listener. Returns
        -: 5093:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 68%
        1: 5094:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5095:  if (listener == default_result_printer_)
        1: 5095-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 5096:    default_result_printer_ = nullptr;
        1: 5096-block  0
call    0 returned 1
call    1 returned 1
    #####: 5097:  else if (listener == default_xml_generator_)
    %%%%%: 5097-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5098:    default_xml_generator_ = nullptr;
    %%%%%: 5098-block  0
call    0 never executed
call    1 never executed
        1: 5099:  return repeater_->Release(listener);
        1: 5099-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 5100:}
        -: 5101:
        -: 5102:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5103:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 9 returned 100% blocks executed 100%
        9: 5104:TestEventListener* TestEventListeners::repeater() { return repeater_; }
        9: 5104-block  0
call    0 returned 9
        -: 5105:
        -: 5106:// Sets the default_result_printer attribute to the provided listener.
        -: 5107:// The listener is also added to the listener list and previous
        -: 5108:// default_result_printer is removed from it and deleted. The listener can
        -: 5109:// also be NULL in which case it will not be added to the list. Does
        -: 5110:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 67%
        1: 5111:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5112:  if (default_result_printer_ != listener) {
        1: 5112-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 5113:    // It is an error to pass this method a listener that is already in the
        -: 5114:    // list.
       1*: 5115:    delete Release(default_result_printer_);
        1: 5115-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 5115-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        1: 5116:    default_result_printer_ = listener;
        1: 5116-block  0
call    0 returned 1
call    1 returned 1
        1: 5117:    if (listener != nullptr) Append(listener);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5117-block  0
call    2 returned 1
call    3 returned 1
        -: 5118:  }
        1: 5119:}
        -: 5120:
        -: 5121:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5122:// listener is also added to the listener list and previous
        -: 5123:// default_xml_generator is removed from it and deleted. The listener can
        -: 5124:// also be NULL in which case it will not be added to the list. Does
        -: 5125:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5126:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5127:  if (default_xml_generator_ != listener) {
    %%%%%: 5127-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5128:    // It is an error to pass this method a listener that is already in the
        -: 5129:    // list.
    #####: 5130:    delete Release(default_xml_generator_);
    %%%%%: 5130-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5130-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 5131:    default_xml_generator_ = listener;
    %%%%%: 5131-block  0
call    0 never executed
call    1 never executed
    #####: 5132:    if (listener != nullptr) Append(listener);
branch  0 never executed
branch  1 never executed
    %%%%%: 5132-block  0
call    2 never executed
call    3 never executed
        -: 5133:  }
    #####: 5134:}
        -: 5135:
        -: 5136:// Controls whether events will be forwarded by the repeater to the
        -: 5137:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5138:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5139:  return repeater_->forwarding_enabled();
    %%%%%: 5139-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5140:}
        -: 5141:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5142:void TestEventListeners::SuppressEventForwarding() {
    #####: 5143:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5143-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 5144:}
        -: 5145:
        -: 5146:// class UnitTest
        -: 5147:
        -: 5148:// Gets the singleton UnitTest object.  The first time this method is
        -: 5149:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5150:// calls will return the same object.
        -: 5151://
        -: 5152:// We don't protect this under mutex_ as a user is not supposed to
        -: 5153:// call this before main() starts, from which point on the return
        -: 5154:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 108 returned 100% blocks executed 82%
      108: 5155:UnitTest* UnitTest::GetInstance() {
        -: 5156:  // CodeGear C++Builder insists on a public destructor for the
        -: 5157:  // default implementation.  Use this implementation to keep good OO
        -: 5158:  // design with private destructor.
        -: 5159:
        -: 5160:#if defined(__BORLANDC__)
        -: 5161:  static UnitTest* const instance = new UnitTest;
        -: 5162:  return instance;
        -: 5163:#else
      108: 5164:  static UnitTest instance;
      108: 5164-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 107
        1: 5164-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5164-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5164-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5164-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5164-block  5
call   12 never executed
      108: 5165:  return &instance;
      108: 5165-block  0
      108: 5165-block  1
        -: 5166:#endif  // defined(__BORLANDC__)
        -: 5167:}
        -: 5168:
        -: 5169:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5170:int UnitTest::successful_test_suite_count() const {
    #####: 5171:  return impl()->successful_test_suite_count();
    %%%%%: 5171-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5172:}
        -: 5173:
        -: 5174:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5175:int UnitTest::failed_test_suite_count() const {
    #####: 5176:  return impl()->failed_test_suite_count();
    %%%%%: 5176-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5177:}
        -: 5178:
        -: 5179:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5180:int UnitTest::total_test_suite_count() const {
    #####: 5181:  return impl()->total_test_suite_count();
    %%%%%: 5181-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5182:}
        -: 5183:
        -: 5184:// Gets the number of all test suites that contain at least one test
        -: 5185:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5186:int UnitTest::test_suite_to_run_count() const {
        2: 5187:  return impl()->test_suite_to_run_count();
        2: 5187-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
call    6 returned 2
call    7 returned 2
        -: 5188:}
        -: 5189:
        -: 5190://  Legacy API is deprecated but still available
        -: 5191:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5192:int UnitTest::successful_test_case_count() const {
    #####: 5193:  return impl()->successful_test_suite_count();
    %%%%%: 5193-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5194:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5195:int UnitTest::failed_test_case_count() const {
    #####: 5196:  return impl()->failed_test_suite_count();
    %%%%%: 5196-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5197:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5198:int UnitTest::total_test_case_count() const {
    #####: 5199:  return impl()->total_test_suite_count();
    %%%%%: 5199-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5200:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5201:int UnitTest::test_case_to_run_count() const {
    #####: 5202:  return impl()->test_suite_to_run_count();
    %%%%%: 5202-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5203:}
        -: 5204:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5205:
        -: 5206:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5207:int UnitTest::successful_test_count() const {
        1: 5208:  return impl()->successful_test_count();
        1: 5208-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
        -: 5209:}
        -: 5210:
        -: 5211:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5212:int UnitTest::skipped_test_count() const {
        1: 5213:  return impl()->skipped_test_count();
        1: 5213-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
        -: 5214:}
        -: 5215:
        -: 5216:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5217:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5217-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5218:
        -: 5219:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5220:int UnitTest::reportable_disabled_test_count() const {
        1: 5221:  return impl()->reportable_disabled_test_count();
        1: 5221-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
        -: 5222:}
        -: 5223:
        -: 5224:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5225:int UnitTest::disabled_test_count() const {
    #####: 5226:  return impl()->disabled_test_count();
    %%%%%: 5226-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5227:}
        -: 5228:
        -: 5229:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5230:int UnitTest::reportable_test_count() const {
    #####: 5231:  return impl()->reportable_test_count();
    %%%%%: 5231-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5232:}
        -: 5233:
        -: 5234:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5235:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5235-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5236:
        -: 5237:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5238:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5238-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
call    6 returned 2
call    7 returned 2
        -: 5239:
        -: 5240:// Gets the time of the test program start, in ms from the start of the
        -: 5241:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5242:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5243:    return impl()->start_timestamp();
    %%%%%: 5243-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5244:}
        -: 5245:
        -: 5246:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5247:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5248:  return impl()->elapsed_time();
        1: 5248-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
        -: 5249:}
        -: 5250:
        -: 5251:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5252:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5253:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5253-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
        -: 5254:
        -: 5255:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5256:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5257:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5257-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5258:
        -: 5259:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5260:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5261:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5262:  return impl()->GetTestSuite(i);
    %%%%%: 5262-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5263:}
        -: 5264:
        -: 5265://  Legacy API is deprecated but still available
        -: 5266:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5267:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5268:  return impl()->GetTestCase(i);
    %%%%%: 5268-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5269:}
        -: 5270:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5271:
        -: 5272:// Returns the TestResult containing information on test failures and
        -: 5273:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5274:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5275:  return *impl()->ad_hoc_test_result();
    %%%%%: 5275-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 5276:}
        -: 5277:
        -: 5278:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5279:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5280:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5281:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5281-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5282:}
        -: 5283:
        -: 5284:// Returns the list of event listeners that can be used to track events
        -: 5285:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 8 returned 100% blocks executed 100%
        8: 5286:TestEventListeners& UnitTest::listeners() {
        8: 5287:  return *impl()->listeners();
        8: 5287-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
call    4 returned 8
call    5 returned 8
call    6 returned 8
call    7 returned 8
call    8 returned 8
        -: 5288:}
        -: 5289:
        -: 5290:// Registers and returns a global test environment.  When a test
        -: 5291:// program is run, all global test environments will be set-up in the
        -: 5292:// order they were registered.  After all tests in the program have
        -: 5293:// finished, all global test environments will be torn-down in the
        -: 5294:// *reverse* order they were registered.
        -: 5295://
        -: 5296:// The UnitTest object takes ownership of the given environment.
        -: 5297://
        -: 5298:// We don't protect this under mutex_, as we only support calling it
        -: 5299:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5300:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5301:  if (env == nullptr) {
    %%%%%: 5301-block  0
branch  0 never executed
branch  1 never executed
    #####: 5302:    return nullptr;
    %%%%%: 5302-block  0
        -: 5303:  }
        -: 5304:
    #####: 5305:  impl_->environments().push_back(env);
    %%%%%: 5305-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 5306:  return env;
        -: 5307:}
        -: 5308:
        -: 5309:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5310:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5311:// this to report their results.  The user code should use the
        -: 5312:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5313:void UnitTest::AddTestPartResult(
        -: 5314:    TestPartResult::Type result_type,
        -: 5315:    const char* file_name,
        -: 5316:    int line_number,
        -: 5317:    const std::string& message,
        -: 5318:    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5319:  Message msg;
    %%%%%: 5319-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5319-block  1
call    5 never executed
    #####: 5320:  msg << message;
    %%%%%: 5320-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5321:
    #####: 5322:  internal::MutexLock lock(&mutex_);
    %%%%%: 5322-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5322-block  1
call    7 never executed
    #####: 5323:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5323-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5323-block  1
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 5324:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5324-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5324-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 5325:
    #####: 5326:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5326-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5326-block  1
call   10 never executed
call   11 never executed
    %%%%%: 5326-block  2
branch 12 never executed
branch 13 never executed
    #####: 5327:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5327-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5327-block  1
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 5328:      msg << "\n" << internal::FormatFileLocation(trace.file, trace.line)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5328-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5328-block  1
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5328-block  2
call   15 never executed
call   16 never executed
    $$$$$: 5328-block  3
call   17 never executed
    $$$$$: 5328-block  4
call   18 never executed
    #####: 5329:          << " " << trace.message;
    %%%%%: 5329-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5329-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
        -: 5330:    }
        -: 5331:  }
        -: 5332:
    #####: 5333:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5333-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5333-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5333-block  2
    %%%%%: 5333-block  3
    %%%%%: 5333-block  4
branch  8 never executed
branch  9 never executed
    #####: 5334:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5334-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 5335:  }
        -: 5336:
    #####: 5337:  const TestPartResult result = TestPartResult(
    %%%%%: 5337-block  0
call    0 never executed
    #####: 5338:      result_type, file_name, line_number, msg.GetString().c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5338-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%: 5338-block  1
call   10 never executed
    $$$$$: 5338-block  2
call   11 never executed
    $$$$$: 5338-block  3
call   12 never executed
    #####: 5339:  impl_->GetTestPartResultReporterForCurrentThread()->
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5340:      ReportTestPartResult(result);
    %%%%%: 5340-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5341:
    #####: 5342:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5342-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5342-block  1
branch  2 never executed
branch  3 never executed
        -: 5343:      result_type != TestPartResult::kSkip) {
        -: 5344:    // gtest_break_on_failure takes precedence over
        -: 5345:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5346:    // in the code (perhaps in order to use Google Test assertions
        -: 5347:    // with another testing framework) and specify the former on the
        -: 5348:    // command line for debugging.
    #####: 5349:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5349-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5349-block  1
    %%%%%: 5349-block  2
branch  2 never executed
branch  3 never executed
        -: 5350:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5351:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5352:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5353:      // the --gtest_catch_exceptions flags are specified.
        -: 5354:      DebugBreak();
        -: 5355:#elif (!defined(__native_client__)) &&            \
        -: 5356:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5357:     (defined(__x86_64__) || defined(__i386__)))
        -: 5358:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 5359:      asm("int3");
    %%%%%: 5359-block  0
call    0 never executed
        -: 5360:#else
        -: 5361:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5362:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5363:      // portability: some debuggers don't correctly trap abort().
        -: 5364:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5365:#endif  // GTEST_OS_WINDOWS
    #####: 5366:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5366-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5366-block  1
    %%%%%: 5366-block  2
branch  2 never executed
branch  3 never executed
        -: 5367:#if GTEST_HAS_EXCEPTIONS
    #####: 5368:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5368-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5368-block  1
call    4 never executed
    $$$$$: 5368-block  2
call    5 never executed
        -: 5369:#else
        -: 5370:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5371:      // that cannot be suppressed in VC 7.1 or below.
        -: 5372:      exit(1);
        -: 5373:#endif
        -: 5374:    }
        -: 5375:  }
    #####: 5376:}
        -: 5377:
        -: 5378:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5379:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5380:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5381:// when invoked elsewhere.  If the result already contains a property with
        -: 5382:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5383:void UnitTest::RecordProperty(const std::string& key,
        -: 5384:                              const std::string& value) {
    #####: 5385:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5385-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5385-block  1
call   13 never executed
call   14 never executed
    $$$$$: 5385-block  2
call   15 never executed
    $$$$$: 5385-block  3
call   16 never executed
    #####: 5386:}
        -: 5387:
        -: 5388:// Runs all tests in this UnitTest object and prints the result.
        -: 5389:// Returns 0 if successful, or 1 otherwise.
        -: 5390://
        -: 5391:// We don't protect this under mutex_, as we only support calling it
        -: 5392:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 81%
        1: 5393:int UnitTest::Run() {
        -: 5394:  const bool in_death_test_child_process =
        1: 5395:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
        1: 5395-block  0
call    0 returned 1
        -: 5396:
        -: 5397:  // Google Test implements this protocol for catching that a test
        -: 5398:  // program exits before returning control to Google Test:
        -: 5399:  //
        -: 5400:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5401:  //      is specified by the environment variable
        -: 5402:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5403:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5404:  //
        -: 5405:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5406:  // running a Google-Test-based test program and check the existence
        -: 5407:  // of the file at the end of the test execution to see if it has
        -: 5408:  // exited prematurely.
        -: 5409:
        -: 5410:  // If we are in the child process of a death test, don't
        -: 5411:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5412:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5413:  // the file upon entering/leaving this function.  If the program
        -: 5414:  // somehow exits before this function has a chance to return, the
        -: 5415:  // premature-exit file will be left undeleted, causing a test runner
        -: 5416:  // that understands the premature-exit-file protocol to report the
        -: 5417:  // test as having failed.
        1: 5418:  const internal::ScopedPrematureExitFile premature_exit_file(
call    0 returned 1
        -: 5419:      in_death_test_child_process
        -: 5420:          ? nullptr
       1*: 5421:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5421-block  0
        1: 5421-block  1
call    2 returned 1
        1: 5421-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5421-block  3
call    6 never executed
        -: 5422:
        -: 5423:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5424:  // used for the duration of the program.
       1*: 5425:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5425-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 5425-block  1
        1: 5425-block  2
call    9 returned 1
        -: 5426:
        -: 5427:#if GTEST_OS_WINDOWS
        -: 5428:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5429:  // tests or this is executing in the context of death test child
        -: 5430:  // process. In either case the user does not want to see pop-up dialogs
        -: 5431:  // about crashes - they are expected.
        -: 5432:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5433:# if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5434:    // SetErrorMode doesn't exist on CE.
        -: 5435:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5436:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5437:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5438:
        -: 5439:# if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5440:    // Death test children can be terminated with _abort().  On Windows,
        -: 5441:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5442:    // abort message to go to stderr instead.
        -: 5443:    _set_error_mode(_OUT_TO_STDERR);
        -: 5444:# endif
        -: 5445:
        -: 5446:# if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5447:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5448:    // offering a choice to debug the aborted program. We need to suppress
        -: 5449:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5450:    // executed. Google Test will notify the user of any unexpected
        -: 5451:    // failure via stderr.
        -: 5452:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5453:      _set_abort_behavior(
        -: 5454:          0x0,                                    // Clear the following flags:
        -: 5455:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5456:
        -: 5457:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5458:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5459:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5460:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5461:    if (!IsDebuggerPresent()) {
        -: 5462:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5463:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5464:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5465:    }
        -: 5466:# endif
        -: 5467:  }
        -: 5468:#endif  // GTEST_OS_WINDOWS
        -: 5469:
        1: 5470:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5471:      impl(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -: 5472:      &internal::UnitTestImpl::RunAllTests,
       2*: 5473:      "auxiliary test code (environments or event listeners)") ? 0 : 1;
        1: 5473-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5473-block  1
    %%%%%: 5473-block  2
        1: 5473-block  3
call    2 returned 1
        -: 5474:}
        -: 5475:
        -: 5476:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5477:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5478:const char* UnitTest::original_working_dir() const {
    #####: 5479:  return impl_->original_working_dir_.c_str();
    %%%%%: 5479-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5480:}
        -: 5481:
        -: 5482:// Returns the TestSuite object for the test that's currently running,
        -: 5483:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5484:const TestSuite* UnitTest::current_test_suite() const
        -: 5485:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5486:  internal::MutexLock lock(&mutex_);
    %%%%%: 5486-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 5487:  return impl_->current_test_suite();
    %%%%%: 5487-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 5488:}
        -: 5489:
        -: 5490:// Legacy API is still available but deprecated
        -: 5491:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5492:const TestCase* UnitTest::current_test_case() const
        -: 5493:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5494:  internal::MutexLock lock(&mutex_);
    %%%%%: 5494-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 5495:  return impl_->current_test_suite();
    %%%%%: 5495-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 5496:}
        -: 5497:#endif
        -: 5498:
        -: 5499:// Returns the TestInfo object for the test that's currently running,
        -: 5500:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5501:const TestInfo* UnitTest::current_test_info() const
        -: 5502:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5503:  internal::MutexLock lock(&mutex_);
    %%%%%: 5503-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 5504:  return impl_->current_test_info();
    %%%%%: 5504-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 5505:}
        -: 5506:
        -: 5507:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5508:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5508-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 5509:
        -: 5510:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5511:// value-parameterized tests and instantiate and register them.
        -: 5512:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5513:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5514:  return impl_->parameterized_test_registry();
    %%%%%: 5514-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 5515:}
        -: 5516:
        -: 5517:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 74%
        1: 5518:UnitTest::UnitTest() {
        1: 5518-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
    $$$$$: 5518-block  1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        1: 5519:  impl_ = new internal::UnitTestImpl(this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5519-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5519-block  1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
    $$$$$: 5519-block  2
call   11 never executed
        1: 5520:}
        -: 5521:
        -: 5522:// Destructor of UnitTest.
       2*: 5523:UnitTest::~UnitTest() {
        1: 5524:  delete impl_;
       1*: 5525:}
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5523:UnitTest::~UnitTest() {
        -: 5524:  delete impl_;
    #####: 5525:}
    %%%%%: 5525-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 1 returned 100% blocks executed 100%
        2: 5523:UnitTest::~UnitTest() {
        1: 5523-block  0
call    0 returned 1
call    1 returned 1
        1: 5523-block  1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
        1: 5524:  delete impl_;
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 5524-block  0
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
        1: 5525:}
------------------
        -: 5526:
        -: 5527:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5528:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5529:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5530:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5531:  internal::MutexLock lock(&mutex_);
    %%%%%: 5531-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5531-block  1
call    6 never executed
    $$$$$: 5531-block  2
call    7 never executed
    #####: 5532:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5532-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5532-block  1
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 5533:}
        -: 5534:
        -: 5535:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5536:void UnitTest::PopGTestTrace()
        -: 5537:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5538:  internal::MutexLock lock(&mutex_);
    %%%%%: 5538-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5538-block  1
call    7 never executed
    #####: 5539:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5539-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5539-block  1
call   10 never executed
call   11 never executed
    #####: 5540:}
        -: 5541:
        -: 5542:namespace internal {
        -: 5543:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 63%
        1: 5544:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 5544-block  0
call    0 returned 1
call    1 returned 1
        -: 5545:    : parent_(parent),
        -: 5546:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 5547:          default_global_test_part_result_reporter_(this),
        -: 5548:      default_per_thread_test_part_result_reporter_(this),
        -: 5549:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_repoter_(
        -: 5550:          &default_global_test_part_result_reporter_),
        -: 5551:      per_thread_test_part_result_reporter_(
        -: 5552:          &default_per_thread_test_part_result_reporter_),
        -: 5553:      parameterized_test_registry_(),
        -: 5554:      parameterized_tests_registered_(false),
        -: 5555:      last_death_test_suite_(-1),
        -: 5556:      current_test_suite_(nullptr),
        -: 5557:      current_test_info_(nullptr),
        -: 5558:      ad_hoc_test_result_(),
        -: 5559:      os_stack_trace_getter_(nullptr),
        -: 5560:      post_flag_parse_init_performed_(false),
        -: 5561:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 5562:      random_(0),       // Will be reseeded before first use.
        -: 5563:      start_timestamp_(0),
        -: 5564:      elapsed_time_(0),
        -: 5565:#if GTEST_HAS_DEATH_TEST
        1: 5566:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5566-block  0
call    3 returned 1
call    4 returned 1
        -: 5567:#endif
        -: 5568:      // Will be overridden by the flag before first use.
        2: 5569:      catch_exceptions_(false) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
        1: 5569-block  0
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
call   34 returned 1
call   35 returned 1
call   36 returned 1
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1: 5569-block  1
call   40 returned 1
call   41 returned 1
call   42 returned 1
call   43 returned 1
call   44 returned 1
call   45 returned 1
call   46 returned 1
call   47 returned 1
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
call   53 returned 1
call   54 returned 1
call   55 returned 1
call   56 returned 1
call   57 returned 1
call   58 returned 1
call   59 returned 1
call   60 returned 1
call   61 returned 1
call   62 returned 1
call   63 returned 1
call   64 returned 1
call   65 returned 1
call   66 returned 1
call   67 returned 1
call   68 returned 1
call   69 returned 1
call   70 returned 1
call   71 returned 1
call   72 returned 1
call   73 returned 1
call   74 returned 1
call   75 returned 1
call   76 returned 1
call   77 returned 1
call   78 returned 1
call   79 returned 1
call   80 returned 1
call   81 returned 1
call   82 returned 1
call   83 returned 1
call   84 returned 1
call   85 returned 1
call   86 returned 1
branch 87 taken 1 (fallthrough)
branch 88 taken 0 (throw)
        1: 5569-block  2
call   89 returned 1
call   90 returned 1
call   91 returned 1
call   92 returned 1
branch 93 taken 1 (fallthrough)
branch 94 taken 0 (throw)
        1: 5569-block  3
call   95 returned 1
call   96 returned 1
call   97 returned 1
call   98 returned 1
call   99 returned 1
call   100 returned 1
call   101 returned 1
call   102 returned 1
call   103 returned 1
call   104 returned 1
call   105 returned 1
call   106 returned 1
call   107 returned 1
call   108 returned 1
call   109 returned 1
call   110 returned 1
call   111 returned 1
call   112 returned 1
call   113 returned 1
call   114 returned 1
call   115 returned 1
call   116 returned 1
call   117 returned 1
call   118 returned 1
call   119 returned 1
call   120 returned 1
call   121 returned 1
call   122 returned 1
call   123 returned 1
call   124 returned 1
call   125 returned 1
call   126 returned 1
call   127 returned 1
call   128 returned 1
call   129 returned 1
call   130 returned 1
branch 131 taken 1 (fallthrough)
branch 132 taken 0 (throw)
        1: 5569-block  4
call   133 returned 1
call   134 returned 1
call   135 returned 1
call   136 returned 1
    $$$$$: 5569-block  5
call   137 never executed
    $$$$$: 5569-block  6
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
    $$$$$: 5569-block  7
call   142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
    $$$$$: 5569-block  8
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
    $$$$$: 5569-block  9
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
    $$$$$: 5569-block 10
call   154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
    $$$$$: 5569-block 11
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
    $$$$$: 5569-block 12
call   162 never executed
call   163 never executed
call   164 never executed
call   165 never executed
    $$$$$: 5569-block 13
call   166 never executed
call   167 never executed
call   168 never executed
call   169 never executed
    $$$$$: 5569-block 14
call   170 never executed
call   171 never executed
call   172 never executed
call   173 never executed
    $$$$$: 5569-block 15
call   174 never executed
call   175 never executed
call   176 never executed
call   177 never executed
    $$$$$: 5569-block 16
call   178 never executed
call   179 never executed
call   180 never executed
call   181 never executed
    $$$$$: 5569-block 17
call   182 never executed
call   183 never executed
call   184 never executed
call   185 never executed
    $$$$$: 5569-block 18
call   186 never executed
call   187 never executed
call   188 never executed
call   189 never executed
    $$$$$: 5569-block 19
call   190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
call   195 never executed
    $$$$$: 5569-block 20
call   196 never executed
call   197 never executed
call   198 never executed
call   199 never executed
call   200 never executed
call   201 never executed
    $$$$$: 5569-block 21
call   202 never executed
call   203 never executed
call   204 never executed
call   205 never executed
        1: 5570:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5570-block  0
call    8 returned 1
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1: 5571:}
        1: 5571-block  0
        -: 5572:
        3: 5573:UnitTestImpl::~UnitTestImpl() {
        -: 5574:  // Deletes every TestSuite.
        1: 5575:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5576:
        -: 5577:  // Deletes every Environment.
        1: 5578:  ForEach(environments_, internal::Delete<Environment>);
        -: 5579:
        1: 5580:  delete os_stack_trace_getter_;
        2: 5581:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 1 returned 100% blocks executed 100%
        1: 5573:UnitTestImpl::~UnitTestImpl() {
        -: 5574:  // Deletes every TestSuite.
        -: 5575:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5576:
        -: 5577:  // Deletes every Environment.
        -: 5578:  ForEach(environments_, internal::Delete<Environment>);
        -: 5579:
        -: 5580:  delete os_stack_trace_getter_;
        1: 5581:}
        1: 5581-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 1 returned 100% blocks executed 100%
        2: 5573:UnitTestImpl::~UnitTestImpl() {
        1: 5573-block  0
call    0 returned 1
call    1 returned 1
        1: 5573-block  1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
call   28 returned 1
call   29 returned 1
call   30 returned 1
call   31 returned 1
call   32 returned 1
call   33 returned 1
call   34 returned 1
call   35 returned 1
call   36 returned 1
call   37 returned 1
call   38 returned 1
call   39 returned 1
call   40 returned 1
call   41 returned 1
call   42 returned 1
call   43 returned 1
call   44 returned 1
call   45 returned 1
call   46 returned 1
call   47 returned 1
call   48 returned 1
call   49 returned 1
call   50 returned 1
call   51 returned 1
call   52 returned 1
call   53 returned 1
call   54 returned 1
call   55 returned 1
call   56 returned 1
call   57 returned 1
call   58 returned 1
call   59 returned 1
call   60 returned 1
call   61 returned 1
call   62 returned 1
call   63 returned 1
call   64 returned 1
call   65 returned 1
call   66 returned 1
call   67 returned 1
call   68 returned 1
call   69 returned 1
call   70 returned 1
        -: 5574:  // Deletes every TestSuite.
        1: 5575:  ForEach(test_suites_, internal::Delete<TestSuite>);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5576:
        -: 5577:  // Deletes every Environment.
        1: 5578:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5579:
        1: 5580:  delete os_stack_trace_getter_;
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 5580-block  0
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
        1: 5581:}
------------------
        -: 5582:
        -: 5583:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5584:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5585:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5586:// otherwise.  If the result already contains a property with the same key,
        -: 5587:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5588:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5589:  std::string xml_element;
    %%%%%: 5589-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5589-block  1
call    2 never executed
    $$$$$: 5589-block  2
call    3 never executed
        -: 5590:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5591:
    #####: 5592:  if (current_test_info_ != nullptr) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5593:    xml_element = "testcase";
    %%%%%: 5593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5594:    test_result = &(current_test_info_->result_);
    %%%%%: 5594-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5595:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5595-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5596:    xml_element = "testsuite";
    %%%%%: 5596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5597:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5597-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 5598:  } else {
    #####: 5599:    xml_element = "testsuites";
    %%%%%: 5599-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5600:    test_result = &ad_hoc_test_result_;
    %%%%%: 5600-block  0
call    0 never executed
call    1 never executed
        -: 5601:  }
    #####: 5602:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5602-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5603:}
        -: 5604:
        -: 5605:#if GTEST_HAS_DEATH_TEST
        -: 5606:// Disables event forwarding if the control is currently in a death test
        -: 5607:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 50%
        1: 5608:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5609:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5609-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 5610:    listeners()->SuppressEventForwarding();
    %%%%%: 5610-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        1: 5611:}
        -: 5612:#endif  // GTEST_HAS_DEATH_TEST
        -: 5613:
        -: 5614:// Initializes event listeners performing XML output as specified by
        -: 5615:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 20%
        1: 5616:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5617:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5617-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5617-block  1
call    4 returned 1
    $$$$$: 5617-block  2
call    5 never executed
        1: 5618:  if (output_format == "xml") {
        1: 5618-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5619:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5619-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    %%%%%: 5619-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5620:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5620-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5620-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5620-block  2
call   13 never executed
call   14 never executed
    $$$$$: 5620-block  3
call   15 never executed
    $$$$$: 5620-block  4
call   16 never executed
    $$$$$: 5620-block  5
call   17 never executed
        1: 5621:  } else if (output_format == "json") {
        1: 5621-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5622:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5622-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    %%%%%: 5622-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5623:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5623-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5623-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5623-block  2
call   13 never executed
call   14 never executed
    $$$$$: 5623-block  3
call   15 never executed
    $$$$$: 5623-block  4
call   16 never executed
    $$$$$: 5623-block  5
call   17 never executed
        1: 5624:  } else if (output_format != "") {
        1: 5624-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5624-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 5625:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5625-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5625-block  1
call    4 never executed
call    5 never executed
    %%%%%: 5625-block  2
call    6 never executed
call    7 never executed
    $$$$$: 5625-block  3
call    8 never executed
    $$$$$: 5625-block  4
call    9 never executed
    #####: 5626:                        << output_format << "\" ignored.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5626-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5626-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 5627:  }
        1: 5628:}
        -: 5629:
        -: 5630:#if GTEST_CAN_STREAM_RESULTS_
        -: 5631:// Initializes event listeners for streaming test results in string form.
        -: 5632:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 1 returned 100% blocks executed 10%
        1: 5633:void UnitTestImpl::ConfigureStreamingOutput() {
        1: 5634:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        1: 5635:  if (!target.empty()) {
        1: 5635-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5636:    const size_t pos = target.find(':');
    %%%%%: 5636-block  0
call    0 never executed
call    1 never executed
    #####: 5637:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 5638:      listeners()->Append(new StreamingListener(target.substr(0, pos),
    %%%%%: 5638-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    %%%%%: 5638-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 5638-block  2
call   13 never executed
    $$$$$: 5638-block  3
call   14 never executed
    #####: 5639:                                                target.substr(pos+1)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5639-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5639-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5639-block  2
call   12 never executed
call   13 never executed
    $$$$$: 5639-block  3
call   14 never executed
    $$$$$: 5639-block  4
call   15 never executed
    $$$$$: 5639-block  5
call   16 never executed
        -: 5640:    } else {
    #####: 5641:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 5641-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    %%%%%: 5641-block  1
call    4 never executed
call    5 never executed
    $$$$$: 5641-block  2
call    6 never executed
    $$$$$: 5641-block  3
call    7 never executed
    #####: 5642:                          << "\" ignored.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5642-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5642-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 5643:    }
        -: 5644:  }
        1: 5645:}
        1: 5645-block  0
        -: 5646:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5647:
        -: 5648:// Performs initialization dependent upon flag values obtained in
        -: 5649:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5650:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5651:// this function is also called from RunAllTests.  Since this function can be
        -: 5652:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 74%
        2: 5653:void UnitTestImpl::PostFlagParsingInit() {
        -: 5654:  // Ensures that this function does not execute more than once.
       2*: 5655:  if (!post_flag_parse_init_performed_) {
        2: 5655-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 5655-block  1
        2: 5655-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 1
        1: 5656:    post_flag_parse_init_performed_ = true;
        1: 5656-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5657:
        -: 5658:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5659:    // Register to send notifications about key process state changes.
        -: 5660:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5661:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5662:
        -: 5663:#if GTEST_HAS_DEATH_TEST
        1: 5664:    InitDeathTestSubprocessControlInfo();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1: 5665:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5666:#endif  // GTEST_HAS_DEATH_TEST
        -: 5667:
        -: 5668:    // Registers parameterized tests. This makes parameterized tests
        -: 5669:    // available to the UnitTest reflection API without running
        -: 5670:    // RUN_ALL_TESTS.
        1: 5671:    RegisterParameterizedTests();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5672:
        -: 5673:    // Configures listeners for XML output. This makes it possible for users
        -: 5674:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5675:    ConfigureXmlOutput();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5676:
       1*: 5677:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5677-block  0
        1: 5677-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5678:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5678-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 5679:    }
        -: 5680:
        -: 5681:#if GTEST_CAN_STREAM_RESULTS_
        -: 5682:    // Configures listeners for streaming test results to the specified server.
        1: 5683:    ConfigureStreamingOutput();
        1: 5683-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5684:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5685:
        -: 5686:#if GTEST_HAS_ABSL
        -: 5687:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5688:      absl::FailureSignalHandlerOptions options;
        -: 5689:      absl::InstallFailureSignalHandler(options);
        -: 5690:    }
        -: 5691:#endif  // GTEST_HAS_ABSL
        -: 5692:  }
        2: 5693:}
        -: 5694:
        -: 5695:// A predicate that checks the name of a TestSuite against a known
        -: 5696:// value.
        -: 5697://
        -: 5698:// This is used for implementation of the UnitTest class only.  We put
        -: 5699:// it in the anonymous namespace to prevent polluting the outer
        -: 5700:// namespace.
        -: 5701://
        -: 5702:// TestSuiteNameIs is copyable.
        -: 5703:class TestSuiteNameIs {
        -: 5704: public:
        -: 5705:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 100%
        7: 5706:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
        7: 5706-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        -: 5707:
        -: 5708:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 6 returned 100% blocks executed 83%
        6: 5709:  bool operator()(const TestSuite* test_suite) const {
      12*: 5710:    return test_suite != nullptr &&
        6: 5710-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6: 5710-block  1
    %%%%%: 5710-block  2
      12*: 5711:           strcmp(test_suite->name(), name_.c_str()) == 0;
        6: 5711-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
call    3 returned 6
call    4 returned 6
call    5 returned 6
call    6 returned 6
call    7 returned 6
branch  8 taken 0 (fallthrough)
branch  9 taken 6
    %%%%%: 5711-block  1
        6: 5711-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 6
    %%%%%: 5711-block  3
        6: 5711-block  4
branch 12 taken 6 (fallthrough)
branch 13 taken 0
        6: 5711-block  5
        -: 5712:  }
        -: 5713:
        -: 5714: private:
        -: 5715:  std::string name_;
        -: 5716:};
        -: 5717:
        -: 5718:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5719:// exist, creates one and returns it.  It's the CALLER'S
        -: 5720:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5721:// TESTS ARE NOT SHUFFLED.
        -: 5722://
        -: 5723:// Arguments:
        -: 5724://
        -: 5725://   test_suite_name: name of the test suite
        -: 5726://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5727://                    this is not a typed or a type-parameterized test suite.
        -: 5728://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5729://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 7 returned 100% blocks executed 53%
        7: 5730:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5731:    const char* test_suite_name, const char* type_param,
        -: 5732:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5733:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5734:  // Can we find a TestSuite with the given name?
        7: 5735:  const auto test_suite =
        7: 5735-block  0
call    0 returned 7
       21: 5736:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
        7: 5736-block  0
call    6 returned 7
call    7 returned 7
    $$$$$: 5736-block  1
call    8 never executed
    $$$$$: 5736-block  2
call    9 never executed
       28: 5737:                   TestSuiteNameIs(test_suite_name));
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7: 5737-block  0
call    7 returned 7
call    8 returned 7
branch  9 taken 7 (fallthrough)
branch 10 taken 0 (throw)
        7: 5737-block  1
call   11 returned 7
call   12 returned 7
call   13 returned 7
branch 14 taken 7 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 7
call   17 returned 7
call   18 returned 7
call   19 returned 7
call   20 returned 7
call   21 returned 7
    $$$$$: 5737-block  2
call   22 never executed
    $$$$$: 5737-block  3
call   23 never executed
    $$$$$: 5737-block  4
call   24 never executed
    $$$$$: 5737-block  5
call   25 never executed
    $$$$$: 5737-block  6
call   26 never executed
    $$$$$: 5737-block  7
call   27 never executed
        -: 5738:
        7: 5739:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
branch  6 taken 7 (fallthrough)
branch  7 taken 0 (throw)
        7: 5739-block  0
call    8 returned 7
branch  9 taken 6 (fallthrough)
branch 10 taken 1
        6: 5739-block  1
call   11 returned 6
call   12 returned 6
    $$$$$: 5739-block  2
call   13 never executed
        -: 5740:
        -: 5741:  // No.  Let's create one.
        1: 5742:  auto* const new_test_suite =
        1: 5742-block  0
call    0 returned 1
        1: 5743:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5743-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$: 5743-block  1
call    7 never executed
        -: 5744:
        -: 5745:  // Is this a death test suite?
        1: 5746:  if (internal::UnitTestOptions::MatchesFilter(test_suite_name,
        1: 5746-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5746-block  1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    $$$$$: 5746-block  2
call   14 never executed
    $$$$$: 5746-block  3
call   15 never executed
        -: 5747:                                               kDeathTestSuiteFilter)) {
        -: 5748:    // Yes.  Inserts the test suite after the last death test suite
        -: 5749:    // defined so far.  This only works when the test suites haven't
        -: 5750:    // been shuffled.  Otherwise we may end up running a death test
        -: 5751:    // after a non-death test.
    #####: 5752:    ++last_death_test_suite_;
    %%%%%: 5752-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5753:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 5753-block  0
call   18 never executed
    $$$$$: 5753-block  1
call   19 never executed
    #####: 5754:                        new_test_suite);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5754-block  0
call    5 never executed
    $$$$$: 5754-block  1
call    6 never executed
        -: 5755:  } else {
        -: 5756:    // No.  Appends to the end of the list.
        1: 5757:    test_suites_.push_back(new_test_suite);
        1: 5757-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 5758:  }
        -: 5759:
        1: 5760:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        1: 5760-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1: 5760-block  1
call   12 returned 1
    $$$$$: 5760-block  2
call   13 never executed
        1: 5761:  return new_test_suite;
        -: 5762:}
        -: 5763:
        -: 5764:// Helpers for setting up / tearing down the given environment.  They
        -: 5765:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5766:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5766-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5767:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5767-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 5768:
        -: 5769:// Runs all tests in this UnitTest object, prints the result, and
        -: 5770:// returns true if all tests are successful.  If any exception is
        -: 5771:// thrown during a test, the test is considered to be failed, but the
        -: 5772:// rest of the tests will still be run.
        -: 5773://
        -: 5774:// When parameterized tests are enabled, it expands and registers
        -: 5775:// parameterized tests first in RegisterParameterizedTests().
        -: 5776:// All other functions called from RunAllTests() may safely assume that
        -: 5777:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 65%
        1: 5778:bool UnitTestImpl::RunAllTests() {
        -: 5779:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5780:  // called.
        1: 5781:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5781-block  0
call    0 returned 1
        -: 5782:
        -: 5783:  // Do not run any test if the --help flag was specified.
       1*: 5784:  if (g_help_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5784-block  0
        1: 5784-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5785:    return true;
    %%%%%: 5785-block  0
        -: 5786:
        -: 5787:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5788:  // user didn't call InitGoogleTest.
        1: 5789:  PostFlagParsingInit();
        1: 5789-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5790:
        -: 5791:  // Even if sharding is not on, test runners may want to use the
        -: 5792:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5793:  // protocol.
        1: 5794:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5795:
        -: 5796:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5797:  // death test.
        1: 5798:  bool in_subprocess_for_death_test = false;
        -: 5799:
        -: 5800:#if GTEST_HAS_DEATH_TEST
        1: 5801:  in_subprocess_for_death_test =
        1: 5802:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5803:# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5804:  if (in_subprocess_for_death_test) {
        -: 5805:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5806:  }
        -: 5807:# endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5808:#endif  // GTEST_HAS_DEATH_TEST
        -: 5809:
        1: 5810:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5811:                                        in_subprocess_for_death_test);
        -: 5812:
        -: 5813:  // Compares the full test names with the filter to decide which
        -: 5814:  // tests to run.
       1*: 5815:  const bool has_tests_to_run = FilterTests(should_shard
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 5815-block  0
        1: 5815-block  1
        1: 5815-block  2
call    5 returned 1
        -: 5816:                                              ? HONOR_SHARDING_PROTOCOL
        1: 5817:                                              : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5818:
        -: 5819:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
       1*: 5820:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5820-block  0
        1: 5820-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 5821:    // This must be called *after* FilterTests() has been called.
    #####: 5822:    ListTestsMatchingFilter();
    %%%%%: 5822-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 5823:    return true;
        -: 5824:  }
        -: 5825:
        1: 5826:  random_seed_ = GTEST_FLAG_GET(shuffle)
        1: 5826-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
       1*: 5827:                     ? GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed))
        1: 5827-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5827-block  1
        1: 5827-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5827-block  3
call    4 never executed
        1: 5827-block  4
        -: 5828:                     : 0;
        -: 5829:
        -: 5830:  // True if and only if at least one test has failed.
        1: 5831:  bool failed = false;
        -: 5832:
        1: 5833:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        -: 5834:
        1: 5835:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        1: 5836:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
        -: 5837:
        -: 5838:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5839:  // when we are inside the subprocess of a death test.
       1*: 5840:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5840-block  0
        1: 5840-block  1
        -: 5841:
        -: 5842:  // Repeats forever if the repeat count is negative.
        1: 5843:  const bool gtest_repeat_forever = repeat < 0;
        -: 5844:
        -: 5845:  // Should test environments be set up and torn down for each repeat, or only
        -: 5846:  // set up on the first and torn down on the last iteration? If there is no
        -: 5847:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5848:  // environments to avoid leaks in case one of the environments is using
        -: 5849:  // resources that are external to this process. Without this check there would
        -: 5850:  // be no way to clean up those external resources automatically.
        1: 5851:  const bool recreate_environments_when_repeating =
       1*: 5852:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5852-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5852-block  1
        1: 5852-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5852-block  3
branch  4 never executed
branch  5 never executed
        1: 5852-block  4
    %%%%%: 5852-block  5
        -: 5853:      gtest_repeat_forever;
        -: 5854:
        2: 5855:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5855-block  0
        2: 5855-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5855-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        -: 5856:    // We want to preserve failures generated by ad-hoc test
        -: 5857:    // assertions executed before RUN_ALL_TESTS().
        1: 5858:    ClearNonAdHocTestResult();
        1: 5858-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 5859:
        1: 5860:    Timer timer;
        1: 5860-block  0
call    0 returned 1
call    1 returned 1
        -: 5861:
        -: 5862:    // Shuffles test suites and tests if requested.
       1*: 5863:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5863-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5863-block  1
        1: 5863-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 5864:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5864-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 5865:      // This should be done before calling OnTestIterationStart(),
        -: 5866:      // such that a test event listener can see the actual test order
        -: 5867:      // in the event.
    #####: 5868:      ShuffleTests();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5869:    }
        -: 5870:
        -: 5871:    // Tells the unit test event listeners that the tests are about to start.
        1: 5872:    repeater->OnTestIterationStart(*parent_, i);
        1: 5872-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        -: 5873:
        -: 5874:    // Runs each test suite if there is at least one test to run.
        1: 5875:    if (has_tests_to_run) {
        1: 5875-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5876:      // Sets up all environments beforehand. If test environments aren't
        -: 5877:      // recreated for each iteration, only do so on the first iteration.
       1*: 5878:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5878-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5878-block  1
branch  2 never executed
branch  3 never executed
        1: 5879:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5879-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 5880:        ForEach(environments_, SetUpEnvironment);
        1: 5880-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5881:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5881-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        -: 5882:      }
        -: 5883:
        -: 5884:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5885:      // during global set-up.
        1: 5886:      if (Test::IsSkipped()) {
        1: 5886-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5886-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5887:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5888:        // emitted by default.
        -: 5889:        TestResult& test_result =
    #####: 5890:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5890-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5890-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 5891:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5891-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5891-block  1
        -: 5892:          const TestPartResult& test_part_result =
    #####: 5893:              test_result.GetTestPartResult(j);
    %%%%%: 5893-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5894:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5894-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5895:            const std::string& result = test_part_result.message();
    %%%%%: 5895-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5895-block  1
call    8 never executed
call    9 never executed
    %%%%%: 5895-block  2
call   10 never executed
    $$$$$: 5895-block  3
call   11 never executed
    $$$$$: 5895-block  4
call   12 never executed
    $$$$$: 5895-block  5
call   13 never executed
    #####: 5896:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5896-block  0
    %%%%%: 5896-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 5897:          }
        -: 5898:        }
    #####: 5899:        fflush(stdout);
    %%%%%: 5899-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 5900:      } else if (!Test::HasFatalFailure()) {
        1: 5900-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5900-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        2: 5901:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5901-block  0
        2: 5901-block  1
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        1: 5901-block  2
        -: 5902:             test_index++) {
        1: 5903:          GetMutableSuiteCase(test_index)->Run();
        1: 5903-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5903-block  1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
       1*: 5904:          if (GTEST_FLAG_GET(fail_fast) &&
        1: 5904-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5904-block  1
        1: 5904-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5904-block  3
        1: 5904-block  4
        1: 5904-block  5
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 5905:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5905-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5905-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5905-block  2
branch 12 never executed
branch 13 never executed
    #####: 5906:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5906-block  0
    %%%%%: 5906-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5906-block  2
    #####: 5907:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5907-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5907-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5908:            }
    #####: 5909:            break;
    %%%%%: 5909-block  0
        -: 5910:          }
        -: 5911:        }
    #####: 5912:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5912-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5912-block  1
branch  3 never executed
branch  4 never executed
        -: 5913:        // If there was a fatal failure during the global setup then we know we
        -: 5914:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5915:        // skipped to make this obvious in the output.
    #####: 5916:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5916-block  0
    %%%%%: 5916-block  1
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5916-block  2
        -: 5917:             test_index++) {
    #####: 5918:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5918-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5918-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5919:        }
        -: 5920:      }
        -: 5921:
        -: 5922:      // Tears down all environments in reverse order afterwards. If test
        -: 5923:      // environments aren't recreated for each iteration, only do so on the
        -: 5924:      // last iteration.
       1*: 5925:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5925-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5925-block  1
branch  2 never executed
branch  3 never executed
        1: 5926:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5926-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 5927:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5927-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 5927-block  1
call   11 returned 1
call   12 returned 1
    $$$$$: 5927-block  2
call   13 never executed
    $$$$$: 5927-block  3
call   14 never executed
        -: 5928:                      TearDownEnvironment);
        1: 5929:        repeater->OnEnvironmentsTearDownEnd(*parent_);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        -: 5930:      }
        -: 5931:    }
        -: 5932:
        1: 5933:    elapsed_time_ = timer.Elapsed();
        1: 5933-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 5933-block  1
call    5 returned 1
call    6 returned 1
        -: 5934:
        -: 5935:    // Tells the unit test event listener that the tests have just finished.
        1: 5936:    repeater->OnTestIterationEnd(*parent_, i);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        -: 5937:
        -: 5938:    // Gets the result and clears it.
        1: 5939:    if (!Passed()) {
        1: 5939-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5939-block  1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    #####: 5940:      failed = true;
    %%%%%: 5940-block  0
        -: 5941:    }
        -: 5942:
        -: 5943:    // Restores the original test order after the iteration.  This
        -: 5944:    // allows the user to quickly repro a failure that happens in the
        -: 5945:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5946:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5947:    // case the user somehow changes the value of the flag somewhere
        -: 5948:    // (it's always safe to unshuffle the tests).
        1: 5949:    UnshuffleTests();
        1: 5949-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 5950:
       1*: 5951:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5951-block  0
        1: 5951-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 5952:      // Picks a new random seed for each iteration.
    #####: 5953:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5953-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5953-block  1
call    9 never executed
call   10 never executed
        -: 5954:    }
        -: 5955:  }
        -: 5956:
        1: 5957:  repeater->OnTestProgramEnd(*parent_);
        1: 5957-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
        -: 5958:
        1: 5959:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5960:    ColoredPrintf(
    %%%%%: 5960-block  0
call    0 never executed
        -: 5961:        GTestColor::kRed,
        -: 5962:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5963:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5964:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5965:        " will start to enforce the valid usage. "
        -: 5966:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5967:#if GTEST_FOR_GOOGLE_
        -: 5968:    ColoredPrintf(GTestColor::kRed,
        -: 5969:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5970:#endif  // GTEST_FOR_GOOGLE_
        -: 5971:  }
        -: 5972:
        1: 5973:  return !failed;
        1: 5973-block  0
        -: 5974:}
        -: 5975:
        -: 5976:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5977:// if the variable is present. If a file already exists at this location, this
        -: 5978:// function will write over it. If the variable is present, but the file cannot
        -: 5979:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 5980:void WriteToShardStatusFileIfNeeded() {
        1: 5981:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5981-block  0
call    0 returned 1
        1: 5982:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5983:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5983-block  0
call    0 never executed
    #####: 5984:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5985:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5985-block  0
call    0 never executed
        -: 5986:                    "Could not write to the test shard status file \"%s\" "
        -: 5987:                    "specified by the %s environment variable.\n",
        -: 5988:                    test_shard_file, kTestShardStatusFile);
    #####: 5989:      fflush(stdout);
call    0 never executed
    #####: 5990:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5991:    }
    #####: 5992:    fclose(file);
    %%%%%: 5992-block  0
call    0 never executed
        -: 5993:  }
        1: 5994:}
        -: 5995:
        -: 5996:// Checks whether sharding is enabled by examining the relevant
        -: 5997:// environment variable values. If the variables are present,
        -: 5998:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5999:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6000:// disabled because it must only be applied to the original test
        -: 6001:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 8%
        2: 6002:bool ShouldShard(const char* total_shards_env,
        -: 6003:                 const char* shard_index_env,
        -: 6004:                 bool in_subprocess_for_death_test) {
        2: 6005:  if (in_subprocess_for_death_test) {
        2: 6005-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6006:    return false;
    %%%%%: 6006-block  0
        -: 6007:  }
        -: 6008:
        2: 6009:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6009-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6010:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6010-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        -: 6011:
        2: 6012:  if (total_shards == -1 && shard_index == -1) {
        2: 6012-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6012-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6013:    return false;
        2: 6013-block  0
    #####: 6014:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6014-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6014-block  1
branch  2 never executed
branch  3 never executed
    #####: 6015:    const Message msg = Message()
    %%%%%: 6015-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 6015-block  1
call    5 never executed
    #####: 6016:      << "Invalid environment variables: you have "
call    0 never executed
    %%%%%: 6016-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6017:      << kTestShardIndex << " = " << shard_index
    %%%%%: 6017-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6017-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6017-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6018:      << ", but have left " << kTestTotalShards << " unset.\n";
    %%%%%: 6018-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6018-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6018-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6018-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 6018-block  4
call   16 never executed
    #####: 6019:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6019-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6019-block  1
call    9 never executed
call   10 never executed
    $$$$$: 6019-block  2
call   11 never executed
    $$$$$: 6019-block  3
call   12 never executed
    #####: 6020:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6021:    exit(EXIT_FAILURE);
    %%%%%: 6021-block  0
call    0 never executed
    #####: 6022:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6022-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6022-block  1
branch  2 never executed
branch  3 never executed
    #####: 6023:    const Message msg = Message()
    %%%%%: 6023-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 6023-block  1
call    5 never executed
    #####: 6024:      << "Invalid environment variables: you have "
call    0 never executed
    %%%%%: 6024-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6025:      << kTestTotalShards << " = " << total_shards
    %%%%%: 6025-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6025-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6025-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6026:      << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6026-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6026-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6026-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6026-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 6026-block  4
call   16 never executed
    #####: 6027:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6027-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6027-block  1
call    9 never executed
call   10 never executed
    $$$$$: 6027-block  2
call   11 never executed
    $$$$$: 6027-block  3
call   12 never executed
    #####: 6028:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6029:    exit(EXIT_FAILURE);
    %%%%%: 6029-block  0
call    0 never executed
    #####: 6030:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6030-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6030-block  1
branch  2 never executed
branch  3 never executed
    #####: 6031:    const Message msg = Message()
    %%%%%: 6031-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 6031-block  1
call    5 never executed
    #####: 6032:      << "Invalid environment variables: we require 0 <= "
call    0 never executed
    %%%%%: 6032-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6033:      << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6033-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6033-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6033-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6034:      << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6034-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6034-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6034-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6034-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####: 6035:      << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6035-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6035-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6035-block  2
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6035-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 6035-block  4
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 6035-block  5
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$: 6035-block  6
call   24 never executed
    #####: 6036:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6036-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6036-block  1
call    9 never executed
call   10 never executed
    $$$$$: 6036-block  2
call   11 never executed
    $$$$$: 6036-block  3
call   12 never executed
    #####: 6037:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6038:    exit(EXIT_FAILURE);
    %%%%%: 6038-block  0
call    0 never executed
        -: 6039:  }
        -: 6040:
    #####: 6041:  return total_shards > 1;
    %%%%%: 6041-block  0
        -: 6042:}
        -: 6043:
        -: 6044:// Parses the environment variable var as an Int32. If it is unset,
        -: 6045:// returns default_val. If it is not an Int32, prints an error
        -: 6046:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 24%
        4: 6047:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6048:  const char* str_val = posix::GetEnv(var);
        4: 6048-block  0
call    0 returned 4
        4: 6049:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6050:    return default_val;
        4: 6050-block  0
        -: 6051:  }
        -: 6052:
    #####: 6053:  int32_t result;
    %%%%%: 6053-block  0
call    0 never executed
    #####: 6054:  if (!ParseInt32(Message() << "The value of environment variable " << var,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6054-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6054-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6054-block  2
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 6054-block  3
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    $$$$$: 6054-block  4
call   20 never executed
    $$$$$: 6054-block  5
call   21 never executed
        -: 6055:                  str_val, &result)) {
    #####: 6056:    exit(EXIT_FAILURE);
    %%%%%: 6056-block  0
call    0 never executed
        -: 6057:  }
    #####: 6058:  return result;
    %%%%%: 6058-block  0
        -: 6059:}
        -: 6060:
        -: 6061:// Given the total number of shards, the shard index, and the test id,
        -: 6062:// returns true if and only if the test should be run on this shard. The test id
        -: 6063:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6064:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6065:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6066:  return (test_id % total_shards) == shard_index;
    %%%%%: 6066-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6066-block  1
    %%%%%: 6066-block  2
        -: 6067:}
        -: 6068:
        -: 6069:// Compares the name of each test with the user-specified filter to
        -: 6070:// decide whether the test should be run, then records the result in
        -: 6071:// each TestSuite and TestInfo object.
        -: 6072:// If shard_tests == true, further filters tests based on sharding
        -: 6073:// variables in the environment - see
        -: 6074:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 6075:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 77%
        1: 6076:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        1: 6077:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 6077-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6077-block  1
    #####: 6078:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
    %%%%%: 6078-block  0
call    0 never executed
        1: 6079:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 6079-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6079-block  1
    #####: 6080:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
    %%%%%: 6080-block  0
call    0 never executed
        -: 6081:
        -: 6082:  // num_runnable_tests are the number of tests that will
        -: 6083:  // run across all shards (i.e., match filter and are not disabled).
        -: 6084:  // num_selected_tests are the number of tests to be run on
        -: 6085:  // this shard.
        1: 6086:  int num_runnable_tests = 0;
        1: 6087:  int num_selected_tests = 0;
        2: 6088:  for (auto* test_suite : test_suites_) {
        1: 6088-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
        2: 6088-block  1
call    9 returned 2
branch 10 taken 1 (fallthrough)
branch 11 taken 1
        1: 6088-block  2
call   12 returned 1
call   13 returned 1
call   14 returned 1
        2: 6089:    const std::string& test_suite_name = test_suite->name();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 6089-block  0
call   10 returned 1
call   11 returned 1
        1: 6089-block  1
call   12 returned 1
    $$$$$: 6089-block  2
call   13 never executed
    $$$$$: 6089-block  3
call   14 never executed
    $$$$$: 6089-block  4
call   15 never executed
        1: 6090:    test_suite->set_should_run(false);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 6091:
        8: 6092:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
        8: 6092-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
call    4 returned 8
call    5 returned 8
branch  6 taken 7 (fallthrough)
branch  7 taken 1
        7: 6093:      TestInfo* const test_info = test_suite->test_info_list()[j];
        7: 6093-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
       21: 6094:      const std::string test_name(test_info->name());
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
branch  6 taken 7 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 7
call    9 returned 7
    $$$$$: 6094-block  0
call   10 never executed
    $$$$$: 6094-block  1
call   11 never executed
        -: 6095:      // A test is disabled if test suite name or test name matches
        -: 6096:      // kDisableTestFilter.
        7: 6097:      const bool is_disabled = internal::UnitTestOptions::MatchesFilter(
call    0 returned 7
      14*: 6098:                                   test_suite_name, kDisableTestFilter) ||
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    %%%%%: 6098-block  0
        7: 6098-block  1
        7: 6099:                               internal::UnitTestOptions::MatchesFilter(
        7: 6099-block  0
call    0 returned 7
        7: 6100:                                   test_name, kDisableTestFilter);
        7: 6101:      test_info->is_disabled_ = is_disabled;
        7: 6101-block  0
call    0 returned 7
call    1 returned 7
        -: 6102:
        7: 6103:      const bool matches_filter = internal::UnitTestOptions::FilterMatchesTest(
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -: 6104:          test_suite_name, test_name);
        7: 6105:      test_info->matches_filter_ = matches_filter;
        7: 6105-block  0
call    0 returned 7
call    1 returned 7
        -: 6106:
        7: 6107:      const bool is_runnable =
       7*: 6108:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%: 6108-block  0
        7: 6108-block  1
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7: 6108-block  2
branch  4 taken 7 (fallthrough)
branch  5 taken 0
        7: 6108-block  3
branch  6 taken 7 (fallthrough)
branch  7 taken 0
        7: 6108-block  4
    %%%%%: 6108-block  5
        -: 6109:          matches_filter;
        -: 6110:
        -: 6111:      const bool is_in_another_shard =
       7*: 6112:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
        7: 6112-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%: 6112-block  1
        7: 6112-block  2
    #####: 6113:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6113-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        7: 6114:      test_info->is_in_another_shard_ = is_in_another_shard;
        7: 6114-block  0
call    0 returned 7
call    1 returned 7
       7*: 6115:      const bool is_selected = is_runnable && !is_in_another_shard;
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 6115-block  0
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7: 6115-block  1
    %%%%%: 6115-block  2
        -: 6116:
        7: 6117:      num_runnable_tests += is_runnable;
        7: 6118:      num_selected_tests += is_selected;
        -: 6119:
        7: 6120:      test_info->should_run_ = is_selected;
        7: 6120-block  0
call    0 returned 7
call    1 returned 7
       7*: 6121:      test_suite->set_should_run(test_suite->should_run() || is_selected);
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
branch  7 taken 1 (fallthrough)
branch  8 taken 6
        1: 6121-block  0
branch  9 taken 1 (fallthrough)
branch 10 taken 0
        7: 6121-block  1
    %%%%%: 6121-block  2
        7: 6121-block  3
call   11 returned 7
        -: 6122:    }
        -: 6123:  }
        1: 6124:  return num_selected_tests;
        1: 6124-block  0
        -: 6125:}
        -: 6126:
        -: 6127:// Prints the given C-string on a single line by replacing all '\n'
        -: 6128:// characters with string "\\n".  If the output takes more than
        -: 6129:// max_length characters, only prints the first max_length characters
        -: 6130:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6131:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6132:  if (str != nullptr) {
    %%%%%: 6132-block  0
branch  0 never executed
branch  1 never executed
    #####: 6133:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6133-block  0
    %%%%%: 6133-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6133-block  2
call    3 never executed
    #####: 6134:      if (i >= max_length) {
    %%%%%: 6134-block  0
branch  0 never executed
branch  1 never executed
    #####: 6135:        printf("...");
    %%%%%: 6135-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6135-block  1
    %%%%%: 6135-block  2
call    2 never executed
    #####: 6136:        break;
        -: 6137:      }
    #####: 6138:      if (*str == '\n') {
    %%%%%: 6138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6139:        printf("\\n");
    %%%%%: 6139-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6139-block  1
    %%%%%: 6139-block  2
call    2 never executed
    #####: 6140:        i += 2;
        -: 6141:      } else {
    #####: 6142:        printf("%c", *str);
    %%%%%: 6142-block  0
call    0 never executed
call    1 never executed
    #####: 6143:        ++i;
        -: 6144:      }
        -: 6145:    }
        -: 6146:  }
    #####: 6147:}
        -: 6148:
        -: 6149:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6150:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6151:  // Print at most this many characters for each type/value parameter.
    #####: 6152:  const int kMaxParamLength = 250;
        -: 6153:
    #####: 6154:  for (auto* test_suite : test_suites_) {
    %%%%%: 6154-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    %%%%%: 6154-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6154-block  2
call   12 never executed
call   13 never executed
    %%%%%: 6154-block  3
call   14 never executed
    #####: 6155:    bool printed_test_suite_name = false;
        -: 6156:
    #####: 6157:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6157-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6157-block  1
    #####: 6158:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6158-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 6159:      if (test_info->matches_filter_) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6159-block  0
    %%%%%: 6159-block  1
branch  3 never executed
branch  4 never executed
    #####: 6160:        if (!printed_test_suite_name) {
    %%%%%: 6160-block  0
branch  0 never executed
branch  1 never executed
    #####: 6161:          printed_test_suite_name = true;
    #####: 6162:          printf("%s.", test_suite->name());
    %%%%%: 6162-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6162-block  1
    %%%%%: 6162-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6163:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6163-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6164:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6164-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6164-block  1
    %%%%%: 6164-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 6165:            // We print the type parameter on a single line to make
        -: 6166:            // the output easy to parse by a program.
    #####: 6167:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6167-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 6168:          }
    #####: 6169:          printf("\n");
    %%%%%: 6169-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6170:        }
    #####: 6171:        printf("  %s", test_info->name());
    %%%%%: 6171-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6171-block  1
    %%%%%: 6171-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6172:        if (test_info->value_param() != nullptr) {
    %%%%%: 6172-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6173:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6173-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6173-block  1
    %%%%%: 6173-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 6174:          // We print the value parameter on a single line to make the
        -: 6175:          // output easy to parse by a program.
    #####: 6176:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6176-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 6177:        }
    #####: 6178:        printf("\n");
    %%%%%: 6178-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6179:      }
        -: 6180:    }
        -: 6181:  }
    #####: 6182:  fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6183:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6183-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6183-block  1
call    4 never executed
    $$$$$: 6183-block  2
call    5 never executed
    #####: 6184:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6184-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6184-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6184-block  2
    %%%%%: 6184-block  3
    %%%%%: 6184-block  4
branch  8 never executed
branch  9 never executed
    #####: 6185:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6185-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6185-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6185-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 6185-block  3
call   15 never executed
    $$$$$: 6185-block  4
call   16 never executed
    $$$$$: 6185-block  5
call   17 never executed
    $$$$$: 6185-block  6
call   18 never executed
    #####: 6186:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6186-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 6186-block  1
call    7 never executed
    $$$$$: 6186-block  2
call    8 never executed
    #####: 6187:    std::stringstream stream;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6187-block  0
call    4 never executed
call    5 never executed
    $$$$$: 6187-block  1
call    6 never executed
call    7 never executed
    #####: 6188:    if (output_format == "xml") {
    %%%%%: 6188-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6189:      XmlUnitTestResultPrinter(
    %%%%%: 6189-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6189-block  1
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 6189-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6189-block  3
call   10 never executed
    #####: 6190:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6190-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 6190-block  1
call    7 never executed
    $$$$$: 6190-block  2
call    8 never executed
    #####: 6191:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6191-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6192:    } else if (output_format == "json") {
    %%%%%: 6192-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6193:      JsonUnitTestResultPrinter(
    %%%%%: 6193-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6193-block  1
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 6193-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6193-block  3
call   10 never executed
    #####: 6194:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6194-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 6194-block  1
call    7 never executed
    $$$$$: 6194-block  2
call    8 never executed
    #####: 6195:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6195-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 6196:    }
    #####: 6197:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6197-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6197-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6197-block  2
    %%%%%: 6197-block  3
branch  8 never executed
branch  9 never executed
    %%%%%: 6197-block  4
    %%%%%: 6197-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 6197-block  6
call   13 never executed
call   14 never executed
    $$$$$: 6197-block  7
call   15 never executed
    $$$$$: 6197-block  8
call   16 never executed
    #####: 6198:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6199:  }
    #####: 6200:}
        -: 6201:
        -: 6202:// Sets the OS stack trace getter.
        -: 6203://
        -: 6204:// Does nothing if the input and the current OS stack trace getter are
        -: 6205:// the same; otherwise, deletes the old getter and makes the input the
        -: 6206:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6207:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6208:    OsStackTraceGetterInterface* getter) {
    #####: 6209:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6209-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6210:    delete os_stack_trace_getter_;
    %%%%%: 6210-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6210-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 6211:    os_stack_trace_getter_ = getter;
    %%%%%: 6211-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 6212:  }
    #####: 6213:}
        -: 6214:
        -: 6215:// Returns the current OS stack trace getter if it is not NULL;
        -: 6216:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6217:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 37 returned 100% blocks executed 100%
       37: 6218:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       37: 6219:  if (os_stack_trace_getter_ == nullptr) {
       37: 6219-block  0
call    0 returned 37
call    1 returned 37
call    2 returned 37
call    3 returned 37
branch  4 taken 1 (fallthrough)
branch  5 taken 36
        -: 6220:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6221:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6222:#else
        1: 6223:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6223-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
        -: 6224:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6225:  }
        -: 6226:
       37: 6227:  return os_stack_trace_getter_;
       37: 6227-block  0
call    0 returned 37
call    1 returned 37
call    2 returned 37
call    3 returned 37
        -: 6228:}
        -: 6229:
        -: 6230:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 30 returned 100% blocks executed 75%
       30: 6231:TestResult* UnitTestImpl::current_test_result() {
       30: 6232:  if (current_test_info_ != nullptr) {
       30: 6232-block  0
call    0 returned 30
call    1 returned 30
call    2 returned 30
call    3 returned 30
branch  4 taken 28 (fallthrough)
branch  5 taken 2
       28: 6233:    return &current_test_info_->result_;
       28: 6233-block  0
call    0 returned 28
call    1 returned 28
call    2 returned 28
call    3 returned 28
call    4 returned 28
call    5 returned 28
        -: 6234:  }
        2: 6235:  if (current_test_suite_ != nullptr) {
        2: 6235-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    #####: 6236:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6236-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 6237:  }
        2: 6238:  return &ad_hoc_test_result_;
        2: 6238-block  0
call    0 returned 2
call    1 returned 2
        -: 6239:}
        -: 6240:
        -: 6241:// Shuffles all test suites, and the tests within each test suite,
        -: 6242:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6243:void UnitTestImpl::ShuffleTests() {
        -: 6244:  // Shuffles the death test suites.
    #####: 6245:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6245-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 6246:
        -: 6247:  // Shuffles the non-death test suites.
    #####: 6248:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 6249:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 6250:
        -: 6251:  // Shuffles the tests inside each test suite.
    #####: 6252:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    %%%%%: 6252-block  0
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6252-block  1
call   12 never executed
call   13 never executed
    %%%%%: 6252-block  2
call   14 never executed
    #####: 6253:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 6254:  }
    #####: 6255:}
        -: 6256:
        -: 6257:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6258:void UnitTestImpl::UnshuffleTests() {
        2: 6259:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6259-block  0
        2: 6259-block  1
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        -: 6260:    // Unshuffles the tests in each test suite.
        1: 6261:    test_suites_[i]->UnshuffleTests();
        1: 6261-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
        -: 6262:    // Resets the index of each test suite.
        1: 6263:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 6264:  }
        1: 6265:}
        -: 6266:
        -: 6267:// Returns the current OS stack trace as an std::string.
        -: 6268://
        -: 6269:// The maximum number of stack frames to be included is specified by
        -: 6270:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6271:// specifies the number of top frames to be skipped, which doesn't
        -: 6272:// count against the number of frames to be included.
        -: 6273://
        -: 6274:// For example, if Foo() calls Bar(), which in turn calls
        -: 6275:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6276:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 6277:std::string GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/,
        -: 6278:                                            int skip_count) {
        -: 6279:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6280:  // to what the user really wants to skip.
    #####: 6281:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6281-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 6282:}
        -: 6283:
        -: 6284:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6285:// suppress unreachable code warnings.
        -: 6286:namespace {
        -: 6287:class ClassUniqueToAlwaysTrue {};
        -: 6288:}
        -: 6289:
function _ZN7testing8internal6IsTrueEb called 15 returned 100% blocks executed 100%
       15: 6290:bool IsTrue(bool condition) { return condition; }
       15: 6290-block  0
        -: 6291:
function _ZN7testing8internal10AlwaysTrueEv called 0 returned 0% blocks executed 0%
    #####: 6292:bool AlwaysTrue() {
        -: 6293:#if GTEST_HAS_EXCEPTIONS
        -: 6294:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6295:  // but it makes the compiler think that it may throw.
    #####: 6296:  if (IsTrue(false))
    %%%%%: 6296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6297:    throw ClassUniqueToAlwaysTrue();
    %%%%%: 6297-block  0
call    0 never executed
call    1 never executed
        -: 6298:#endif  // GTEST_HAS_EXCEPTIONS
    #####: 6299:  return true;
    %%%%%: 6299-block  0
        -: 6300:}
        -: 6301:
        -: 6302:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6303:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6304:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6305:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6306:  const size_t prefix_len = strlen(prefix);
    %%%%%: 6306-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6306-block  1
    #####: 6307:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6307-block  1
    %%%%%: 6307-block  2
branch  3 never executed
branch  4 never executed
    %%%%%: 6307-block  3
    %%%%%: 6307-block  4
branch  5 never executed
branch  6 never executed
    #####: 6308:    *pstr += prefix_len;
    %%%%%: 6308-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6309:    return true;
        -: 6310:  }
    #####: 6311:  return false;
    %%%%%: 6311-block  0
        -: 6312:}
        -: 6313:
        -: 6314:// Parses a string as a command line flag.  The string should have
        -: 6315:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6316:// part can be omitted.
        -: 6317://
        -: 6318:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 12 returned 100% blocks executed 63%
       12: 6319:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6320:                                  bool def_optional) {
        -: 6321:  // str and flag must not be NULL.
      12*: 6322:  if (str == nullptr || flag_name == nullptr) return nullptr;
       12: 6322-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 6322-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 12
    %%%%%: 6322-block  2
        -: 6323:
        -: 6324:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
       12: 6325:  const std::string flag_str =
       12: 6325-block  0
call    0 returned 12
       60: 6326:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
call    0 returned 12
call    1 returned 12
call    2 returned 12
call    3 returned 12
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
       12: 6326-block  0
call    7 returned 12
call    8 returned 12
branch  9 taken 12 (fallthrough)
branch 10 taken 0 (throw)
       12: 6326-block  1
call   11 returned 12
call   12 returned 12
branch 13 taken 12 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 12
call   16 returned 12
call   17 returned 12
       12: 6326-block  2
call   18 returned 12
    $$$$$: 6326-block  3
call   19 never executed
    $$$$$: 6326-block  4
call   20 never executed
    $$$$$: 6326-block  5
call   21 never executed
       12: 6327:  const size_t flag_len = flag_str.length();
call    0 returned 12
      12*: 6328:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    %%%%%: 6328-block  0
       12: 6328-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 12
    %%%%%: 6328-block  2
       12: 6328-block  3
branch  5 taken 10 (fallthrough)
branch  6 taken 2
       10: 6328-block  4
        -: 6329:
        -: 6330:  // Skips the flag name.
        2: 6331:  const char* flag_end = str + flag_len;
        2: 6331-block  0
call    0 returned 2
        -: 6332:
        -: 6333:  // When def_optional is true, it's OK to not have a "=value" part.
       2*: 6334:  if (def_optional && (flag_end[0] == '\0')) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6334-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6335:    return flag_end;
    %%%%%: 6335-block  0
        -: 6336:  }
        -: 6337:
        -: 6338:  // If def_optional is true and there are more characters after the
        -: 6339:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6340:  // the flag name.
       2*: 6341:  if (flag_end[0] != '=') return nullptr;
        2: 6341-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%: 6341-block  1
        -: 6342:
        -: 6343:  // Returns the string after "=".
        2: 6344:  return flag_end + 1;
        2: 6344-block  0
call    0 returned 2
        -: 6345:}
        -: 6346:
        -: 6347:// Parses a string for a bool flag, in the form of either
        -: 6348:// "--flag=value" or "--flag".
        -: 6349://
        -: 6350:// In the former case, the value is taken as true as long as it does
        -: 6351:// not start with '0', 'f', or 'F'.
        -: 6352://
        -: 6353:// In the latter case, the value is taken as true.
        -: 6354://
        -: 6355:// On success, stores the value of the flag in *value, and returns
        -: 6356:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 8 returned 100% blocks executed 29%
        8: 6357:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6358:  // Gets the value of the flag as a string.
        8: 6359:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        8: 6359-block  0
call    0 returned 8
        -: 6360:
        -: 6361:  // Aborts if the parsing failed.
        8: 6362:  if (value_str == nullptr) return false;
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 6362-block  0
        -: 6363:
        -: 6364:  // Converts the string value to a bool.
    #####: 6365:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6365-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6365-block  3
    %%%%%: 6365-block  4
    %%%%%: 6365-block  5
call    9 never executed
    #####: 6366:  return true;
        -: 6367:}
        -: 6368:
        -: 6369:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6370://
        -: 6371:// On success, stores the value of the flag in *value, and returns
        -: 6372:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6373:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6374:  // Gets the value of the flag as a string.
    #####: 6375:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6375-block  0
call    0 never executed
        -: 6376:
        -: 6377:  // Aborts if the parsing failed.
    #####: 6378:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6378-block  0
        -: 6379:
        -: 6380:  // Sets *value to the value of the flag.
    #####: 6381:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6381-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6381-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6381-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 6381-block  3
call   14 never executed
call   15 never executed
    $$$$$: 6381-block  4
call   16 never executed
    $$$$$: 6381-block  5
call   17 never executed
    #####: 6382:                    value);
    %%%%%: 6382-block  0
        -: 6383:}
        -: 6384:
        -: 6385:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6386://
        -: 6387:// On success, stores the value of the flag in *value, and returns
        -: 6388:// true.  On failure, returns false without changing *value.
        -: 6389:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 4 returned 100% blocks executed 100%
        4: 6390:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6391:  // Gets the value of the flag as a string.
        4: 6392:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        4: 6392-block  0
call    0 returned 4
        -: 6393:
        -: 6394:  // Aborts if the parsing failed.
        4: 6395:  if (value_str == nullptr) return false;
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 6395-block  0
        -: 6396:
        -: 6397:  // Sets *value to the value of the flag.
        2: 6398:  *value = value_str;
        2: 6398-block  0
call    0 returned 2
call    1 returned 2
        2: 6399:  return true;
        -: 6400:}
        -: 6401:
        -: 6402:// Determines whether a string has a prefix that Google Test uses for its
        -: 6403:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6404:// If Google Test detects that a command line flag has its prefix but is not
        -: 6405:// recognized, it will print its help message. Flags starting with
        -: 6406:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6407:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6408:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6409:  return (SkipPrefix("--", &str) ||
    %%%%%: 6409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6410:          SkipPrefix("-", &str) ||
    %%%%%: 6410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6411:          SkipPrefix("/", &str)) &&
    %%%%%: 6411-block  0
call    0 never executed
    #####: 6412:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6412-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6412-block  1
    %%%%%: 6412-block  2
    #####: 6413:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6414:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6414-block  0
call    0 never executed
    %%%%%: 6414-block  1
        -: 6415:}
        -: 6416:
        -: 6417:// Prints a string containing code-encoded text.  The following escape
        -: 6418:// sequences can be used in the string to control the text color:
        -: 6419://
        -: 6420://   @@    prints a single '@' character.
        -: 6421://   @R    changes the color to red.
        -: 6422://   @G    changes the color to green.
        -: 6423://   @Y    changes the color to yellow.
        -: 6424://   @D    changes to the default terminal text color.
        -: 6425://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6426:static void PrintColorEncoded(const char* str) {
    #####: 6427:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6427-block  0
        -: 6428:
        -: 6429:  // Conceptually, we split the string into segments divided by escape
        -: 6430:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6431:  // each iteration, the str pointer advances to the beginning of the
        -: 6432:  // next segment.
        -: 6433:  for (;;) {
    #####: 6434:    const char* p = strchr(str, '@');
    %%%%%: 6434-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6434-block  1
    #####: 6435:    if (p == nullptr) {
    %%%%%: 6435-block  0
branch  0 never executed
branch  1 never executed
    #####: 6436:      ColoredPrintf(color, "%s", str);
    %%%%%: 6436-block  0
call    0 never executed
    #####: 6437:      return;
    %%%%%: 6437-block  0
        -: 6438:    }
        -: 6439:
    #####: 6440:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6440-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6440-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6440-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 6440-block  3
call   15 never executed
    $$$$$: 6440-block  4
call   16 never executed
    $$$$$: 6440-block  5
call   17 never executed
    $$$$$: 6440-block  6
call   18 never executed
        -: 6441:
    #####: 6442:    const char ch = p[1];
call    0 never executed
call    1 never executed
    #####: 6443:    str = p + 2;
call    0 never executed
    #####: 6444:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6445:      ColoredPrintf(color, "@");
    %%%%%: 6445-block  0
call    0 never executed
    #####: 6446:    } else if (ch == 'D') {
    %%%%%: 6446-block  0
branch  0 never executed
branch  1 never executed
    #####: 6447:      color = GTestColor::kDefault;
    %%%%%: 6447-block  0
    #####: 6448:    } else if (ch == 'R') {
    %%%%%: 6448-block  0
branch  0 never executed
branch  1 never executed
    #####: 6449:      color = GTestColor::kRed;
    %%%%%: 6449-block  0
    #####: 6450:    } else if (ch == 'G') {
    %%%%%: 6450-block  0
branch  0 never executed
branch  1 never executed
    #####: 6451:      color = GTestColor::kGreen;
    %%%%%: 6451-block  0
    #####: 6452:    } else if (ch == 'Y') {
    %%%%%: 6452-block  0
branch  0 never executed
branch  1 never executed
    #####: 6453:      color = GTestColor::kYellow;
    %%%%%: 6453-block  0
        -: 6454:    } else {
    #####: 6455:      --str;
    %%%%%: 6455-block  0
call    0 never executed
        -: 6456:    }
    #####: 6457:  }
    %%%%%: 6457-block  0
        -: 6458:}
        -: 6459:
        -: 6460:static const char kColorEncodedHelpMessage[] =
        -: 6461:    "This program contains tests written using " GTEST_NAME_
        -: 6462:    ". You can use the\n"
        -: 6463:    "following command line flags to control its behavior:\n"
        -: 6464:    "\n"
        -: 6465:    "Test Selection:\n"
        -: 6466:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6467:    "list_tests@D\n"
        -: 6468:    "      List the names of all tests instead of running them. The name of\n"
        -: 6469:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6470:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6471:    "filter=@YPOSITIVE_PATTERNS"
        -: 6472:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6473:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6474:    "but\n"
        -: 6475:    "      none of the negative patterns. '?' matches any single character; "
        -: 6476:    "'*'\n"
        -: 6477:    "      matches any substring; ':' separates two patterns.\n"
        -: 6478:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6479:    "also_run_disabled_tests@D\n"
        -: 6480:    "      Run all disabled tests too.\n"
        -: 6481:    "\n"
        -: 6482:    "Test Execution:\n"
        -: 6483:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6484:    "repeat=@Y[COUNT]@D\n"
        -: 6485:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6486:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6487:    "shuffle@D\n"
        -: 6488:    "      Randomize tests' orders on every iteration.\n"
        -: 6489:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6490:    "random_seed=@Y[NUMBER]@D\n"
        -: 6491:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6492:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6493:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6494:    "recreate_environments_when_repeating@D\n"
        -: 6495:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6496:    "      of the test.\n"
        -: 6497:    "\n"
        -: 6498:    "Test Output:\n"
        -: 6499:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6500:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6501:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6502:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6503:    "brief=1@D\n"
        -: 6504:    "      Only print test failures.\n"
        -: 6505:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6506:    "print_time=0@D\n"
        -: 6507:    "      Don't print the elapsed time of each test.\n"
        -: 6508:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6509:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6510:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6511:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6512:    "given\n"
        -: 6513:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6514:# if GTEST_CAN_STREAM_RESULTS_
        -: 6515:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6516:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6517:    "      Stream test results to the given server.\n"
        -: 6518:# endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6519:    "\n"
        -: 6520:    "Assertion Behavior:\n"
        -: 6521:# if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6522:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6523:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6524:    "      Set the default death test style.\n"
        -: 6525:# endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6526:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6527:    "break_on_failure@D\n"
        -: 6528:    "      Turn assertion failures into debugger break-points.\n"
        -: 6529:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6530:    "throw_on_failure@D\n"
        -: 6531:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6532:    "      test framework.\n"
        -: 6533:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6534:    "catch_exceptions=0@D\n"
        -: 6535:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6536:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6537:    "\n"
        -: 6538:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6539:    "list_tests@D, you can alternatively set "
        -: 6540:    "the corresponding\n"
        -: 6541:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6542:    "to\n"
        -: 6543:    "disable colored text output, you can either specify "
        -: 6544:    "@G--" GTEST_FLAG_PREFIX_
        -: 6545:    "color=no@D or set\n"
        -: 6546:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6547:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6548:    "\n"
        -: 6549:    "For more information, please read the " GTEST_NAME_
        -: 6550:    " documentation at\n"
        -: 6551:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6552:    "\n"
        -: 6553:    "(not one in your own code or tests), please report it to\n"
        -: 6554:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6555:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 2 returned 100% blocks executed 25%
        2: 6556:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6557:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6558:  do {                                        \
        -: 6559:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6560:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6561:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6562:      return true;                            \
        -: 6563:    }                                         \
        -: 6564:  } while (false)
        -: 6565:
       2*: 6566:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        2: 6566-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%: 6566-block  1
        2: 6566-block  2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6566-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 2
    %%%%%: 6566-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6566-block  5
    %%%%%: 6566-block  6
       2*: 6567:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        2: 6567-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%: 6567-block  1
        2: 6567-block  2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6567-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 2
    %%%%%: 6567-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6567-block  5
    %%%%%: 6567-block  6
       2*: 6568:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        2: 6568-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%: 6568-block  1
        2: 6568-block  2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6568-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 2
    %%%%%: 6568-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6568-block  5
    %%%%%: 6568-block  6
        2: 6569:  GTEST_INTERNAL_PARSE_FLAG(color);
        2: 6569-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6569-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2: 6569-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 1
        1: 6569-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1: 6569-block  4
    $$$$$: 6569-block  5
call   12 never executed
       1*: 6570:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
        1: 6570-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6570-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 6570-block  2
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 6570-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6570-block  4
    $$$$$: 6570-block  5
call   12 never executed
       1*: 6571:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
        1: 6571-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6571-block  1
        1: 6571-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6571-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%: 6571-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6571-block  5
    %%%%%: 6571-block  6
       1*: 6572:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
        1: 6572-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6572-block  1
        1: 6572-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6572-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%: 6572-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6572-block  5
    %%%%%: 6572-block  6
        1: 6573:  GTEST_INTERNAL_PARSE_FLAG(filter);
        1: 6573-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6573-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 6573-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1: 6573-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1: 6573-block  4
    $$$$$: 6573-block  5
call   12 never executed
    #####: 6574:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6574-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6574-block  2
branch  7 never executed
branch  8 never executed
    %%%%%: 6574-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6574-block  4
    $$$$$: 6574-block  5
call   12 never executed
    #####: 6575:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6575-block  1
    %%%%%: 6575-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6575-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 6575-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6575-block  5
    %%%%%: 6575-block  6
    #####: 6576:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6576-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6576-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6576-block  2
branch  7 never executed
branch  8 never executed
    %%%%%: 6576-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6576-block  4
    $$$$$: 6576-block  5
call   12 never executed
    #####: 6577:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6577-block  1
    %%%%%: 6577-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6577-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 6577-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6577-block  5
    %%%%%: 6577-block  6
    #####: 6578:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6578-block  1
    %%%%%: 6578-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6578-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 6578-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6578-block  5
    %%%%%: 6578-block  6
    #####: 6579:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6579-block  1
    %%%%%: 6579-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6579-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 6579-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6579-block  5
    %%%%%: 6579-block  6
    #####: 6580:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6580-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6580-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 6580-block  2
    #####: 6581:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6581-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6581-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 6581-block  2
    #####: 6582:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6582-block  1
    %%%%%: 6582-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6582-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 6582-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6582-block  5
    %%%%%: 6582-block  6
    #####: 6583:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6583-block  1
    %%%%%: 6583-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6583-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 6583-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6583-block  5
    %%%%%: 6583-block  6
    #####: 6584:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6584-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6584-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 6584-block  2
    #####: 6585:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6585-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6585-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6585-block  2
branch  7 never executed
branch  8 never executed
    %%%%%: 6585-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6585-block  4
    $$$$$: 6585-block  5
call   12 never executed
    #####: 6586:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6586-block  1
    %%%%%: 6586-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6586-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 6586-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 6586-block  5
    %%%%%: 6586-block  6
    #####: 6587:  return false;
    %%%%%: 6587-block  0
        -: 6588:}
        -: 6589:
        -: 6590:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6591:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6592:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6592-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6593:  if (!flagfile) {
    %%%%%: 6593-block  0
branch  0 never executed
branch  1 never executed
    #####: 6594:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6594-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6594-block  1
call    4 never executed
call    5 never executed
    %%%%%: 6594-block  2
call    6 never executed
call    7 never executed
    $$$$$: 6594-block  3
call    8 never executed
    $$$$$: 6594-block  4
call    9 never executed
    #####: 6595:                      << "\"";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6595-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6595-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 6596:  }
    #####: 6597:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6597-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 6597-block  1
call    5 never executed
    #####: 6598:  posix::FClose(flagfile);
    %%%%%: 6598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6599:  std::vector<std::string> lines;
    %%%%%: 6599-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6599-block  1
call    2 never executed
    $$$$$: 6599-block  2
call    3 never executed
    #####: 6600:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6601:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6601-block  0
    %%%%%: 6601-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6601-block  2
    #####: 6602:    if (lines[i].empty())
    %%%%%: 6602-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6603:      continue;
    %%%%%: 6603-block  0
    #####: 6604:    if (!ParseGoogleTestFlag(lines[i].c_str()))
    %%%%%: 6604-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6604-block  1
branch  6 never executed
branch  7 never executed
    #####: 6605:      g_help_flag = true;
    %%%%%: 6605-block  0
        -: 6606:  }
    #####: 6607:}
        -: 6608:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6609:
        -: 6610:// Parses the command line for Google Test flags, without initializing
        -: 6611:// other parts of Google Test.  The type parameter CharType can be
        -: 6612:// instantiated to either char or wchar_t.
        -: 6613:template <typename CharType>
       1*: 6614:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6615:  std::string flagfile_value;
       3*: 6616:  for (int i = 1; i < *argc; i++) {
       4*: 6617:    const std::string arg_string = StreamableToString(argv[i]);
       2*: 6618:    const char* const arg = arg_string.c_str();
        -: 6619:
        -: 6620:    using internal::ParseFlag;
        -: 6621:
       2*: 6622:    bool remove_flag = false;
       2*: 6623:    if (ParseGoogleTestFlag(arg)) {
       2*: 6624:      remove_flag = true;
        -: 6625:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6626:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6627:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6628:      LoadFlagsFromFile(flagfile_value);
    #####: 6629:      remove_flag = true;
        -: 6630:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6631:    } else if (arg_string == "--help" || arg_string == "-h" ||
    #####: 6632:               arg_string == "-?" || arg_string == "/?" ||
    #####: 6633:               HasGoogleTestFlagPrefix(arg)) {
        -: 6634:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6635:      // internal ones) trigger help display.
    #####: 6636:      g_help_flag = true;
        -: 6637:    }
        -: 6638:
       2*: 6639:    if (remove_flag) {
        -: 6640:      // Shift the remainder of the argv list left by one.  Note
        -: 6641:      // that argv has (*argc + 1) elements, the last one always being
        -: 6642:      // NULL.  The following loop moves the trailing NULL element as
        -: 6643:      // well.
       5*: 6644:      for (int j = i; j != *argc; j++) {
       3*: 6645:        argv[j] = argv[j + 1];
        -: 6646:      }
        -: 6647:
        -: 6648:      // Decrements the argument count.
       2*: 6649:      (*argc)--;
        -: 6650:
        -: 6651:      // We also need to decrement the iterator as we just removed
        -: 6652:      // an element.
       2*: 6653:      i--;
        -: 6654:    }
        -: 6655:  }
        -: 6656:
       1*: 6657:  if (g_help_flag) {
        -: 6658:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6659:    // latter may not be called at all if the user is using Google
        -: 6660:    // Test with another testing framework.
    #####: 6661:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6662:  }
       1*: 6663:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6614:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6615:  std::string flagfile_value;
    %%%%%: 6615-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6615-block  1
call    2 never executed
    $$$$$: 6615-block  2
call    3 never executed
    #####: 6616:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6617:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6617-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6617-block  1
call    6 never executed
    $$$$$: 6617-block  2
call    7 never executed
    #####: 6618:    const char* const arg = arg_string.c_str();
    %%%%%: 6618-block  0
call    0 never executed
        -: 6619:
        -: 6620:    using internal::ParseFlag;
        -: 6621:
    #####: 6622:    bool remove_flag = false;
    #####: 6623:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6623-block  0
branch  3 never executed
branch  4 never executed
    #####: 6624:      remove_flag = true;
    %%%%%: 6624-block  0
        -: 6625:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6626:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6626-block  1
branch  3 never executed
branch  4 never executed
    #####: 6627:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6628:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6629:      remove_flag = true;
    %%%%%: 6629-block  0
        -: 6630:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6631:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6631-block  0
call    0 never executed
    %%%%%: 6631-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6632:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6632-block  0
call    2 never executed
    %%%%%: 6632-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6632-block  2
    %%%%%: 6632-block  3
    %%%%%: 6632-block  4
branch  8 never executed
branch  9 never executed
    #####: 6633:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6633-block  0
call    0 never executed
        -: 6634:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6635:      // internal ones) trigger help display.
    #####: 6636:      g_help_flag = true;
    %%%%%: 6636-block  0
        -: 6637:    }
        -: 6638:
    #####: 6639:    if (remove_flag) {
    %%%%%: 6639-block  0
branch  0 never executed
branch  1 never executed
        -: 6640:      // Shift the remainder of the argv list left by one.  Note
        -: 6641:      // that argv has (*argc + 1) elements, the last one always being
        -: 6642:      // NULL.  The following loop moves the trailing NULL element as
        -: 6643:      // well.
    #####: 6644:      for (int j = i; j != *argc; j++) {
    %%%%%: 6644-block  0
    %%%%%: 6644-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6645:        argv[j] = argv[j + 1];
    %%%%%: 6645-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 6646:      }
        -: 6647:
        -: 6648:      // Decrements the argument count.
    #####: 6649:      (*argc)--;
    %%%%%: 6649-block  0
call    0 never executed
call    1 never executed
        -: 6650:
        -: 6651:      // We also need to decrement the iterator as we just removed
        -: 6652:      // an element.
    #####: 6653:      i--;
        -: 6654:    }
        -: 6655:  }
        -: 6656:
    #####: 6657:  if (g_help_flag) {
    %%%%%: 6657-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6657-block  1
    %%%%%: 6657-block  2
branch  2 never executed
branch  3 never executed
        -: 6658:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6659:    // latter may not be called at all if the user is using Google
        -: 6660:    // Test with another testing framework.
    #####: 6661:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6662:  }
    #####: 6663:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 55%
        1: 6614:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6615:  std::string flagfile_value;
        1: 6615-block  0
call    0 returned 1
call    1 returned 1
        1: 6615-block  1
call    2 returned 1
    $$$$$: 6615-block  2
call    3 never executed
        3: 6616:  for (int i = 1; i < *argc; i++) {
        3: 6616-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        4: 6617:    const std::string arg_string = StreamableToString(argv[i]);
        2: 6617-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6617-block  1
call    6 returned 2
    $$$$$: 6617-block  2
call    7 never executed
        2: 6618:    const char* const arg = arg_string.c_str();
        2: 6618-block  0
call    0 returned 2
        -: 6619:
        -: 6620:    using internal::ParseFlag;
        -: 6621:
        2: 6622:    bool remove_flag = false;
        2: 6623:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6623-block  0
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2: 6624:      remove_flag = true;
        2: 6624-block  0
        -: 6625:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6626:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6626-block  1
branch  3 never executed
branch  4 never executed
    #####: 6627:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6628:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6629:      remove_flag = true;
    %%%%%: 6629-block  0
        -: 6630:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6631:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6631-block  0
call    0 never executed
    %%%%%: 6631-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6632:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6632-block  0
call    2 never executed
    %%%%%: 6632-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6632-block  2
    %%%%%: 6632-block  3
    %%%%%: 6632-block  4
branch  8 never executed
branch  9 never executed
    #####: 6633:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6633-block  0
call    0 never executed
        -: 6634:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6635:      // internal ones) trigger help display.
    #####: 6636:      g_help_flag = true;
    %%%%%: 6636-block  0
        -: 6637:    }
        -: 6638:
        2: 6639:    if (remove_flag) {
        2: 6639-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 6640:      // Shift the remainder of the argv list left by one.  Note
        -: 6641:      // that argv has (*argc + 1) elements, the last one always being
        -: 6642:      // NULL.  The following loop moves the trailing NULL element as
        -: 6643:      // well.
        5: 6644:      for (int j = i; j != *argc; j++) {
        2: 6644-block  0
        5: 6644-block  1
call    0 returned 5
branch  1 taken 3 (fallthrough)
branch  2 taken 2
        3: 6645:        argv[j] = argv[j + 1];
        3: 6645-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
        -: 6646:      }
        -: 6647:
        -: 6648:      // Decrements the argument count.
        2: 6649:      (*argc)--;
        2: 6649-block  0
call    0 returned 2
call    1 returned 2
        -: 6650:
        -: 6651:      // We also need to decrement the iterator as we just removed
        -: 6652:      // an element.
        2: 6653:      i--;
        -: 6654:    }
        -: 6655:  }
        -: 6656:
       1*: 6657:  if (g_help_flag) {
        1: 6657-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6657-block  1
        1: 6657-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 6658:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6659:    // latter may not be called at all if the user is using Google
        -: 6660:    // Test with another testing framework.
    #####: 6661:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6662:  }
        1: 6663:}
------------------
        -: 6664:
        -: 6665:// Parses the command line for Google Test flags, without initializing
        -: 6666:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6667:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 6668:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6668-block  0
call    0 returned 1
        -: 6669:
        -: 6670:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6671:  // *_NSGetArgv() == argv
        -: 6672:  // Only applicable to char** version of argv
        -: 6673:#if GTEST_OS_MAC
        -: 6674:#ifndef GTEST_OS_IOS
        -: 6675:  if (*_NSGetArgv() == argv) {
        -: 6676:    *_NSGetArgc() = *argc;
        -: 6677:  }
        -: 6678:#endif
        -: 6679:#endif
        1: 6680:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6681:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6682:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6682-block  0
call    0 never executed
    #####: 6683:}
        -: 6684:
        -: 6685:// The internal implementation of InitGoogleTest().
        -: 6686://
        -: 6687:// The type parameter CharType can be instantiated to either char or
        -: 6688:// wchar_t.
        -: 6689:template <typename CharType>
       1*: 6690:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6691:  // We don't want to run the initialization code twice.
       1*: 6692:  if (GTestIsInitialized()) return;
        -: 6693:
       1*: 6694:  if (*argc <= 0) return;
        -: 6695:
       1*: 6696:  g_argvs.clear();
       4*: 6697:  for (int i = 0; i != *argc; i++) {
       3*: 6698:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6699:  }
        -: 6700:
        -: 6701:#if GTEST_HAS_ABSL
        -: 6702:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6703:#endif  // GTEST_HAS_ABSL
        -: 6704:
       1*: 6705:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6706:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6707:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6690:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6691:  // We don't want to run the initialization code twice.
    #####: 6692:  if (GTestIsInitialized()) return;
    %%%%%: 6692-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6692-block  1
        -: 6693:
    #####: 6694:  if (*argc <= 0) return;
    %%%%%: 6694-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6694-block  1
        -: 6695:
    #####: 6696:  g_argvs.clear();
    %%%%%: 6696-block  0
call    0 never executed
    #####: 6697:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6697-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6698:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6698-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6698-block  1
call    8 never executed
call    9 never executed
    $$$$$: 6698-block  2
call   10 never executed
    $$$$$: 6698-block  3
call   11 never executed
        -: 6699:  }
        -: 6700:
        -: 6701:#if GTEST_HAS_ABSL
        -: 6702:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6703:#endif  // GTEST_HAS_ABSL
        -: 6704:
    #####: 6705:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6705-block  0
call    0 never executed
    #####: 6706:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 6707:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 83%
        1: 6690:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6691:  // We don't want to run the initialization code twice.
       1*: 6692:  if (GTestIsInitialized()) return;
        1: 6692-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6692-block  1
        -: 6693:
       1*: 6694:  if (*argc <= 0) return;
        1: 6694-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6694-block  1
        -: 6695:
        1: 6696:  g_argvs.clear();
        1: 6696-block  0
call    0 returned 1
        4: 6697:  for (int i = 0; i != *argc; i++) {
        4: 6697-block  0
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6698:    g_argvs.push_back(StreamableToString(argv[i]));
        3: 6698-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3: 6698-block  1
call    8 returned 3
call    9 returned 3
    $$$$$: 6698-block  2
call   10 never executed
    $$$$$: 6698-block  3
call   11 never executed
        -: 6699:  }
        -: 6700:
        -: 6701:#if GTEST_HAS_ABSL
        -: 6702:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6703:#endif  // GTEST_HAS_ABSL
        -: 6704:
        1: 6705:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6705-block  0
call    0 returned 1
        1: 6706:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 6707:}
------------------
        -: 6708:
        -: 6709:}  // namespace internal
        -: 6710:
        -: 6711:// Initializes Google Test.  This must be called before calling
        -: 6712:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6713:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6714:// seen, it is removed from argv, and *argc is decremented.
        -: 6715://
        -: 6716:// No value is returned.  Instead, the Google Test flag variables are
        -: 6717:// updated.
        -: 6718://
        -: 6719:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6720:void InitGoogleTest(int* argc, char** argv) {
        -: 6721:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6722:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6723:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6724:  internal::InitGoogleTestImpl(argc, argv);
        1: 6724-block  0
call    0 returned 1
        -: 6725:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6726:}
        -: 6727:
        -: 6728:// This overloaded version can be used in Windows programs compiled in
        -: 6729:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6730:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6731:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6732:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6733:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6734:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6734-block  0
call    0 never executed
        -: 6735:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6736:}
        -: 6737:
        -: 6738:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6739:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6740:void InitGoogleTest() {
        -: 6741:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6742:  int argc = 1;
    %%%%%: 6742-block  0
call    0 never executed
    #####: 6743:  const auto arg0 = "dummy";
    #####: 6744:  char* argv0 = const_cast<char*>(arg0);
call    0 never executed
    #####: 6745:  char** argv = &argv0;
        -: 6746:
        -: 6747:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6748:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6749:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6750:  internal::InitGoogleTestImpl(&argc, argv);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6751:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6752:}
        -: 6753:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6754:std::string TempDir() {
        -: 6755:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6756:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6757:#elif GTEST_OS_WINDOWS_MOBILE
        -: 6758:  return "\\temp\\";
        -: 6759:#elif GTEST_OS_WINDOWS
        -: 6760:  const char* temp_dir = internal::posix::GetEnv("TEMP");
        -: 6761:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6762:    return "\\temp\\";
        -: 6763:  } else if (temp_dir[strlen(temp_dir) - 1] == '\\') {
        -: 6764:    return temp_dir;
        -: 6765:  } else {
        -: 6766:    return std::string(temp_dir) + "\\";
        -: 6767:  }
        -: 6768:#elif GTEST_OS_LINUX_ANDROID
        -: 6769:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6770:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6771:    return "/data/local/tmp/";
        -: 6772:  } else {
        -: 6773:    return temp_dir;
        -: 6774:  }
        -: 6775:#elif GTEST_OS_LINUX
    #####: 6776:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
    %%%%%: 6776-block  0
call    0 never executed
call    1 never executed
    #####: 6777:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6777-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6778:    return "/tmp/";
    %%%%%: 6778-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6778-block  1
call    5 never executed
call    6 never executed
    $$$$$: 6778-block  2
call    7 never executed
    $$$$$: 6778-block  3
call    8 never executed
        -: 6779:  } else {
    #####: 6780:    return temp_dir;
    %%%%%: 6780-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6780-block  1
call    5 never executed
call    6 never executed
    $$$$$: 6780-block  2
call    7 never executed
    $$$$$: 6780-block  3
call    8 never executed
        -: 6781:  }
        -: 6782:#else
        -: 6783:  return "/tmp/";
        -: 6784:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 6785:}
        -: 6786:
        -: 6787:// Class ScopedTrace
        -: 6788:
        -: 6789:// Pushes the given source file location and message onto a per-thread
        -: 6790:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6791:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6792:  internal::TraceInfo trace;
    %%%%%: 6792-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6792-block  1
call    2 never executed
    $$$$$: 6792-block  2
call    3 never executed
    #####: 6793:  trace.file = file;
    #####: 6794:  trace.line = line;
    #####: 6795:  trace.message.swap(message);
call    0 never executed
        -: 6796:
    #####: 6797:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6797-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6798:}
        -: 6799:
        -: 6800:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6801:ScopedTrace::~ScopedTrace()
        -: 6802:    GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6803:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6803-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 6804:}
        -: 6805:
        -: 6806:}  // namespace testing
